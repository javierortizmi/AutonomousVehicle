
LAB2_Final2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080041e0  080041e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a4  080042a4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042ac  080042ac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000078  0800432c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  0800432c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000964e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ec  00000000  00000000  000296ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bbd  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6cf  00000000  00000000  00043255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf75  00000000  00000000  0004e924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000375c  00000000  00000000  000db8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080041c8 	.word	0x080041c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080041c8 	.word	0x080041c8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2uiz>:
 800091c:	004a      	lsls	r2, r1, #1
 800091e:	d211      	bcs.n	8000944 <__aeabi_d2uiz+0x28>
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d211      	bcs.n	800094a <__aeabi_d2uiz+0x2e>
 8000926:	d50d      	bpl.n	8000944 <__aeabi_d2uiz+0x28>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d40e      	bmi.n	8000950 <__aeabi_d2uiz+0x34>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	fa23 f002 	lsr.w	r0, r3, r2
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094e:	d102      	bne.n	8000956 <__aeabi_d2uiz+0x3a>
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	4770      	bx	lr
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	4770      	bx	lr

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b976 	b.w	8000c60 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9e08      	ldr	r6, [sp, #32]
 8000992:	460d      	mov	r5, r1
 8000994:	4604      	mov	r4, r0
 8000996:	4688      	mov	r8, r1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d14d      	bne.n	8000a38 <__udivmoddi4+0xac>
 800099c:	428a      	cmp	r2, r1
 800099e:	4694      	mov	ip, r2
 80009a0:	d968      	bls.n	8000a74 <__udivmoddi4+0xe8>
 80009a2:	fab2 f282 	clz	r2, r2
 80009a6:	b152      	cbz	r2, 80009be <__udivmoddi4+0x32>
 80009a8:	fa01 f302 	lsl.w	r3, r1, r2
 80009ac:	f1c2 0120 	rsb	r1, r2, #32
 80009b0:	fa20 f101 	lsr.w	r1, r0, r1
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	ea41 0803 	orr.w	r8, r1, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80009c2:	fbb8 f7f1 	udiv	r7, r8, r1
 80009c6:	fa1f fe8c 	uxth.w	lr, ip
 80009ca:	fb01 8817 	mls	r8, r1, r7, r8
 80009ce:	fb07 f00e 	mul.w	r0, r7, lr
 80009d2:	0c23      	lsrs	r3, r4, #16
 80009d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d8:	4298      	cmp	r0, r3
 80009da:	d90a      	bls.n	80009f2 <__udivmoddi4+0x66>
 80009dc:	eb1c 0303 	adds.w	r3, ip, r3
 80009e0:	f107 35ff 	add.w	r5, r7, #4294967295
 80009e4:	f080 811e 	bcs.w	8000c24 <__udivmoddi4+0x298>
 80009e8:	4298      	cmp	r0, r3
 80009ea:	f240 811b 	bls.w	8000c24 <__udivmoddi4+0x298>
 80009ee:	3f02      	subs	r7, #2
 80009f0:	4463      	add	r3, ip
 80009f2:	1a1b      	subs	r3, r3, r0
 80009f4:	fbb3 f0f1 	udiv	r0, r3, r1
 80009f8:	fb01 3310 	mls	r3, r1, r0, r3
 80009fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a00:	b2a4      	uxth	r4, r4
 8000a02:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a06:	45a6      	cmp	lr, r4
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a12:	f080 8109 	bcs.w	8000c28 <__udivmoddi4+0x29c>
 8000a16:	45a6      	cmp	lr, r4
 8000a18:	f240 8106 	bls.w	8000c28 <__udivmoddi4+0x29c>
 8000a1c:	4464      	add	r4, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	2100      	movs	r1, #0
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a2a:	b11e      	cbz	r6, 8000a34 <__udivmoddi4+0xa8>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	40d4      	lsrs	r4, r2
 8000a30:	e9c6 4300 	strd	r4, r3, [r6]
 8000a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0xc2>
 8000a3c:	2e00      	cmp	r6, #0
 8000a3e:	f000 80ee 	beq.w	8000c1e <__udivmoddi4+0x292>
 8000a42:	2100      	movs	r1, #0
 8000a44:	e9c6 0500 	strd	r0, r5, [r6]
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4e:	fab3 f183 	clz	r1, r3
 8000a52:	2900      	cmp	r1, #0
 8000a54:	d14a      	bne.n	8000aec <__udivmoddi4+0x160>
 8000a56:	42ab      	cmp	r3, r5
 8000a58:	d302      	bcc.n	8000a60 <__udivmoddi4+0xd4>
 8000a5a:	4282      	cmp	r2, r0
 8000a5c:	f200 80fc 	bhi.w	8000c58 <__udivmoddi4+0x2cc>
 8000a60:	1a84      	subs	r4, r0, r2
 8000a62:	eb65 0303 	sbc.w	r3, r5, r3
 8000a66:	2001      	movs	r0, #1
 8000a68:	4698      	mov	r8, r3
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d0e2      	beq.n	8000a34 <__udivmoddi4+0xa8>
 8000a6e:	e9c6 4800 	strd	r4, r8, [r6]
 8000a72:	e7df      	b.n	8000a34 <__udivmoddi4+0xa8>
 8000a74:	b902      	cbnz	r2, 8000a78 <__udivmoddi4+0xec>
 8000a76:	deff      	udf	#255	; 0xff
 8000a78:	fab2 f282 	clz	r2, r2
 8000a7c:	2a00      	cmp	r2, #0
 8000a7e:	f040 8091 	bne.w	8000ba4 <__udivmoddi4+0x218>
 8000a82:	eba1 000c 	sub.w	r0, r1, ip
 8000a86:	2101      	movs	r1, #1
 8000a88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8c:	fa1f fe8c 	uxth.w	lr, ip
 8000a90:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a94:	fb07 0013 	mls	r0, r7, r3, r0
 8000a98:	0c25      	lsrs	r5, r4, #16
 8000a9a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a9e:	fb0e f003 	mul.w	r0, lr, r3
 8000aa2:	42a8      	cmp	r0, r5
 8000aa4:	d908      	bls.n	8000ab8 <__udivmoddi4+0x12c>
 8000aa6:	eb1c 0505 	adds.w	r5, ip, r5
 8000aaa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0x12a>
 8000ab0:	42a8      	cmp	r0, r5
 8000ab2:	f200 80ce 	bhi.w	8000c52 <__udivmoddi4+0x2c6>
 8000ab6:	4643      	mov	r3, r8
 8000ab8:	1a2d      	subs	r5, r5, r0
 8000aba:	fbb5 f0f7 	udiv	r0, r5, r7
 8000abe:	fb07 5510 	mls	r5, r7, r0, r5
 8000ac2:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac6:	b2a4      	uxth	r4, r4
 8000ac8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000acc:	45a6      	cmp	lr, r4
 8000ace:	d908      	bls.n	8000ae2 <__udivmoddi4+0x156>
 8000ad0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ad8:	d202      	bcs.n	8000ae0 <__udivmoddi4+0x154>
 8000ada:	45a6      	cmp	lr, r4
 8000adc:	f200 80b6 	bhi.w	8000c4c <__udivmoddi4+0x2c0>
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	eba4 040e 	sub.w	r4, r4, lr
 8000ae6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aea:	e79e      	b.n	8000a2a <__udivmoddi4+0x9e>
 8000aec:	f1c1 0720 	rsb	r7, r1, #32
 8000af0:	408b      	lsls	r3, r1
 8000af2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000af6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000afa:	fa25 fa07 	lsr.w	sl, r5, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fbba f8f9 	udiv	r8, sl, r9
 8000b06:	fa20 f307 	lsr.w	r3, r0, r7
 8000b0a:	fb09 aa18 	mls	sl, r9, r8, sl
 8000b0e:	408d      	lsls	r5, r1
 8000b10:	fa1f fe8c 	uxth.w	lr, ip
 8000b14:	431d      	orrs	r5, r3
 8000b16:	fa00 f301 	lsl.w	r3, r0, r1
 8000b1a:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1e:	0c2c      	lsrs	r4, r5, #16
 8000b20:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000b24:	42a0      	cmp	r0, r4
 8000b26:	fa02 f201 	lsl.w	r2, r2, r1
 8000b2a:	d90b      	bls.n	8000b44 <__udivmoddi4+0x1b8>
 8000b2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b34:	f080 8088 	bcs.w	8000c48 <__udivmoddi4+0x2bc>
 8000b38:	42a0      	cmp	r0, r4
 8000b3a:	f240 8085 	bls.w	8000c48 <__udivmoddi4+0x2bc>
 8000b3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b42:	4464      	add	r4, ip
 8000b44:	1a24      	subs	r4, r4, r0
 8000b46:	fbb4 f0f9 	udiv	r0, r4, r9
 8000b4a:	fb09 4410 	mls	r4, r9, r0, r4
 8000b4e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b52:	b2ad      	uxth	r5, r5
 8000b54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x1e2>
 8000b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b60:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b64:	d26c      	bcs.n	8000c40 <__udivmoddi4+0x2b4>
 8000b66:	45a6      	cmp	lr, r4
 8000b68:	d96a      	bls.n	8000c40 <__udivmoddi4+0x2b4>
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	4464      	add	r4, ip
 8000b6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b72:	fba0 9502 	umull	r9, r5, r0, r2
 8000b76:	eba4 040e 	sub.w	r4, r4, lr
 8000b7a:	42ac      	cmp	r4, r5
 8000b7c:	46c8      	mov	r8, r9
 8000b7e:	46ae      	mov	lr, r5
 8000b80:	d356      	bcc.n	8000c30 <__udivmoddi4+0x2a4>
 8000b82:	d053      	beq.n	8000c2c <__udivmoddi4+0x2a0>
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d069      	beq.n	8000c5c <__udivmoddi4+0x2d0>
 8000b88:	ebb3 0208 	subs.w	r2, r3, r8
 8000b8c:	eb64 040e 	sbc.w	r4, r4, lr
 8000b90:	fa22 f301 	lsr.w	r3, r2, r1
 8000b94:	fa04 f707 	lsl.w	r7, r4, r7
 8000b98:	431f      	orrs	r7, r3
 8000b9a:	40cc      	lsrs	r4, r1
 8000b9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	e747      	b.n	8000a34 <__udivmoddi4+0xa8>
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	f1c2 0120 	rsb	r1, r2, #32
 8000bac:	fa25 f301 	lsr.w	r3, r5, r1
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb8:	4095      	lsls	r5, r2
 8000bba:	430d      	orrs	r5, r1
 8000bbc:	fbb3 f1f7 	udiv	r1, r3, r7
 8000bc0:	fb07 3311 	mls	r3, r7, r1, r3
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	0c28      	lsrs	r0, r5, #16
 8000bca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bce:	fb01 f30e 	mul.w	r3, r1, lr
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd8:	d908      	bls.n	8000bec <__udivmoddi4+0x260>
 8000bda:	eb1c 0000 	adds.w	r0, ip, r0
 8000bde:	f101 38ff 	add.w	r8, r1, #4294967295
 8000be2:	d22f      	bcs.n	8000c44 <__udivmoddi4+0x2b8>
 8000be4:	4283      	cmp	r3, r0
 8000be6:	d92d      	bls.n	8000c44 <__udivmoddi4+0x2b8>
 8000be8:	3902      	subs	r1, #2
 8000bea:	4460      	add	r0, ip
 8000bec:	1ac0      	subs	r0, r0, r3
 8000bee:	fbb0 f3f7 	udiv	r3, r0, r7
 8000bf2:	fb07 0013 	mls	r0, r7, r3, r0
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bfc:	fb03 f00e 	mul.w	r0, r3, lr
 8000c00:	42a8      	cmp	r0, r5
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x28a>
 8000c04:	eb1c 0505 	adds.w	r5, ip, r5
 8000c08:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0c:	d216      	bcs.n	8000c3c <__udivmoddi4+0x2b0>
 8000c0e:	42a8      	cmp	r0, r5
 8000c10:	d914      	bls.n	8000c3c <__udivmoddi4+0x2b0>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4465      	add	r5, ip
 8000c16:	1a28      	subs	r0, r5, r0
 8000c18:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c1c:	e738      	b.n	8000a90 <__udivmoddi4+0x104>
 8000c1e:	4631      	mov	r1, r6
 8000c20:	4630      	mov	r0, r6
 8000c22:	e707      	b.n	8000a34 <__udivmoddi4+0xa8>
 8000c24:	462f      	mov	r7, r5
 8000c26:	e6e4      	b.n	80009f2 <__udivmoddi4+0x66>
 8000c28:	4618      	mov	r0, r3
 8000c2a:	e6f9      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c2c:	454b      	cmp	r3, r9
 8000c2e:	d2a9      	bcs.n	8000b84 <__udivmoddi4+0x1f8>
 8000c30:	ebb9 0802 	subs.w	r8, r9, r2
 8000c34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c38:	3801      	subs	r0, #1
 8000c3a:	e7a3      	b.n	8000b84 <__udivmoddi4+0x1f8>
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	e7ea      	b.n	8000c16 <__udivmoddi4+0x28a>
 8000c40:	4628      	mov	r0, r5
 8000c42:	e794      	b.n	8000b6e <__udivmoddi4+0x1e2>
 8000c44:	4641      	mov	r1, r8
 8000c46:	e7d1      	b.n	8000bec <__udivmoddi4+0x260>
 8000c48:	46d0      	mov	r8, sl
 8000c4a:	e77b      	b.n	8000b44 <__udivmoddi4+0x1b8>
 8000c4c:	4464      	add	r4, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	e747      	b.n	8000ae2 <__udivmoddi4+0x156>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4465      	add	r5, ip
 8000c56:	e72f      	b.n	8000ab8 <__udivmoddi4+0x12c>
 8000c58:	4608      	mov	r0, r1
 8000c5a:	e706      	b.n	8000a6a <__udivmoddi4+0xde>
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0xa8>

08000c60 <__aeabi_idiv0>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <Bin2Ascii>:
void espera(int tiempo) {
    int i;
    for(i=0; i<tiempo; i++);
}

void Bin2Ascii(unsigned short numero, unsigned char* cadena) {
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	80fb      	strh	r3, [r7, #6]
    unsigned short parcial, j, cociente, divisor;

    parcial = numero;
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	81fb      	strh	r3, [r7, #14]
    divisor = 10000;
 8000c74:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c78:	817b      	strh	r3, [r7, #10]
    *(cadena) = ' ';
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	701a      	strb	r2, [r3, #0]
    for (j = 1; j < 6; j++)
 8000c80:	2301      	movs	r3, #1
 8000c82:	81bb      	strh	r3, [r7, #12]
 8000c84:	e01d      	b.n	8000cc2 <Bin2Ascii+0x5e>
    {
        cociente = parcial/divisor;
 8000c86:	89fa      	ldrh	r2, [r7, #14]
 8000c88:	897b      	ldrh	r3, [r7, #10]
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	813b      	strh	r3, [r7, #8]
        *(cadena+j) = '0'+ (unsigned char)cociente;
 8000c90:	893b      	ldrh	r3, [r7, #8]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	89bb      	ldrh	r3, [r7, #12]
 8000c96:	6839      	ldr	r1, [r7, #0]
 8000c98:	440b      	add	r3, r1
 8000c9a:	3230      	adds	r2, #48	; 0x30
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	701a      	strb	r2, [r3, #0]
        parcial -= (cociente * divisor);
 8000ca0:	893b      	ldrh	r3, [r7, #8]
 8000ca2:	897a      	ldrh	r2, [r7, #10]
 8000ca4:	fb02 f303 	mul.w	r3, r2, r3
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	89fa      	ldrh	r2, [r7, #14]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	81fb      	strh	r3, [r7, #14]
        divisor /= 10;
 8000cb0:	897b      	ldrh	r3, [r7, #10]
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <Bin2Ascii+0x78>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	817b      	strh	r3, [r7, #10]
    for (j = 1; j < 6; j++)
 8000cbc:	89bb      	ldrh	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	81bb      	strh	r3, [r7, #12]
 8000cc2:	89bb      	ldrh	r3, [r7, #12]
 8000cc4:	2b05      	cmp	r3, #5
 8000cc6:	d9de      	bls.n	8000c86 <Bin2Ascii+0x22>
    }

    *(cadena+6) = 0;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	3306      	adds	r3, #6
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]

}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	cccccccd 	.word	0xcccccccd

08000ce0 <_write>:

void espera(int tiempo);
void Bin2Ascii(unsigned short numero, unsigned char* cadena);
//int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
    for ( i = 0; i < len; i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00b      	b.n	8000d0e <_write+0x2e>
        HAL_UART_Transmit(&huart2,ptr++,1,1000);
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	1c4b      	adds	r3, r1, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d00:	2201      	movs	r2, #1
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <_write+0x40>)
 8000d04:	f002 f8d9 	bl	8002eba <HAL_UART_Transmit>
    for ( i = 0; i < len; i++)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbef      	blt.n	8000cf6 <_write+0x16>
    return len;
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000114 	.word	0x20000114

08000d24 <TIM3_IRQHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// TOGGLE BUZZER FUNCTION
void TIM3_IRQHandler(void) {
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  if((TIM3->SR & 0x0002) != 0) {
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <TIM3_IRQHandler+0x50>)
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d014      	beq.n	8000d5e <TIM3_IRQHandler+0x3a>
    TIM3->CCR1 += buzzerPeriod;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <TIM3_IRQHandler+0x50>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d38:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <TIM3_IRQHandler+0x54>)
 8000d3a:	8812      	ldrh	r2, [r2, #0]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <TIM3_IRQHandler+0x50>)
 8000d40:	440b      	add	r3, r1
 8000d42:	6353      	str	r3, [r2, #52]	; 0x34
    buzzerToggleChange++;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <TIM3_IRQHandler+0x58>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <TIM3_IRQHandler+0x58>)
 8000d4e:	801a      	strh	r2, [r3, #0]
    if(buzzerToggleChange>1) buzzerToggleChange=0;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <TIM3_IRQHandler+0x58>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d902      	bls.n	8000d5e <TIM3_IRQHandler+0x3a>
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <TIM3_IRQHandler+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
  }
  TIM3->SR &= ~(0x0002);
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <TIM3_IRQHandler+0x50>)
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <TIM3_IRQHandler+0x50>)
 8000d64:	f023 0302 	bic.w	r3, r3, #2
 8000d68:	6113      	str	r3, [r2, #16]
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40000400 	.word	0x40000400
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	20000168 	.word	0x20000168

08000d80 <calculateDistance>:

// CALCULATE DISTANCE FUNCTION
void calculateDistance(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  // Apply the formula to calculate the distance (in mm) and store it in a variable
  distance = (0.034 * time) / 2;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <calculateDistance+0x50>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fb4b 	bl	8000424 <__aeabi_i2d>
 8000d8e:	a30e      	add	r3, pc, #56	; (adr r3, 8000dc8 <calculateDistance+0x48>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f7ff fbb0 	bl	80004f8 <__aeabi_dmul>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da8:	f7ff fcd0 	bl	800074c <__aeabi_ddiv>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f7ff fdb2 	bl	800091c <__aeabi_d2uiz>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <calculateDistance+0x54>)
 8000dbe:	801a      	strh	r2, [r3, #0]

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	b020c49c 	.word	0xb020c49c
 8000dcc:	3fa16872 	.word	0x3fa16872
 8000dd0:	20000164 	.word	0x20000164
 8000dd4:	20000160 	.word	0x20000160

08000dd8 <TIM2_IRQHandler>:
  TIM3->CNT = 0;                      // Initialize the counter at 0
  GPIOD->BSRR = (1 << 2);             // Set Trigger PIN (1)
}

// HANDLES THE BUZZER AND ECHO TIM2
void TIM2_IRQHandler(void) {
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  // Corresponds to the echo flag
  if((TIM2->SR & 0x0004) != 0) {      // CHANNEL 2
 8000ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d014      	beq.n	8000e14 <TIM2_IRQHandler+0x3c>
    TIM2->CCR2 += detectionPeriod;
 8000dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <TIM2_IRQHandler+0x44>)
 8000df2:	8812      	ldrh	r2, [r2, #0]
 8000df4:	4611      	mov	r1, r2
 8000df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfa:	440b      	add	r3, r1
 8000dfc:	6393      	str	r3, [r2, #56]	; 0x38
    cicloFlag = 1;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <TIM2_IRQHandler+0x48>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	801a      	strh	r2, [r3, #0]
    TIM2->SR &= ~(0x0004);
 8000e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0e:	f023 0304 	bic.w	r3, r3, #4
 8000e12:	6113      	str	r3, [r2, #16]
  }
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	20000002 	.word	0x20000002
 8000e20:	2000016a 	.word	0x2000016a

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 fca1 	bl	800176e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f986 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 fa96 	bl	8001360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e34:	f000 fa6a 	bl	800130c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e38:	f000 f9ce 	bl	80011d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e3c:	f000 fa18 	bl	8001270 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // CONFIG BUZZER GPIO
  GPIOA->MODER &= ~(1 << (1*2 +1));    // PA1 as Digital Output (01)
 8000e40:	4b99      	ldr	r3, [pc, #612]	; (80010a8 <main+0x284>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a98      	ldr	r2, [pc, #608]	; (80010a8 <main+0x284>)
 8000e46:	f023 0308 	bic.w	r3, r3, #8
 8000e4a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (1*2));
 8000e4c:	4b96      	ldr	r3, [pc, #600]	; (80010a8 <main+0x284>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a95      	ldr	r2, [pc, #596]	; (80010a8 <main+0x284>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6013      	str	r3, [r2, #0]

  // CONFIG TRIGGER GPIO
  GPIOD->MODER &= ~(1 << (2*2 +1));   // PD2 as Digital Output (01)
 8000e58:	4b94      	ldr	r3, [pc, #592]	; (80010ac <main+0x288>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a93      	ldr	r2, [pc, #588]	; (80010ac <main+0x288>)
 8000e5e:	f023 0320 	bic.w	r3, r3, #32
 8000e62:	6013      	str	r3, [r2, #0]
  GPIOD->MODER |= (1 << (2*2));
 8000e64:	4b91      	ldr	r3, [pc, #580]	; (80010ac <main+0x288>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a90      	ldr	r2, [pc, #576]	; (80010ac <main+0x288>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]

  // CONFIG ECHO GPIO (TIM2 CH1)
  GPIOA->MODER |= (1 << (5*2 +1));    // PA5 as AF (10)
 8000e70:	4b8d      	ldr	r3, [pc, #564]	; (80010a8 <main+0x284>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a8c      	ldr	r2, [pc, #560]	; (80010a8 <main+0x284>)
 8000e76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e7a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~(1 << (5*2));
 8000e7c:	4b8a      	ldr	r3, [pc, #552]	; (80010a8 <main+0x284>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a89      	ldr	r2, [pc, #548]	; (80010a8 <main+0x284>)
 8000e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[0] &= ~(0x00F00000);
 8000e88:	4b87      	ldr	r3, [pc, #540]	; (80010a8 <main+0x284>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a86      	ldr	r2, [pc, #536]	; (80010a8 <main+0x284>)
 8000e8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000e92:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (1 << 5*4);        // Select the AF1 for PA5
 8000e94:	4b84      	ldr	r3, [pc, #528]	; (80010a8 <main+0x284>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a83      	ldr	r2, [pc, #524]	; (80010a8 <main+0x284>)
 8000e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e9e:	6213      	str	r3, [r2, #32]

  // TIM2 CONFIG (TRIGGER ECHO & PPAL LOOP)
  // Select the internal clock
  TIM2->CR1 = 0x0000;     // ARPE = 0 (only for PWM); CEN = 0 (counter disabled for configuration)
 8000ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
  TIM2->CR2 = 0x0000;     // All zeros
 8000ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  TIM2->SMCR = 0x0000;    // All zeros
 8000eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]

  // Counter behavior setting
  TIM2->PSC = 31;            // freq_Counter = 32 MHz / 32 = 1 MHz -->> T_Counter = 1 us
 8000eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ebc:	221f      	movs	r2, #31
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->CNT = 0;              // Initialize the counter at 0
 8000ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR = 0xFFFF;         // Maximum value
 8000ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = 0xFFFF;
 8000ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = detectionPeriod;   // CCR3 = 65000 (PPal Loop)
 8000edc:	4b74      	ldr	r3, [pc, #464]	; (80010b0 <main+0x28c>)
 8000ede:	881a      	ldrh	r2, [r3, #0]
 8000ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38

  // Setting IRQ or not
  TIM2->DIER &= ~(0xFF);
 8000ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ef4:	60d3      	str	r3, [r2, #12]
  //TIM2->DIER |= (1<<1);       // Enable IRQ for Channel 1 (CC1E)
  TIM2->DIER |= (1<<2);
 8000ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	60d3      	str	r3, [r2, #12]

  // Output mode
  TIM2->CCMR1 &= ~(0xFFFF);   // Clear CCMR1 register
 8000f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	6193      	str	r3, [r2, #24]
  TIM2->CCMR1 |= 0x0001;      // CC1S = 01 (TIC); CC2S = 00 (TOC); OC2PE = 0 (only for PWM); OC2M = 011 (Toogle)
 8000f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
  TIM2->CCER = 0x000b;
 8000f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2a:	220b      	movs	r2, #11
 8000f2c:	621a      	str	r2, [r3, #32]

  // Counter enabling
  TIM2->CR1 |= 0x0001;        // CEN = 1 -->> Start counter
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6013      	str	r3, [r2, #0]
  TIM2->EGR |= 0x0001;        // UG = 1 -->> Update all registers
 8000f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6153      	str	r3, [r2, #20]
  TIM2->SR = 0x0000;          // Clear counter flags
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]

  // Enabling TIM2_IRQ at NVIC
  NVIC->ISER[0] |= (1 << 28);
 8000f56:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <main+0x290>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a56      	ldr	r2, [pc, #344]	; (80010b4 <main+0x290>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	6013      	str	r3, [r2, #0]

  //TIM3 CONFIG (BUZZER)
  // Select the internal clock
  TIM3->CR1 = 0x0000;         // ARPE = 0 (only for PWM); CEN = 0 (counter disabled for configuration)
 8000f62:	4b55      	ldr	r3, [pc, #340]	; (80010b8 <main+0x294>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
  TIM3->CR2 = 0x0000;         // All zeros
 8000f68:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <main+0x294>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  TIM3->SMCR = 0x0000;        // All zeros
 8000f6e:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <main+0x294>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]

  //Counter behavior setting
  TIM3->PSC = 31999;             // freq_Counter = 32 MHz / 32000 = 1 kHz -->> T_Counter = 1 ms -->> CCR = 500
 8000f74:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <main+0x294>)
 8000f76:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM3->CNT = 0;              // Initialize the counter at 0
 8000f7c:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <main+0x294>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->ARR = 0xFFFF;         // Set to the maximum
 8000f82:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <main+0x294>)
 8000f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR1 = buzzerPeriod;   // The first value = 11 = 11 us. Stores the value of the delay. Will be updated
 8000f8a:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <main+0x298>)
 8000f8c:	881a      	ldrh	r2, [r3, #0]
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <main+0x294>)
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34

  // Setting IRQ or not
  TIM3->DIER |= (0x0002);    // We disable an IRQ in channel 1
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <main+0x294>)
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <main+0x294>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	60d3      	str	r3, [r2, #12]

  // Output mode
  TIM3->CCMR1 &= ~(0xFFFF);   // Clear CCMR1 register
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <main+0x294>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a45      	ldr	r2, [pc, #276]	; (80010b8 <main+0x294>)
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	6193      	str	r3, [r2, #24]
  TIM3->CCMR1 = 0x0000;      // CC1S = 0 (TOC); OC1M = 000 (no output); OC1PE = 0 (No preload)
 8000faa:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <main+0x294>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  TIM3->CCER = 0x0000;        // CC1NP = 0; CC1P = 0; CC1E = 0 (Disable output)
 8000fb0:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <main+0x294>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]

  // Counter enabling
  TIM3->CR1 |= 0x0001;        // CEN = 1 -->> Start counter
 8000fb6:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <main+0x294>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <main+0x294>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6013      	str	r3, [r2, #0]
  TIM3->EGR |= 0x0001;        // UG = 1 -->> Update all registers
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <main+0x294>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a3c      	ldr	r2, [pc, #240]	; (80010b8 <main+0x294>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6153      	str	r3, [r2, #20]
  TIM3->SR = 0x0000;          // Clear counter flags
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <main+0x294>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]

  // Enabling TIM3_IRQ at NVIC
  NVIC->ISER[0] |= (1 << 29);
 8000fd4:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <main+0x290>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a36      	ldr	r2, [pc, #216]	; (80010b4 <main+0x290>)
 8000fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fde:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(cicloFlag == 1) {
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <main+0x29c>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d157      	bne.n	8001098 <main+0x274>

      GPIOD->BSRR = (1 << 2);
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <main+0x288>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	619a      	str	r2, [r3, #24]
      initialValue = TIM2->CNT;
 8000fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <main+0x2a0>)
 8000ff8:	801a      	strh	r2, [r3, #0]
      while(TIM2->CNT < (initialValue + triggerTime));
 8000ffa:	bf00      	nop
 8000ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <main+0x2a0>)
 8001004:	8812      	ldrh	r2, [r2, #0]
 8001006:	4611      	mov	r1, r2
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <main+0x2a4>)
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	440a      	add	r2, r1
 800100e:	4293      	cmp	r3, r2
 8001010:	d3f4      	bcc.n	8000ffc <main+0x1d8>
      GPIOD->BSRR = (1 << 2)<<16;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <main+0x288>)
 8001014:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001018:	619a      	str	r2, [r3, #24]


      while((TIM2->SR & 0x0002) == 0);
 800101a:	bf00      	nop
 800101c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f8      	beq.n	800101c <main+0x1f8>
      TIM2->SR &= ~(0x0002);
 800102a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001034:	f023 0302 	bic.w	r3, r3, #2
 8001038:	6113      	str	r3, [r2, #16]
      startTime = TIM2->CCR1;
 800103a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <main+0x2a8>)
 8001044:	801a      	strh	r2, [r3, #0]

      while((TIM2->SR & 0x0002) == 0);
 8001046:	bf00      	nop
 8001048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f8      	beq.n	8001048 <main+0x224>
      TIM2->SR &= ~(0x0002);
 8001056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001060:	f023 0302 	bic.w	r3, r3, #2
 8001064:	6113      	str	r3, [r2, #16]

      time = TIM2->CCR1 - startTime;
 8001066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <main+0x2a8>)
 800106e:	8812      	ldrh	r2, [r2, #0]
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	461a      	mov	r2, r3
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <main+0x2ac>)
 8001076:	601a      	str	r2, [r3, #0]
      if(time < 0) time += 0xFFFF;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <main+0x2ac>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	da06      	bge.n	800108e <main+0x26a>
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <main+0x2ac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001088:	33ff      	adds	r3, #255	; 0xff
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <main+0x2ac>)
 800108c:	6013      	str	r3, [r2, #0]

      calculateDistance();
 800108e:	f7ff fe77 	bl	8000d80 <calculateDistance>

      cicloFlag = 0;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <main+0x29c>)
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
    }

    if(distance < 10) {
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <main+0x2b0>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	2b09      	cmp	r3, #9
 800109e:	d81b      	bhi.n	80010d8 <main+0x2b4>
      GPIOA->BSRR = (1 << 1);
 80010a0:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <main+0x284>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	e033      	b.n	8001110 <main+0x2ec>
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	20000002 	.word	0x20000002
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	40000400 	.word	0x40000400
 80010bc:	20000004 	.word	0x20000004
 80010c0:	2000016a 	.word	0x2000016a
 80010c4:	2000016c 	.word	0x2000016c
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000162 	.word	0x20000162
 80010d0:	20000164 	.word	0x20000164
 80010d4:	20000160 	.word	0x20000160
    }
    else if(distance >= 10 && distance <= 20) {
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <main+0x304>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b09      	cmp	r3, #9
 80010de:	d913      	bls.n	8001108 <main+0x2e4>
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <main+0x304>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2b14      	cmp	r3, #20
 80010e6:	d80f      	bhi.n	8001108 <main+0x2e4>
      if(buzzerToggleChange == 1) {
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <main+0x308>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d102      	bne.n	80010f6 <main+0x2d2>
        GPIOA->BSRR = (1 << 1);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <main+0x30c>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	619a      	str	r2, [r3, #24]
      }
      if(buzzerToggleChange == 0) {
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <main+0x308>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d108      	bne.n	8001110 <main+0x2ec>
        GPIOA->BSRR = (1 << 1)<<16;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <main+0x30c>)
 8001100:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001104:	619a      	str	r2, [r3, #24]
      if(buzzerToggleChange == 0) {
 8001106:	e003      	b.n	8001110 <main+0x2ec>
      }
    }
    else {
      GPIOA->BSRR = (1 << 1)<<16;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <main+0x30c>)
 800110a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800110e:	619a      	str	r2, [r3, #24]
    }
    Bin2Ascii(buzzerToggleChange, cadena);
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <main+0x308>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4907      	ldr	r1, [pc, #28]	; (8001134 <main+0x310>)
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fda4 	bl	8000c64 <Bin2Ascii>
    printf("%s\n\r", cadena);   // Show if the results are what we expected
 800111c:	4905      	ldr	r1, [pc, #20]	; (8001134 <main+0x310>)
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <main+0x314>)
 8001120:	f002 f8be 	bl	80032a0 <iprintf>
    if(cicloFlag == 1) {
 8001124:	e75c      	b.n	8000fe0 <main+0x1bc>
 8001126:	bf00      	nop
 8001128:	20000160 	.word	0x20000160
 800112c:	20000168 	.word	0x20000168
 8001130:	40020000 	.word	0x40020000
 8001134:	20000158 	.word	0x20000158
 8001138:	080041e0 	.word	0x080041e0

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b092      	sub	sp, #72	; 0x48
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2234      	movs	r2, #52	; 0x34
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 f8a0 	bl	8003290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <SystemClock_Config+0x98>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001166:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <SystemClock_Config+0x98>)
 8001168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800116c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116e:	2302      	movs	r3, #2
 8001170:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	2301      	movs	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117e:	2300      	movs	r3, #0
 8001180:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001182:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001188:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fde6 	bl	8001d64 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800119e:	f000 f967 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2303      	movs	r3, #3
 80011a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	2101      	movs	r1, #1
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 f902 	bl	80023c4 <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011c6:	f000 f953 	bl	8001470 <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3748      	adds	r7, #72	; 0x48
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_TIM2_Init+0x94>)
 80011f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_TIM2_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM2_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_TIM2_Init+0x94>)
 800120a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_TIM2_Init+0x94>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_TIM2_Init+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121c:	4813      	ldr	r0, [pc, #76]	; (800126c <MX_TIM2_Init+0x94>)
 800121e:	f001 fb97 	bl	8002950 <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001228:	f000 f922 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_TIM2_Init+0x94>)
 800123a:	f001 fbc8 	bl	80029ce <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001244:	f000 f914 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_TIM2_Init+0x94>)
 8001256:	f001 fd85 	bl	8002d64 <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001260:	f000 f906 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000094 	.word	0x20000094

08001270 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM3_Init+0x94>)
 800128e:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <MX_TIM3_Init+0x98>)
 8001290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM3_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM3_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM3_Init+0x94>)
 80012a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_TIM3_Init+0x94>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_TIM3_Init+0x94>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <MX_TIM3_Init+0x94>)
 80012b4:	f001 fb4c 	bl	8002950 <HAL_TIM_Base_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012be:	f000 f8d7 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_TIM3_Init+0x94>)
 80012d0:	f001 fb7d 	bl	80029ce <HAL_TIM_ConfigClockSource>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 f8c9 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM3_Init+0x94>)
 80012ec:	f001 fd3a 	bl	8002d64 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012f6:	f000 f8bb 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000d4 	.word	0x200000d4
 8001308:	40000400 	.word	0x40000400

0800130c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART2_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART2_UART_Init+0x4c>)
 8001344:	f001 fd6c 	bl	8002e20 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f000 f88f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000114 	.word	0x20000114
 800135c:	40004400 	.word	0x40004400

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <MX_GPIO_Init+0x100>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a39      	ldr	r2, [pc, #228]	; (8001460 <MX_GPIO_Init+0x100>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <MX_GPIO_Init+0x100>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <MX_GPIO_Init+0x100>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a33      	ldr	r2, [pc, #204]	; (8001460 <MX_GPIO_Init+0x100>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <MX_GPIO_Init+0x100>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <MX_GPIO_Init+0x100>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <MX_GPIO_Init+0x100>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_GPIO_Init+0x100>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <MX_GPIO_Init+0x100>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a27      	ldr	r2, [pc, #156]	; (8001460 <MX_GPIO_Init+0x100>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <MX_GPIO_Init+0x100>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_GPIO_Init+0x100>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <MX_GPIO_Init+0x100>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_GPIO_Init+0x100>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2122      	movs	r1, #34	; 0x22
 80013f2:	481c      	ldr	r0, [pc, #112]	; (8001464 <MX_GPIO_Init+0x104>)
 80013f4:	f000 fc9e 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2104      	movs	r1, #4
 80013fc:	481a      	ldr	r0, [pc, #104]	; (8001468 <MX_GPIO_Init+0x108>)
 80013fe:	f000 fc99 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001408:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4814      	ldr	r0, [pc, #80]	; (800146c <MX_GPIO_Init+0x10c>)
 800141a:	f000 fafb 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 800141e:	2322      	movs	r3, #34	; 0x22
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <MX_GPIO_Init+0x104>)
 8001436:	f000 faed 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800143a:	2304      	movs	r3, #4
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_GPIO_Init+0x108>)
 8001452:	f000 fadf 	bl	8001a14 <HAL_GPIO_Init>

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40020800 	.word	0x40020800

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_MspInit+0x5c>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_MspInit+0x5c>)
 8001488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800148c:	6253      	str	r3, [r2, #36]	; 0x24
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_MspInit+0x5c>)
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_MspInit+0x5c>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_MspInit+0x5c>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_MspInit+0x5c>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x5c>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x5c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6253      	str	r3, [r2, #36]	; 0x24
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x5c>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f000 fa6e 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ec:	d10c      	bne.n	8001508 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_TIM_Base_MspInit+0x58>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_TIM_Base_MspInit+0x58>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6253      	str	r3, [r2, #36]	; 0x24
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_TIM_Base_MspInit+0x58>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001506:	e010      	b.n	800152a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_TIM_Base_MspInit+0x5c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10b      	bne.n	800152a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_TIM_Base_MspInit+0x58>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_TIM_Base_MspInit+0x58>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6253      	str	r3, [r2, #36]	; 0x24
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_TIM_Base_MspInit+0x58>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40023800 	.word	0x40023800
 8001538:	40000400 	.word	0x40000400

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_UART_MspInit+0x7c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d127      	bne.n	80015ae <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	6253      	str	r3, [r2, #36]	; 0x24
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_UART_MspInit+0x80>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_UART_MspInit+0x80>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_UART_MspInit+0x80>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158e:	230c      	movs	r3, #12
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159e:	2307      	movs	r3, #7
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_UART_MspInit+0x84>)
 80015aa:	f000 fa33 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40004400 	.word	0x40004400
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f903 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e00a      	b.n	800163a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001624:	f3af 8000 	nop.w
 8001628:	4601      	mov	r1, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	60ba      	str	r2, [r7, #8]
 8001630:	b2ca      	uxtb	r2, r1
 8001632:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	dbf0      	blt.n	8001624 <_read+0x12>
  }

  return len;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_close>:
  }
  return len;
}

int _close(int file)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001672:	605a      	str	r2, [r3, #4]
  return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <_isatty>:

int _isatty(int file)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f001 fdae 	bl	800323c <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20014000 	.word	0x20014000
 800170c:	00000400 	.word	0x00000400
 8001710:	20000170 	.word	0x20000170
 8001714:	20000188 	.word	0x20000188

08001718 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001726:	490d      	ldr	r1, [pc, #52]	; (800175c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800173c:	4c0a      	ldr	r4, [pc, #40]	; (8001768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800174a:	f7ff ffe5 	bl	8001718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174e:	f001 fd7b 	bl	8003248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001752:	f7ff fb67 	bl	8000e24 <main>
  bx lr
 8001756:	4770      	bx	lr
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001760:	080042b4 	.word	0x080042b4
  ldr r2, =_sbss
 8001764:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001768:	20000188 	.word	0x20000188

0800176c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC1_IRQHandler>

0800176e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f917 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f80e 	bl	80017a0 <HAL_InitTick>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	e001      	b.n	8001794 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001790:	f7ff fe74 	bl	800147c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_InitTick+0x68>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d022      	beq.n	80017fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_InitTick+0x6c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_InitTick+0x68>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 f916 	bl	80019fa <HAL_SYSTICK_Config>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10f      	bne.n	80017f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	d809      	bhi.n	80017ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017da:	2200      	movs	r2, #0
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	f04f 30ff 	mov.w	r0, #4294967295
 80017e2:	f000 f8ee 	bl	80019c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_InitTick+0x70>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e007      	b.n	80017fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e004      	b.n	80017fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e001      	b.n	80017fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000010 	.word	0x20000010
 800180c:	20000008 	.word	0x20000008
 8001810:	2000000c 	.word	0x2000000c

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x1c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x20>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4413      	add	r3, r2
 8001822:	4a03      	ldr	r2, [pc, #12]	; (8001830 <HAL_IncTick+0x1c>)
 8001824:	6013      	str	r3, [r2, #0]
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000174 	.word	0x20000174
 8001834:	20000010 	.word	0x20000010

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_GetTick+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	20000174 	.word	0x20000174

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f7ff ff90 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff49 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff5e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff90 	bl	8001904 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5f 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffb0 	bl	8001968 <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a2a:	e160      	b.n	8001cee <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8152 	beq.w	8001ce8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d017      	beq.n	8001afa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d123      	bne.n	8001b4e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	6939      	ldr	r1, [r7, #16]
 8001b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80ac 	beq.w	8001ce8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <HAL_GPIO_Init+0x2f8>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a5d      	ldr	r2, [pc, #372]	; (8001d0c <HAL_GPIO_Init+0x2f8>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_GPIO_Init+0x2f8>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ba8:	4a59      	ldr	r2, [pc, #356]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d025      	beq.n	8001c20 <HAL_GPIO_Init+0x20c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_GPIO_Init+0x304>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01f      	beq.n	8001c1c <HAL_GPIO_Init+0x208>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <HAL_GPIO_Init+0x308>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d019      	beq.n	8001c18 <HAL_GPIO_Init+0x204>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <HAL_GPIO_Init+0x30c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_GPIO_Init+0x200>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4d      	ldr	r2, [pc, #308]	; (8001d24 <HAL_GPIO_Init+0x310>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_GPIO_Init+0x1fc>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a4c      	ldr	r2, [pc, #304]	; (8001d28 <HAL_GPIO_Init+0x314>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0x1f8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4b      	ldr	r2, [pc, #300]	; (8001d2c <HAL_GPIO_Init+0x318>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_GPIO_Init+0x1f4>
 8001c04:	2306      	movs	r3, #6
 8001c06:	e00c      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c08:	2307      	movs	r3, #7
 8001c0a:	e00a      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c0c:	2305      	movs	r3, #5
 8001c0e:	e008      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c10:	2304      	movs	r3, #4
 8001c12:	e006      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c14:	2303      	movs	r3, #3
 8001c16:	e004      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c20:	2300      	movs	r3, #0
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c32:	4937      	ldr	r1, [pc, #220]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c64:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c8e:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f ae97 	bne.w	8001a2c <HAL_GPIO_Init+0x18>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	041a      	lsls	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	619a      	str	r2, [r3, #24]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e31d      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b94      	ldr	r3, [pc, #592]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d80:	4b91      	ldr	r3, [pc, #580]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d07b      	beq.n	8001e8e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d006      	beq.n	8001daa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d10f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5e>
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001daa:	4b87      	ldr	r3, [pc, #540]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d06a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x128>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d166      	bne.n	8001e8c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e2f7      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x74>
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7e      	ldr	r2, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e02d      	b.n	8001e34 <HAL_RCC_OscConfig+0xd0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x96>
 8001de0:	4b79      	ldr	r3, [pc, #484]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a78      	ldr	r2, [pc, #480]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a75      	ldr	r2, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e01c      	b.n	8001e34 <HAL_RCC_OscConfig+0xd0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0xb8>
 8001e02:	4b71      	ldr	r3, [pc, #452]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a70      	ldr	r2, [pc, #448]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6d      	ldr	r2, [pc, #436]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xd0>
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a69      	ldr	r2, [pc, #420]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a66      	ldr	r2, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fcfc 	bl	8001838 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff fcf8 	bl	8001838 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e2ad      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e56:	4b5c      	ldr	r3, [pc, #368]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xe0>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fce8 	bl	8001838 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fce4 	bl	8001838 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e299      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e7e:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x108>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d05a      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d119      	bne.n	8001eda <HAL_RCC_OscConfig+0x176>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d116      	bne.n	8001eda <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eac:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x160>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e276      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	493d      	ldr	r1, [pc, #244]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed8:	e03a      	b.n	8001f50 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d020      	beq.n	8001f24 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_RCC_OscConfig+0x268>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fca6 	bl	8001838 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fca2 	bl	8001838 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e257      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	492a      	ldr	r1, [pc, #168]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
 8001f22:	e015      	b.n	8001f50 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_RCC_OscConfig+0x268>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fc85 	bl	8001838 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f32:	f7ff fc81 	bl	8001838 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e236      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f44:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80b8 	beq.w	80020ce <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d170      	bne.n	8002046 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x218>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e21a      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d921      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fc7d 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e208      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	061b      	lsls	r3, r3, #24
 8001fc0:	4901      	ldr	r1, [pc, #4]	; (8001fc8 <HAL_RCC_OscConfig+0x264>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
 8001fc6:	e020      	b.n	800200a <HAL_RCC_OscConfig+0x2a6>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd0:	4b99      	ldr	r3, [pc, #612]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4996      	ldr	r1, [pc, #600]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe2:	4b95      	ldr	r3, [pc, #596]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	061b      	lsls	r3, r3, #24
 8001ff0:	4991      	ldr	r1, [pc, #580]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fc48 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1d3      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	0b5b      	lsrs	r3, r3, #13
 8002010:	3301      	adds	r3, #1
 8002012:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800201a:	4a87      	ldr	r2, [pc, #540]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 800201c:	6892      	ldr	r2, [r2, #8]
 800201e:	0912      	lsrs	r2, r2, #4
 8002020:	f002 020f 	and.w	r2, r2, #15
 8002024:	4985      	ldr	r1, [pc, #532]	; (800223c <HAL_RCC_OscConfig+0x4d8>)
 8002026:	5c8a      	ldrb	r2, [r1, r2]
 8002028:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800202a:	4a85      	ldr	r2, [pc, #532]	; (8002240 <HAL_RCC_OscConfig+0x4dc>)
 800202c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800202e:	4b85      	ldr	r3, [pc, #532]	; (8002244 <HAL_RCC_OscConfig+0x4e0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fbb4 	bl	80017a0 <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d045      	beq.n	80020ce <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	e1b5      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d029      	beq.n	80020a2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800204e:	4b7e      	ldr	r3, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x4e4>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fbf0 	bl	8001838 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205c:	f7ff fbec 	bl	8001838 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1a1      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800206e:	4b72      	ldr	r3, [pc, #456]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	496c      	ldr	r1, [pc, #432]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	4967      	ldr	r1, [pc, #412]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a2:	4b69      	ldr	r3, [pc, #420]	; (8002248 <HAL_RCC_OscConfig+0x4e4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fbc6 	bl	8001838 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b0:	f7ff fbc2 	bl	8001838 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e177      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d030      	beq.n	800213c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d016      	beq.n	8002110 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e2:	4b5a      	ldr	r3, [pc, #360]	; (800224c <HAL_RCC_OscConfig+0x4e8>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7ff fba6 	bl	8001838 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f0:	f7ff fba2 	bl	8001838 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e157      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002102:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x38c>
 800210e:	e015      	b.n	800213c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002110:	4b4e      	ldr	r3, [pc, #312]	; (800224c <HAL_RCC_OscConfig+0x4e8>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002116:	f7ff fb8f 	bl	8001838 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211e:	f7ff fb8b 	bl	8001838 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e140      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002130:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80b5 	beq.w	80022b4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	4a36      	ldr	r2, [pc, #216]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6253      	str	r3, [r2, #36]	; 0x24
 8002166:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_OscConfig+0x4ec>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_RCC_OscConfig+0x4ec>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a32      	ldr	r2, [pc, #200]	; (8002250 <HAL_RCC_OscConfig+0x4ec>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7ff fb53 	bl	8001838 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7ff fb4f 	bl	8001838 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b64      	cmp	r3, #100	; 0x64
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e104      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_RCC_OscConfig+0x4ec>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x466>
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6353      	str	r3, [r2, #52]	; 0x34
 80021c8:	e02d      	b.n	8002226 <HAL_RCC_OscConfig+0x4c2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x488>
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80021d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021dc:	6353      	str	r3, [r2, #52]	; 0x34
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e2:	4a15      	ldr	r2, [pc, #84]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80021e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e8:	6353      	str	r3, [r2, #52]	; 0x34
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x4c2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x4aa>
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 80021fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220a:	6353      	str	r3, [r2, #52]	; 0x34
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x4c2>
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002218:	6353      	str	r3, [r2, #52]	; 0x34
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221e:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_RCC_OscConfig+0x4d4>)
 8002220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002224:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d024      	beq.n	8002278 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7ff fb03 	bl	8001838 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002234:	e019      	b.n	800226a <HAL_RCC_OscConfig+0x506>
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	080041f4 	.word	0x080041f4
 8002240:	20000008 	.word	0x20000008
 8002244:	2000000c 	.word	0x2000000c
 8002248:	42470020 	.word	0x42470020
 800224c:	42470680 	.word	0x42470680
 8002250:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7ff faf0 	bl	8001838 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0a3      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800226a:	4b54      	ldr	r3, [pc, #336]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ee      	beq.n	8002254 <HAL_RCC_OscConfig+0x4f0>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fade 	bl	8001838 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7ff fada 	bl	8001838 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e08d      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002296:	4b49      	ldr	r3, [pc, #292]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ee      	bne.n	8002280 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a8:	4b44      	ldr	r3, [pc, #272]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	4a43      	ldr	r2, [pc, #268]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 80022ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d079      	beq.n	80023b0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d056      	beq.n	8002370 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d13b      	bne.n	8002342 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_OscConfig+0x65c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fab2 	bl	8001838 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff faae 	bl	8001838 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e063      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ea:	4b34      	ldr	r3, [pc, #208]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	4319      	orrs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	430b      	orrs	r3, r1
 800230e:	492b      	ldr	r1, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x65c>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fa8d 	bl	8001838 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff fa89 	bl	8001838 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e03e      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x5be>
 8002340:	e036      	b.n	80023b0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_RCC_OscConfig+0x65c>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fa76 	bl	8001838 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff fa72 	bl	8001838 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e027      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x5ec>
 800236e:	e01f      	b.n	80023b0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e01a      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_RCC_OscConfig+0x658>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	429a      	cmp	r2, r3
 800238e:	d10d      	bne.n	80023ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470060 	.word	0x42470060

080023c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e11a      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d919      	bls.n	800241a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x34>
 80023ec:	4b8a      	ldr	r3, [pc, #552]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a89      	ldr	r2, [pc, #548]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b87      	ldr	r3, [pc, #540]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 0201 	bic.w	r2, r3, #1
 8002400:	4985      	ldr	r1, [pc, #532]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002408:	4b83      	ldr	r3, [pc, #524]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0f9      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002426:	4b7d      	ldr	r3, [pc, #500]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	497a      	ldr	r1, [pc, #488]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 808e 	beq.w	8002562 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800244e:	4b73      	ldr	r3, [pc, #460]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d121      	bne.n	800249e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0d7      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002466:	4b6d      	ldr	r3, [pc, #436]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d115      	bne.n	800249e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0cb      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0bf      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0b7      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b5f      	ldr	r3, [pc, #380]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	495c      	ldr	r1, [pc, #368]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7ff f9c2 	bl	8001838 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d112      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7ff f9ba 	bl	8001838 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e09b      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d6:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d1ee      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xfc>
 80024e2:	e03e      	b.n	8002562 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d112      	bne.n	8002512 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ee:	f7ff f9a3 	bl	8001838 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e084      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b45      	ldr	r3, [pc, #276]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_ClockConfig+0x12a>
 8002510:	e027      	b.n	8002562 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d11d      	bne.n	8002556 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7ff f98c 	bl	8001838 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e06d      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002532:	4b3a      	ldr	r3, [pc, #232]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d1ee      	bne.n	800251c <HAL_RCC_ClockConfig+0x158>
 800253e:	e010      	b.n	8002562 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7ff f97a 	bl	8001838 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e05b      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ee      	bne.n	8002540 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d219      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_ClockConfig+0x1be>
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0201 	bic.w	r2, r3, #1
 800258a:	4923      	ldr	r1, [pc, #140]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <HAL_RCC_ClockConfig+0x254>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e034      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4917      	ldr	r1, [pc, #92]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490f      	ldr	r1, [pc, #60]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 f823 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_RCC_ClockConfig+0x258>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490b      	ldr	r1, [pc, #44]	; (8002620 <HAL_RCC_ClockConfig+0x25c>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x260>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_RCC_ClockConfig+0x264>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f8cc 	bl	80017a0 <HAL_InitTick>
 8002608:	4603      	mov	r3, r0
 800260a:	72fb      	strb	r3, [r7, #11]

  return status;
 800260c:	7afb      	ldrb	r3, [r7, #11]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00
 800261c:	40023800 	.word	0x40023800
 8002620:	080041f4 	.word	0x080041f4
 8002624:	20000008 	.word	0x20000008
 8002628:	2000000c 	.word	0x2000000c

0800262c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002630:	b092      	sub	sp, #72	; 0x48
 8002632:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002634:	4b79      	ldr	r3, [pc, #484]	; (800281c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d00d      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x34>
 8002644:	2b0c      	cmp	r3, #12
 8002646:	f200 80d5 	bhi.w	80027f4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800264a:	2b04      	cmp	r3, #4
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x28>
 800264e:	2b08      	cmp	r3, #8
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x2e>
 8002652:	e0cf      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b72      	ldr	r3, [pc, #456]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002656:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002658:	e0da      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800265a:	4b72      	ldr	r3, [pc, #456]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800265c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800265e:	e0d7      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	4b6f      	ldr	r3, [pc, #444]	; (8002828 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800266a:	5c9b      	ldrb	r3, [r3, r2]
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	0d9b      	lsrs	r3, r3, #22
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	3301      	adds	r3, #1
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800267a:	4b68      	ldr	r3, [pc, #416]	; (800281c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d05d      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	2200      	movs	r2, #0
 800268a:	4618      	mov	r0, r3
 800268c:	4611      	mov	r1, r2
 800268e:	4604      	mov	r4, r0
 8002690:	460d      	mov	r5, r1
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	0159      	lsls	r1, r3, #5
 80026a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a4:	0150      	lsls	r0, r2, #5
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4621      	mov	r1, r4
 80026ac:	1a51      	subs	r1, r2, r1
 80026ae:	6139      	str	r1, [r7, #16]
 80026b0:	4629      	mov	r1, r5
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c4:	4659      	mov	r1, fp
 80026c6:	018b      	lsls	r3, r1, #6
 80026c8:	4651      	mov	r1, sl
 80026ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ce:	4651      	mov	r1, sl
 80026d0:	018a      	lsls	r2, r1, #6
 80026d2:	46d4      	mov	ip, sl
 80026d4:	ebb2 080c 	subs.w	r8, r2, ip
 80026d8:	4659      	mov	r1, fp
 80026da:	eb63 0901 	sbc.w	r9, r3, r1
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f2:	4690      	mov	r8, r2
 80026f4:	4699      	mov	r9, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	eb18 0303 	adds.w	r3, r8, r3
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	462b      	mov	r3, r5
 8002700:	eb49 0303 	adc.w	r3, r9, r3
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002712:	4629      	mov	r1, r5
 8002714:	024b      	lsls	r3, r1, #9
 8002716:	4620      	mov	r0, r4
 8002718:	4629      	mov	r1, r5
 800271a:	4604      	mov	r4, r0
 800271c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002720:	4601      	mov	r1, r0
 8002722:	024a      	lsls	r2, r1, #9
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	2200      	movs	r2, #0
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
 800272e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002734:	f7fe f912 	bl	800095c <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	647b      	str	r3, [r7, #68]	; 0x44
 8002740:	e055      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	2200      	movs	r2, #0
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	627a      	str	r2, [r7, #36]	; 0x24
 800274a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800274e:	4642      	mov	r2, r8
 8002750:	464b      	mov	r3, r9
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	0159      	lsls	r1, r3, #5
 800275c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002760:	0150      	lsls	r0, r2, #5
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	46c4      	mov	ip, r8
 8002768:	ebb2 0a0c 	subs.w	sl, r2, ip
 800276c:	4640      	mov	r0, r8
 800276e:	4649      	mov	r1, r9
 8002770:	468c      	mov	ip, r1
 8002772:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002782:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002786:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800278a:	ebb2 040a 	subs.w	r4, r2, sl
 800278e:	eb63 050b 	sbc.w	r5, r3, fp
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	00eb      	lsls	r3, r5, #3
 800279c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a0:	00e2      	lsls	r2, r4, #3
 80027a2:	4614      	mov	r4, r2
 80027a4:	461d      	mov	r5, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	18e3      	adds	r3, r4, r3
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	460b      	mov	r3, r1
 80027ae:	eb45 0303 	adc.w	r3, r5, r3
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c0:	4629      	mov	r1, r5
 80027c2:	028b      	lsls	r3, r1, #10
 80027c4:	4620      	mov	r0, r4
 80027c6:	4629      	mov	r1, r5
 80027c8:	4604      	mov	r4, r0
 80027ca:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80027ce:	4601      	mov	r1, r0
 80027d0:	028a      	lsls	r2, r1, #10
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	2200      	movs	r2, #0
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	61fa      	str	r2, [r7, #28]
 80027de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e2:	f7fe f8bb 	bl	800095c <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4613      	mov	r3, r2
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80027ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80027f2:	e00d      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0b5b      	lsrs	r3, r3, #13
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	3301      	adds	r3, #1
 8002804:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800280e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002812:	4618      	mov	r0, r3
 8002814:	3748      	adds	r7, #72	; 0x48
 8002816:	46bd      	mov	sp, r7
 8002818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200
 8002828:	080041e8 	.word	0x080041e8

0800282c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b02      	ldr	r3, [pc, #8]	; (800283c <HAL_RCC_GetHCLKFreq+0x10>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	20000008 	.word	0x20000008

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff2 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	08004204 	.word	0x08004204

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800286c:	f7ff ffde 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0adb      	lsrs	r3, r3, #11
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK2Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	08004204 	.word	0x08004204

08002890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d12c      	bne.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e016      	b.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b20      	ldr	r3, [pc, #128]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6253      	str	r3, [r2, #36]	; 0x24
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80028e0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80028f4:	d105      	bne.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028fc:	d101      	bne.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80028fe:	2301      	movs	r3, #1
 8002900:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 0201 	bic.w	r2, r3, #1
 800291c:	490b      	ldr	r1, [pc, #44]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	429a      	cmp	r2, r3
 8002930:	d001      	beq.n	8002936 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000
 800294c:	40023c00 	.word	0x40023c00

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e031      	b.n	80029c6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fdb0 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 f8e2 	bl	8002b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_ConfigClockSource+0x18>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e0b3      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x180>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a0c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1e:	d03e      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0xd0>
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a24:	f200 8087 	bhi.w	8002b36 <HAL_TIM_ConfigClockSource+0x168>
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	f000 8085 	beq.w	8002b3a <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d87f      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x168>
 8002a36:	2b70      	cmp	r3, #112	; 0x70
 8002a38:	d01a      	beq.n	8002a70 <HAL_TIM_ConfigClockSource+0xa2>
 8002a3a:	2b70      	cmp	r3, #112	; 0x70
 8002a3c:	d87b      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x168>
 8002a3e:	2b60      	cmp	r3, #96	; 0x60
 8002a40:	d050      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0x116>
 8002a42:	2b60      	cmp	r3, #96	; 0x60
 8002a44:	d877      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x168>
 8002a46:	2b50      	cmp	r3, #80	; 0x50
 8002a48:	d03c      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0xf6>
 8002a4a:	2b50      	cmp	r3, #80	; 0x50
 8002a4c:	d873      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x168>
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	d058      	beq.n	8002b04 <HAL_TIM_ConfigClockSource+0x136>
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d86f      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x168>
 8002a56:	2b30      	cmp	r3, #48	; 0x30
 8002a58:	d064      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x156>
 8002a5a:	2b30      	cmp	r3, #48	; 0x30
 8002a5c:	d86b      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x168>
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d060      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x156>
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d867      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x168>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d05c      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x156>
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d05a      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a6e:	e062      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6899      	ldr	r1, [r3, #8]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f000 f951 	bl	8002d26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
      break;
 8002a9c:	e04e      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f000 f93a 	bl	8002d26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac0:	609a      	str	r2, [r3, #8]
      break;
 8002ac2:	e03b      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f000 f8b1 	bl	8002c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2150      	movs	r1, #80	; 0x50
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f908 	bl	8002cf2 <TIM_ITRx_SetConfig>
      break;
 8002ae2:	e02b      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	461a      	mov	r2, r3
 8002af2:	f000 f8cf 	bl	8002c94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2160      	movs	r1, #96	; 0x60
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f8f8 	bl	8002cf2 <TIM_ITRx_SetConfig>
      break;
 8002b02:	e01b      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	461a      	mov	r2, r3
 8002b12:	f000 f891 	bl	8002c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f8e8 	bl	8002cf2 <TIM_ITRx_SetConfig>
      break;
 8002b22:	e00b      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 f8df 	bl	8002cf2 <TIM_ITRx_SetConfig>
        break;
 8002b34:	e002      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6e:	d00f      	beq.n	8002b90 <TIM_Base_SetConfig+0x38>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a2b      	ldr	r2, [pc, #172]	; (8002c20 <TIM_Base_SetConfig+0xc8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00b      	beq.n	8002b90 <TIM_Base_SetConfig+0x38>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <TIM_Base_SetConfig+0xcc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <TIM_Base_SetConfig+0x38>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <TIM_Base_SetConfig+0xd0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_Base_SetConfig+0x38>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <TIM_Base_SetConfig+0xd4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d108      	bne.n	8002ba2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d017      	beq.n	8002bda <TIM_Base_SetConfig+0x82>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <TIM_Base_SetConfig+0xc8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <TIM_Base_SetConfig+0x82>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <TIM_Base_SetConfig+0xcc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00f      	beq.n	8002bda <TIM_Base_SetConfig+0x82>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <TIM_Base_SetConfig+0xd0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00b      	beq.n	8002bda <TIM_Base_SetConfig+0x82>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <TIM_Base_SetConfig+0xd4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <TIM_Base_SetConfig+0x82>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <TIM_Base_SetConfig+0xd8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d003      	beq.n	8002bda <TIM_Base_SetConfig+0x82>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <TIM_Base_SetConfig+0xdc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d108      	bne.n	8002bec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	615a      	str	r2, [r3, #20]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	40010800 	.word	0x40010800
 8002c30:	40010c00 	.word	0x40010c00
 8002c34:	40011000 	.word	0x40011000

08002c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0201 	bic.w	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f023 030a 	bic.w	r3, r3, #10
 8002c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f023 0210 	bic.w	r2, r3, #16
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	031b      	lsls	r3, r3, #12
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f043 0307 	orr.w	r3, r3, #7
 8002d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b087      	sub	sp, #28
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	021a      	lsls	r2, r3, #8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e046      	b.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d00e      	beq.n	8002dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10c      	bne.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40010800 	.word	0x40010800

08002e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e03f      	b.n	8002eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fb78 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	; 0x24
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f905 	bl	8003074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b08a      	sub	sp, #40	; 0x28
 8002ebe:	af02      	add	r7, sp, #8
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d17c      	bne.n	8002fd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_UART_Transmit+0x2c>
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e075      	b.n	8002fd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Transmit+0x3e>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e06e      	b.n	8002fd6 <HAL_UART_Transmit+0x11c>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2221      	movs	r2, #33	; 0x21
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0e:	f7fe fc93 	bl	8001838 <HAL_GetTick>
 8002f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d108      	bne.n	8002f3c <HAL_UART_Transmit+0x82>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e003      	b.n	8002f44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f4c:	e02a      	b.n	8002fa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f840 	bl	8002fde <UART_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e036      	b.n	8002fd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3302      	adds	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e007      	b.n	8002f96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1cf      	bne.n	8002f4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f810 	bl	8002fde <UART_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e006      	b.n	8002fd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fee:	e02c      	b.n	800304a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d028      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x30>
 8002ffe:	f7fe fc1b 	bl	8001838 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	429a      	cmp	r2, r3
 800300c:	d21d      	bcs.n	800304a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800301c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e00f      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4013      	ands	r3, r2
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	429a      	cmp	r2, r3
 8003066:	d0c3      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030b4:	f023 030c 	bic.w	r3, r3, #12
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	430b      	orrs	r3, r1
 80030c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a55      	ldr	r2, [pc, #340]	; (8003234 <UART_SetConfig+0x1c0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d103      	bne.n	80030ea <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030e2:	f7ff fbc1 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	e002      	b.n	80030f0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030ea:	f7ff fba9 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80030ee:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f8:	d14c      	bne.n	8003194 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	4a49      	ldr	r2, [pc, #292]	; (8003238 <UART_SetConfig+0x1c4>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	0119      	lsls	r1, r3, #4
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003130:	4b41      	ldr	r3, [pc, #260]	; (8003238 <UART_SetConfig+0x1c4>)
 8003132:	fba3 0302 	umull	r0, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2064      	movs	r0, #100	; 0x64
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <UART_SetConfig+0x1c4>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003152:	4419      	add	r1, r3
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009a      	lsls	r2, r3, #2
 800315e:	441a      	add	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fbb2 f2f3 	udiv	r2, r2, r3
 800316a:	4b33      	ldr	r3, [pc, #204]	; (8003238 <UART_SetConfig+0x1c4>)
 800316c:	fba3 0302 	umull	r0, r3, r3, r2
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	2064      	movs	r0, #100	; 0x64
 8003174:	fb00 f303 	mul.w	r3, r0, r3
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	3332      	adds	r3, #50	; 0x32
 800317e:	4a2e      	ldr	r2, [pc, #184]	; (8003238 <UART_SetConfig+0x1c4>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	f003 0207 	and.w	r2, r3, #7
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	440a      	add	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003192:	e04a      	b.n	800322a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	009a      	lsls	r2, r3, #2
 800319e:	441a      	add	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	4a23      	ldr	r2, [pc, #140]	; (8003238 <UART_SetConfig+0x1c4>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	0119      	lsls	r1, r3, #4
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009a      	lsls	r2, r3, #2
 80031be:	441a      	add	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <UART_SetConfig+0x1c4>)
 80031cc:	fba3 0302 	umull	r0, r3, r3, r2
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	2064      	movs	r0, #100	; 0x64
 80031d4:	fb00 f303 	mul.w	r3, r0, r3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	3332      	adds	r3, #50	; 0x32
 80031de:	4a16      	ldr	r2, [pc, #88]	; (8003238 <UART_SetConfig+0x1c4>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ea:	4419      	add	r1, r3
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <UART_SetConfig+0x1c4>)
 8003204:	fba3 0302 	umull	r0, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2064      	movs	r0, #100	; 0x64
 800320c:	fb00 f303 	mul.w	r3, r0, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <UART_SetConfig+0x1c4>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 020f 	and.w	r2, r3, #15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	440a      	add	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40013800 	.word	0x40013800
 8003238:	51eb851f 	.word	0x51eb851f

0800323c <__errno>:
 800323c:	4b01      	ldr	r3, [pc, #4]	; (8003244 <__errno+0x8>)
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000014 	.word	0x20000014

08003248 <__libc_init_array>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	2600      	movs	r6, #0
 800324c:	4d0c      	ldr	r5, [pc, #48]	; (8003280 <__libc_init_array+0x38>)
 800324e:	4c0d      	ldr	r4, [pc, #52]	; (8003284 <__libc_init_array+0x3c>)
 8003250:	1b64      	subs	r4, r4, r5
 8003252:	10a4      	asrs	r4, r4, #2
 8003254:	42a6      	cmp	r6, r4
 8003256:	d109      	bne.n	800326c <__libc_init_array+0x24>
 8003258:	f000 ffb6 	bl	80041c8 <_init>
 800325c:	2600      	movs	r6, #0
 800325e:	4d0a      	ldr	r5, [pc, #40]	; (8003288 <__libc_init_array+0x40>)
 8003260:	4c0a      	ldr	r4, [pc, #40]	; (800328c <__libc_init_array+0x44>)
 8003262:	1b64      	subs	r4, r4, r5
 8003264:	10a4      	asrs	r4, r4, #2
 8003266:	42a6      	cmp	r6, r4
 8003268:	d105      	bne.n	8003276 <__libc_init_array+0x2e>
 800326a:	bd70      	pop	{r4, r5, r6, pc}
 800326c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003270:	4798      	blx	r3
 8003272:	3601      	adds	r6, #1
 8003274:	e7ee      	b.n	8003254 <__libc_init_array+0xc>
 8003276:	f855 3b04 	ldr.w	r3, [r5], #4
 800327a:	4798      	blx	r3
 800327c:	3601      	adds	r6, #1
 800327e:	e7f2      	b.n	8003266 <__libc_init_array+0x1e>
 8003280:	080042ac 	.word	0x080042ac
 8003284:	080042ac 	.word	0x080042ac
 8003288:	080042ac 	.word	0x080042ac
 800328c:	080042b0 	.word	0x080042b0

08003290 <memset>:
 8003290:	4603      	mov	r3, r0
 8003292:	4402      	add	r2, r0
 8003294:	4293      	cmp	r3, r2
 8003296:	d100      	bne.n	800329a <memset+0xa>
 8003298:	4770      	bx	lr
 800329a:	f803 1b01 	strb.w	r1, [r3], #1
 800329e:	e7f9      	b.n	8003294 <memset+0x4>

080032a0 <iprintf>:
 80032a0:	b40f      	push	{r0, r1, r2, r3}
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <iprintf+0x2c>)
 80032a4:	b513      	push	{r0, r1, r4, lr}
 80032a6:	681c      	ldr	r4, [r3, #0]
 80032a8:	b124      	cbz	r4, 80032b4 <iprintf+0x14>
 80032aa:	69a3      	ldr	r3, [r4, #24]
 80032ac:	b913      	cbnz	r3, 80032b4 <iprintf+0x14>
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f866 	bl	8003380 <__sinit>
 80032b4:	ab05      	add	r3, sp, #20
 80032b6:	4620      	mov	r0, r4
 80032b8:	9a04      	ldr	r2, [sp, #16]
 80032ba:	68a1      	ldr	r1, [r4, #8]
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	f000 f9bb 	bl	8003638 <_vfiprintf_r>
 80032c2:	b002      	add	sp, #8
 80032c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c8:	b004      	add	sp, #16
 80032ca:	4770      	bx	lr
 80032cc:	20000014 	.word	0x20000014

080032d0 <std>:
 80032d0:	2300      	movs	r3, #0
 80032d2:	b510      	push	{r4, lr}
 80032d4:	4604      	mov	r4, r0
 80032d6:	e9c0 3300 	strd	r3, r3, [r0]
 80032da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032de:	6083      	str	r3, [r0, #8]
 80032e0:	8181      	strh	r1, [r0, #12]
 80032e2:	6643      	str	r3, [r0, #100]	; 0x64
 80032e4:	81c2      	strh	r2, [r0, #14]
 80032e6:	6183      	str	r3, [r0, #24]
 80032e8:	4619      	mov	r1, r3
 80032ea:	2208      	movs	r2, #8
 80032ec:	305c      	adds	r0, #92	; 0x5c
 80032ee:	f7ff ffcf 	bl	8003290 <memset>
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <std+0x38>)
 80032f4:	6224      	str	r4, [r4, #32]
 80032f6:	6263      	str	r3, [r4, #36]	; 0x24
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <std+0x3c>)
 80032fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <std+0x40>)
 80032fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <std+0x44>)
 8003302:	6323      	str	r3, [r4, #48]	; 0x30
 8003304:	bd10      	pop	{r4, pc}
 8003306:	bf00      	nop
 8003308:	08003be5 	.word	0x08003be5
 800330c:	08003c07 	.word	0x08003c07
 8003310:	08003c3f 	.word	0x08003c3f
 8003314:	08003c63 	.word	0x08003c63

08003318 <_cleanup_r>:
 8003318:	4901      	ldr	r1, [pc, #4]	; (8003320 <_cleanup_r+0x8>)
 800331a:	f000 b8af 	b.w	800347c <_fwalk_reent>
 800331e:	bf00      	nop
 8003320:	08003f35 	.word	0x08003f35

08003324 <__sfmoreglue>:
 8003324:	2268      	movs	r2, #104	; 0x68
 8003326:	b570      	push	{r4, r5, r6, lr}
 8003328:	1e4d      	subs	r5, r1, #1
 800332a:	4355      	muls	r5, r2
 800332c:	460e      	mov	r6, r1
 800332e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003332:	f000 f8e5 	bl	8003500 <_malloc_r>
 8003336:	4604      	mov	r4, r0
 8003338:	b140      	cbz	r0, 800334c <__sfmoreglue+0x28>
 800333a:	2100      	movs	r1, #0
 800333c:	e9c0 1600 	strd	r1, r6, [r0]
 8003340:	300c      	adds	r0, #12
 8003342:	60a0      	str	r0, [r4, #8]
 8003344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003348:	f7ff ffa2 	bl	8003290 <memset>
 800334c:	4620      	mov	r0, r4
 800334e:	bd70      	pop	{r4, r5, r6, pc}

08003350 <__sfp_lock_acquire>:
 8003350:	4801      	ldr	r0, [pc, #4]	; (8003358 <__sfp_lock_acquire+0x8>)
 8003352:	f000 b8b3 	b.w	80034bc <__retarget_lock_acquire_recursive>
 8003356:	bf00      	nop
 8003358:	20000179 	.word	0x20000179

0800335c <__sfp_lock_release>:
 800335c:	4801      	ldr	r0, [pc, #4]	; (8003364 <__sfp_lock_release+0x8>)
 800335e:	f000 b8ae 	b.w	80034be <__retarget_lock_release_recursive>
 8003362:	bf00      	nop
 8003364:	20000179 	.word	0x20000179

08003368 <__sinit_lock_acquire>:
 8003368:	4801      	ldr	r0, [pc, #4]	; (8003370 <__sinit_lock_acquire+0x8>)
 800336a:	f000 b8a7 	b.w	80034bc <__retarget_lock_acquire_recursive>
 800336e:	bf00      	nop
 8003370:	2000017a 	.word	0x2000017a

08003374 <__sinit_lock_release>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__sinit_lock_release+0x8>)
 8003376:	f000 b8a2 	b.w	80034be <__retarget_lock_release_recursive>
 800337a:	bf00      	nop
 800337c:	2000017a 	.word	0x2000017a

08003380 <__sinit>:
 8003380:	b510      	push	{r4, lr}
 8003382:	4604      	mov	r4, r0
 8003384:	f7ff fff0 	bl	8003368 <__sinit_lock_acquire>
 8003388:	69a3      	ldr	r3, [r4, #24]
 800338a:	b11b      	cbz	r3, 8003394 <__sinit+0x14>
 800338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003390:	f7ff bff0 	b.w	8003374 <__sinit_lock_release>
 8003394:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003398:	6523      	str	r3, [r4, #80]	; 0x50
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <__sinit+0x68>)
 800339c:	4a13      	ldr	r2, [pc, #76]	; (80033ec <__sinit+0x6c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80033a2:	42a3      	cmp	r3, r4
 80033a4:	bf08      	it	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	4620      	mov	r0, r4
 80033aa:	bf08      	it	eq
 80033ac:	61a3      	streq	r3, [r4, #24]
 80033ae:	f000 f81f 	bl	80033f0 <__sfp>
 80033b2:	6060      	str	r0, [r4, #4]
 80033b4:	4620      	mov	r0, r4
 80033b6:	f000 f81b 	bl	80033f0 <__sfp>
 80033ba:	60a0      	str	r0, [r4, #8]
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 f817 	bl	80033f0 <__sfp>
 80033c2:	2200      	movs	r2, #0
 80033c4:	2104      	movs	r1, #4
 80033c6:	60e0      	str	r0, [r4, #12]
 80033c8:	6860      	ldr	r0, [r4, #4]
 80033ca:	f7ff ff81 	bl	80032d0 <std>
 80033ce:	2201      	movs	r2, #1
 80033d0:	2109      	movs	r1, #9
 80033d2:	68a0      	ldr	r0, [r4, #8]
 80033d4:	f7ff ff7c 	bl	80032d0 <std>
 80033d8:	2202      	movs	r2, #2
 80033da:	2112      	movs	r1, #18
 80033dc:	68e0      	ldr	r0, [r4, #12]
 80033de:	f7ff ff77 	bl	80032d0 <std>
 80033e2:	2301      	movs	r3, #1
 80033e4:	61a3      	str	r3, [r4, #24]
 80033e6:	e7d1      	b.n	800338c <__sinit+0xc>
 80033e8:	0800420c 	.word	0x0800420c
 80033ec:	08003319 	.word	0x08003319

080033f0 <__sfp>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	4607      	mov	r7, r0
 80033f4:	f7ff ffac 	bl	8003350 <__sfp_lock_acquire>
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <__sfp+0x84>)
 80033fa:	681e      	ldr	r6, [r3, #0]
 80033fc:	69b3      	ldr	r3, [r6, #24]
 80033fe:	b913      	cbnz	r3, 8003406 <__sfp+0x16>
 8003400:	4630      	mov	r0, r6
 8003402:	f7ff ffbd 	bl	8003380 <__sinit>
 8003406:	3648      	adds	r6, #72	; 0x48
 8003408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800340c:	3b01      	subs	r3, #1
 800340e:	d503      	bpl.n	8003418 <__sfp+0x28>
 8003410:	6833      	ldr	r3, [r6, #0]
 8003412:	b30b      	cbz	r3, 8003458 <__sfp+0x68>
 8003414:	6836      	ldr	r6, [r6, #0]
 8003416:	e7f7      	b.n	8003408 <__sfp+0x18>
 8003418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800341c:	b9d5      	cbnz	r5, 8003454 <__sfp+0x64>
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <__sfp+0x88>)
 8003420:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003424:	60e3      	str	r3, [r4, #12]
 8003426:	6665      	str	r5, [r4, #100]	; 0x64
 8003428:	f000 f847 	bl	80034ba <__retarget_lock_init_recursive>
 800342c:	f7ff ff96 	bl	800335c <__sfp_lock_release>
 8003430:	2208      	movs	r2, #8
 8003432:	4629      	mov	r1, r5
 8003434:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003438:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800343c:	6025      	str	r5, [r4, #0]
 800343e:	61a5      	str	r5, [r4, #24]
 8003440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003444:	f7ff ff24 	bl	8003290 <memset>
 8003448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800344c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003450:	4620      	mov	r0, r4
 8003452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003454:	3468      	adds	r4, #104	; 0x68
 8003456:	e7d9      	b.n	800340c <__sfp+0x1c>
 8003458:	2104      	movs	r1, #4
 800345a:	4638      	mov	r0, r7
 800345c:	f7ff ff62 	bl	8003324 <__sfmoreglue>
 8003460:	4604      	mov	r4, r0
 8003462:	6030      	str	r0, [r6, #0]
 8003464:	2800      	cmp	r0, #0
 8003466:	d1d5      	bne.n	8003414 <__sfp+0x24>
 8003468:	f7ff ff78 	bl	800335c <__sfp_lock_release>
 800346c:	230c      	movs	r3, #12
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	e7ee      	b.n	8003450 <__sfp+0x60>
 8003472:	bf00      	nop
 8003474:	0800420c 	.word	0x0800420c
 8003478:	ffff0001 	.word	0xffff0001

0800347c <_fwalk_reent>:
 800347c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003480:	4606      	mov	r6, r0
 8003482:	4688      	mov	r8, r1
 8003484:	2700      	movs	r7, #0
 8003486:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800348a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800348e:	f1b9 0901 	subs.w	r9, r9, #1
 8003492:	d505      	bpl.n	80034a0 <_fwalk_reent+0x24>
 8003494:	6824      	ldr	r4, [r4, #0]
 8003496:	2c00      	cmp	r4, #0
 8003498:	d1f7      	bne.n	800348a <_fwalk_reent+0xe>
 800349a:	4638      	mov	r0, r7
 800349c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034a0:	89ab      	ldrh	r3, [r5, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d907      	bls.n	80034b6 <_fwalk_reent+0x3a>
 80034a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034aa:	3301      	adds	r3, #1
 80034ac:	d003      	beq.n	80034b6 <_fwalk_reent+0x3a>
 80034ae:	4629      	mov	r1, r5
 80034b0:	4630      	mov	r0, r6
 80034b2:	47c0      	blx	r8
 80034b4:	4307      	orrs	r7, r0
 80034b6:	3568      	adds	r5, #104	; 0x68
 80034b8:	e7e9      	b.n	800348e <_fwalk_reent+0x12>

080034ba <__retarget_lock_init_recursive>:
 80034ba:	4770      	bx	lr

080034bc <__retarget_lock_acquire_recursive>:
 80034bc:	4770      	bx	lr

080034be <__retarget_lock_release_recursive>:
 80034be:	4770      	bx	lr

080034c0 <sbrk_aligned>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4e0e      	ldr	r6, [pc, #56]	; (80034fc <sbrk_aligned+0x3c>)
 80034c4:	460c      	mov	r4, r1
 80034c6:	6831      	ldr	r1, [r6, #0]
 80034c8:	4605      	mov	r5, r0
 80034ca:	b911      	cbnz	r1, 80034d2 <sbrk_aligned+0x12>
 80034cc:	f000 fb7a 	bl	8003bc4 <_sbrk_r>
 80034d0:	6030      	str	r0, [r6, #0]
 80034d2:	4621      	mov	r1, r4
 80034d4:	4628      	mov	r0, r5
 80034d6:	f000 fb75 	bl	8003bc4 <_sbrk_r>
 80034da:	1c43      	adds	r3, r0, #1
 80034dc:	d00a      	beq.n	80034f4 <sbrk_aligned+0x34>
 80034de:	1cc4      	adds	r4, r0, #3
 80034e0:	f024 0403 	bic.w	r4, r4, #3
 80034e4:	42a0      	cmp	r0, r4
 80034e6:	d007      	beq.n	80034f8 <sbrk_aligned+0x38>
 80034e8:	1a21      	subs	r1, r4, r0
 80034ea:	4628      	mov	r0, r5
 80034ec:	f000 fb6a 	bl	8003bc4 <_sbrk_r>
 80034f0:	3001      	adds	r0, #1
 80034f2:	d101      	bne.n	80034f8 <sbrk_aligned+0x38>
 80034f4:	f04f 34ff 	mov.w	r4, #4294967295
 80034f8:	4620      	mov	r0, r4
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	20000180 	.word	0x20000180

08003500 <_malloc_r>:
 8003500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003504:	1ccd      	adds	r5, r1, #3
 8003506:	f025 0503 	bic.w	r5, r5, #3
 800350a:	3508      	adds	r5, #8
 800350c:	2d0c      	cmp	r5, #12
 800350e:	bf38      	it	cc
 8003510:	250c      	movcc	r5, #12
 8003512:	2d00      	cmp	r5, #0
 8003514:	4607      	mov	r7, r0
 8003516:	db01      	blt.n	800351c <_malloc_r+0x1c>
 8003518:	42a9      	cmp	r1, r5
 800351a:	d905      	bls.n	8003528 <_malloc_r+0x28>
 800351c:	230c      	movs	r3, #12
 800351e:	2600      	movs	r6, #0
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	4630      	mov	r0, r6
 8003524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003528:	4e2e      	ldr	r6, [pc, #184]	; (80035e4 <_malloc_r+0xe4>)
 800352a:	f000 fdc5 	bl	80040b8 <__malloc_lock>
 800352e:	6833      	ldr	r3, [r6, #0]
 8003530:	461c      	mov	r4, r3
 8003532:	bb34      	cbnz	r4, 8003582 <_malloc_r+0x82>
 8003534:	4629      	mov	r1, r5
 8003536:	4638      	mov	r0, r7
 8003538:	f7ff ffc2 	bl	80034c0 <sbrk_aligned>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	4604      	mov	r4, r0
 8003540:	d14d      	bne.n	80035de <_malloc_r+0xde>
 8003542:	6834      	ldr	r4, [r6, #0]
 8003544:	4626      	mov	r6, r4
 8003546:	2e00      	cmp	r6, #0
 8003548:	d140      	bne.n	80035cc <_malloc_r+0xcc>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	4631      	mov	r1, r6
 800354e:	4638      	mov	r0, r7
 8003550:	eb04 0803 	add.w	r8, r4, r3
 8003554:	f000 fb36 	bl	8003bc4 <_sbrk_r>
 8003558:	4580      	cmp	r8, r0
 800355a:	d13a      	bne.n	80035d2 <_malloc_r+0xd2>
 800355c:	6821      	ldr	r1, [r4, #0]
 800355e:	3503      	adds	r5, #3
 8003560:	1a6d      	subs	r5, r5, r1
 8003562:	f025 0503 	bic.w	r5, r5, #3
 8003566:	3508      	adds	r5, #8
 8003568:	2d0c      	cmp	r5, #12
 800356a:	bf38      	it	cc
 800356c:	250c      	movcc	r5, #12
 800356e:	4638      	mov	r0, r7
 8003570:	4629      	mov	r1, r5
 8003572:	f7ff ffa5 	bl	80034c0 <sbrk_aligned>
 8003576:	3001      	adds	r0, #1
 8003578:	d02b      	beq.n	80035d2 <_malloc_r+0xd2>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	442b      	add	r3, r5
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	e00e      	b.n	80035a0 <_malloc_r+0xa0>
 8003582:	6822      	ldr	r2, [r4, #0]
 8003584:	1b52      	subs	r2, r2, r5
 8003586:	d41e      	bmi.n	80035c6 <_malloc_r+0xc6>
 8003588:	2a0b      	cmp	r2, #11
 800358a:	d916      	bls.n	80035ba <_malloc_r+0xba>
 800358c:	1961      	adds	r1, r4, r5
 800358e:	42a3      	cmp	r3, r4
 8003590:	6025      	str	r5, [r4, #0]
 8003592:	bf18      	it	ne
 8003594:	6059      	strne	r1, [r3, #4]
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	bf08      	it	eq
 800359a:	6031      	streq	r1, [r6, #0]
 800359c:	5162      	str	r2, [r4, r5]
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	4638      	mov	r0, r7
 80035a2:	f104 060b 	add.w	r6, r4, #11
 80035a6:	f000 fd8d 	bl	80040c4 <__malloc_unlock>
 80035aa:	f026 0607 	bic.w	r6, r6, #7
 80035ae:	1d23      	adds	r3, r4, #4
 80035b0:	1af2      	subs	r2, r6, r3
 80035b2:	d0b6      	beq.n	8003522 <_malloc_r+0x22>
 80035b4:	1b9b      	subs	r3, r3, r6
 80035b6:	50a3      	str	r3, [r4, r2]
 80035b8:	e7b3      	b.n	8003522 <_malloc_r+0x22>
 80035ba:	6862      	ldr	r2, [r4, #4]
 80035bc:	42a3      	cmp	r3, r4
 80035be:	bf0c      	ite	eq
 80035c0:	6032      	streq	r2, [r6, #0]
 80035c2:	605a      	strne	r2, [r3, #4]
 80035c4:	e7ec      	b.n	80035a0 <_malloc_r+0xa0>
 80035c6:	4623      	mov	r3, r4
 80035c8:	6864      	ldr	r4, [r4, #4]
 80035ca:	e7b2      	b.n	8003532 <_malloc_r+0x32>
 80035cc:	4634      	mov	r4, r6
 80035ce:	6876      	ldr	r6, [r6, #4]
 80035d0:	e7b9      	b.n	8003546 <_malloc_r+0x46>
 80035d2:	230c      	movs	r3, #12
 80035d4:	4638      	mov	r0, r7
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	f000 fd74 	bl	80040c4 <__malloc_unlock>
 80035dc:	e7a1      	b.n	8003522 <_malloc_r+0x22>
 80035de:	6025      	str	r5, [r4, #0]
 80035e0:	e7de      	b.n	80035a0 <_malloc_r+0xa0>
 80035e2:	bf00      	nop
 80035e4:	2000017c 	.word	0x2000017c

080035e8 <__sfputc_r>:
 80035e8:	6893      	ldr	r3, [r2, #8]
 80035ea:	b410      	push	{r4}
 80035ec:	3b01      	subs	r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	6093      	str	r3, [r2, #8]
 80035f2:	da07      	bge.n	8003604 <__sfputc_r+0x1c>
 80035f4:	6994      	ldr	r4, [r2, #24]
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	db01      	blt.n	80035fe <__sfputc_r+0x16>
 80035fa:	290a      	cmp	r1, #10
 80035fc:	d102      	bne.n	8003604 <__sfputc_r+0x1c>
 80035fe:	bc10      	pop	{r4}
 8003600:	f000 bb34 	b.w	8003c6c <__swbuf_r>
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	1c58      	adds	r0, r3, #1
 8003608:	6010      	str	r0, [r2, #0]
 800360a:	7019      	strb	r1, [r3, #0]
 800360c:	4608      	mov	r0, r1
 800360e:	bc10      	pop	{r4}
 8003610:	4770      	bx	lr

08003612 <__sfputs_r>:
 8003612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003614:	4606      	mov	r6, r0
 8003616:	460f      	mov	r7, r1
 8003618:	4614      	mov	r4, r2
 800361a:	18d5      	adds	r5, r2, r3
 800361c:	42ac      	cmp	r4, r5
 800361e:	d101      	bne.n	8003624 <__sfputs_r+0x12>
 8003620:	2000      	movs	r0, #0
 8003622:	e007      	b.n	8003634 <__sfputs_r+0x22>
 8003624:	463a      	mov	r2, r7
 8003626:	4630      	mov	r0, r6
 8003628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800362c:	f7ff ffdc 	bl	80035e8 <__sfputc_r>
 8003630:	1c43      	adds	r3, r0, #1
 8003632:	d1f3      	bne.n	800361c <__sfputs_r+0xa>
 8003634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003638 <_vfiprintf_r>:
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	460d      	mov	r5, r1
 800363e:	4614      	mov	r4, r2
 8003640:	4698      	mov	r8, r3
 8003642:	4606      	mov	r6, r0
 8003644:	b09d      	sub	sp, #116	; 0x74
 8003646:	b118      	cbz	r0, 8003650 <_vfiprintf_r+0x18>
 8003648:	6983      	ldr	r3, [r0, #24]
 800364a:	b90b      	cbnz	r3, 8003650 <_vfiprintf_r+0x18>
 800364c:	f7ff fe98 	bl	8003380 <__sinit>
 8003650:	4b89      	ldr	r3, [pc, #548]	; (8003878 <_vfiprintf_r+0x240>)
 8003652:	429d      	cmp	r5, r3
 8003654:	d11b      	bne.n	800368e <_vfiprintf_r+0x56>
 8003656:	6875      	ldr	r5, [r6, #4]
 8003658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800365a:	07d9      	lsls	r1, r3, #31
 800365c:	d405      	bmi.n	800366a <_vfiprintf_r+0x32>
 800365e:	89ab      	ldrh	r3, [r5, #12]
 8003660:	059a      	lsls	r2, r3, #22
 8003662:	d402      	bmi.n	800366a <_vfiprintf_r+0x32>
 8003664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003666:	f7ff ff29 	bl	80034bc <__retarget_lock_acquire_recursive>
 800366a:	89ab      	ldrh	r3, [r5, #12]
 800366c:	071b      	lsls	r3, r3, #28
 800366e:	d501      	bpl.n	8003674 <_vfiprintf_r+0x3c>
 8003670:	692b      	ldr	r3, [r5, #16]
 8003672:	b9eb      	cbnz	r3, 80036b0 <_vfiprintf_r+0x78>
 8003674:	4629      	mov	r1, r5
 8003676:	4630      	mov	r0, r6
 8003678:	f000 fb5c 	bl	8003d34 <__swsetup_r>
 800367c:	b1c0      	cbz	r0, 80036b0 <_vfiprintf_r+0x78>
 800367e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003680:	07dc      	lsls	r4, r3, #31
 8003682:	d50e      	bpl.n	80036a2 <_vfiprintf_r+0x6a>
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	b01d      	add	sp, #116	; 0x74
 800368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368e:	4b7b      	ldr	r3, [pc, #492]	; (800387c <_vfiprintf_r+0x244>)
 8003690:	429d      	cmp	r5, r3
 8003692:	d101      	bne.n	8003698 <_vfiprintf_r+0x60>
 8003694:	68b5      	ldr	r5, [r6, #8]
 8003696:	e7df      	b.n	8003658 <_vfiprintf_r+0x20>
 8003698:	4b79      	ldr	r3, [pc, #484]	; (8003880 <_vfiprintf_r+0x248>)
 800369a:	429d      	cmp	r5, r3
 800369c:	bf08      	it	eq
 800369e:	68f5      	ldreq	r5, [r6, #12]
 80036a0:	e7da      	b.n	8003658 <_vfiprintf_r+0x20>
 80036a2:	89ab      	ldrh	r3, [r5, #12]
 80036a4:	0598      	lsls	r0, r3, #22
 80036a6:	d4ed      	bmi.n	8003684 <_vfiprintf_r+0x4c>
 80036a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036aa:	f7ff ff08 	bl	80034be <__retarget_lock_release_recursive>
 80036ae:	e7e9      	b.n	8003684 <_vfiprintf_r+0x4c>
 80036b0:	2300      	movs	r3, #0
 80036b2:	9309      	str	r3, [sp, #36]	; 0x24
 80036b4:	2320      	movs	r3, #32
 80036b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036ba:	2330      	movs	r3, #48	; 0x30
 80036bc:	f04f 0901 	mov.w	r9, #1
 80036c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80036c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003884 <_vfiprintf_r+0x24c>
 80036c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036cc:	4623      	mov	r3, r4
 80036ce:	469a      	mov	sl, r3
 80036d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036d4:	b10a      	cbz	r2, 80036da <_vfiprintf_r+0xa2>
 80036d6:	2a25      	cmp	r2, #37	; 0x25
 80036d8:	d1f9      	bne.n	80036ce <_vfiprintf_r+0x96>
 80036da:	ebba 0b04 	subs.w	fp, sl, r4
 80036de:	d00b      	beq.n	80036f8 <_vfiprintf_r+0xc0>
 80036e0:	465b      	mov	r3, fp
 80036e2:	4622      	mov	r2, r4
 80036e4:	4629      	mov	r1, r5
 80036e6:	4630      	mov	r0, r6
 80036e8:	f7ff ff93 	bl	8003612 <__sfputs_r>
 80036ec:	3001      	adds	r0, #1
 80036ee:	f000 80aa 	beq.w	8003846 <_vfiprintf_r+0x20e>
 80036f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036f4:	445a      	add	r2, fp
 80036f6:	9209      	str	r2, [sp, #36]	; 0x24
 80036f8:	f89a 3000 	ldrb.w	r3, [sl]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a2 	beq.w	8003846 <_vfiprintf_r+0x20e>
 8003702:	2300      	movs	r3, #0
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800370c:	f10a 0a01 	add.w	sl, sl, #1
 8003710:	9304      	str	r3, [sp, #16]
 8003712:	9307      	str	r3, [sp, #28]
 8003714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003718:	931a      	str	r3, [sp, #104]	; 0x68
 800371a:	4654      	mov	r4, sl
 800371c:	2205      	movs	r2, #5
 800371e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003722:	4858      	ldr	r0, [pc, #352]	; (8003884 <_vfiprintf_r+0x24c>)
 8003724:	f000 fcba 	bl	800409c <memchr>
 8003728:	9a04      	ldr	r2, [sp, #16]
 800372a:	b9d8      	cbnz	r0, 8003764 <_vfiprintf_r+0x12c>
 800372c:	06d1      	lsls	r1, r2, #27
 800372e:	bf44      	itt	mi
 8003730:	2320      	movmi	r3, #32
 8003732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003736:	0713      	lsls	r3, r2, #28
 8003738:	bf44      	itt	mi
 800373a:	232b      	movmi	r3, #43	; 0x2b
 800373c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003740:	f89a 3000 	ldrb.w	r3, [sl]
 8003744:	2b2a      	cmp	r3, #42	; 0x2a
 8003746:	d015      	beq.n	8003774 <_vfiprintf_r+0x13c>
 8003748:	4654      	mov	r4, sl
 800374a:	2000      	movs	r0, #0
 800374c:	f04f 0c0a 	mov.w	ip, #10
 8003750:	9a07      	ldr	r2, [sp, #28]
 8003752:	4621      	mov	r1, r4
 8003754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003758:	3b30      	subs	r3, #48	; 0x30
 800375a:	2b09      	cmp	r3, #9
 800375c:	d94e      	bls.n	80037fc <_vfiprintf_r+0x1c4>
 800375e:	b1b0      	cbz	r0, 800378e <_vfiprintf_r+0x156>
 8003760:	9207      	str	r2, [sp, #28]
 8003762:	e014      	b.n	800378e <_vfiprintf_r+0x156>
 8003764:	eba0 0308 	sub.w	r3, r0, r8
 8003768:	fa09 f303 	lsl.w	r3, r9, r3
 800376c:	4313      	orrs	r3, r2
 800376e:	46a2      	mov	sl, r4
 8003770:	9304      	str	r3, [sp, #16]
 8003772:	e7d2      	b.n	800371a <_vfiprintf_r+0xe2>
 8003774:	9b03      	ldr	r3, [sp, #12]
 8003776:	1d19      	adds	r1, r3, #4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	9103      	str	r1, [sp, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	bfbb      	ittet	lt
 8003780:	425b      	neglt	r3, r3
 8003782:	f042 0202 	orrlt.w	r2, r2, #2
 8003786:	9307      	strge	r3, [sp, #28]
 8003788:	9307      	strlt	r3, [sp, #28]
 800378a:	bfb8      	it	lt
 800378c:	9204      	strlt	r2, [sp, #16]
 800378e:	7823      	ldrb	r3, [r4, #0]
 8003790:	2b2e      	cmp	r3, #46	; 0x2e
 8003792:	d10c      	bne.n	80037ae <_vfiprintf_r+0x176>
 8003794:	7863      	ldrb	r3, [r4, #1]
 8003796:	2b2a      	cmp	r3, #42	; 0x2a
 8003798:	d135      	bne.n	8003806 <_vfiprintf_r+0x1ce>
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	3402      	adds	r4, #2
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	9203      	str	r2, [sp, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bfb8      	it	lt
 80037a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80037ac:	9305      	str	r3, [sp, #20]
 80037ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003888 <_vfiprintf_r+0x250>
 80037b2:	2203      	movs	r2, #3
 80037b4:	4650      	mov	r0, sl
 80037b6:	7821      	ldrb	r1, [r4, #0]
 80037b8:	f000 fc70 	bl	800409c <memchr>
 80037bc:	b140      	cbz	r0, 80037d0 <_vfiprintf_r+0x198>
 80037be:	2340      	movs	r3, #64	; 0x40
 80037c0:	eba0 000a 	sub.w	r0, r0, sl
 80037c4:	fa03 f000 	lsl.w	r0, r3, r0
 80037c8:	9b04      	ldr	r3, [sp, #16]
 80037ca:	3401      	adds	r4, #1
 80037cc:	4303      	orrs	r3, r0
 80037ce:	9304      	str	r3, [sp, #16]
 80037d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d4:	2206      	movs	r2, #6
 80037d6:	482d      	ldr	r0, [pc, #180]	; (800388c <_vfiprintf_r+0x254>)
 80037d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037dc:	f000 fc5e 	bl	800409c <memchr>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d03f      	beq.n	8003864 <_vfiprintf_r+0x22c>
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <_vfiprintf_r+0x258>)
 80037e6:	bb1b      	cbnz	r3, 8003830 <_vfiprintf_r+0x1f8>
 80037e8:	9b03      	ldr	r3, [sp, #12]
 80037ea:	3307      	adds	r3, #7
 80037ec:	f023 0307 	bic.w	r3, r3, #7
 80037f0:	3308      	adds	r3, #8
 80037f2:	9303      	str	r3, [sp, #12]
 80037f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f6:	443b      	add	r3, r7
 80037f8:	9309      	str	r3, [sp, #36]	; 0x24
 80037fa:	e767      	b.n	80036cc <_vfiprintf_r+0x94>
 80037fc:	460c      	mov	r4, r1
 80037fe:	2001      	movs	r0, #1
 8003800:	fb0c 3202 	mla	r2, ip, r2, r3
 8003804:	e7a5      	b.n	8003752 <_vfiprintf_r+0x11a>
 8003806:	2300      	movs	r3, #0
 8003808:	f04f 0c0a 	mov.w	ip, #10
 800380c:	4619      	mov	r1, r3
 800380e:	3401      	adds	r4, #1
 8003810:	9305      	str	r3, [sp, #20]
 8003812:	4620      	mov	r0, r4
 8003814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003818:	3a30      	subs	r2, #48	; 0x30
 800381a:	2a09      	cmp	r2, #9
 800381c:	d903      	bls.n	8003826 <_vfiprintf_r+0x1ee>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0c5      	beq.n	80037ae <_vfiprintf_r+0x176>
 8003822:	9105      	str	r1, [sp, #20]
 8003824:	e7c3      	b.n	80037ae <_vfiprintf_r+0x176>
 8003826:	4604      	mov	r4, r0
 8003828:	2301      	movs	r3, #1
 800382a:	fb0c 2101 	mla	r1, ip, r1, r2
 800382e:	e7f0      	b.n	8003812 <_vfiprintf_r+0x1da>
 8003830:	ab03      	add	r3, sp, #12
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	462a      	mov	r2, r5
 8003836:	4630      	mov	r0, r6
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <_vfiprintf_r+0x25c>)
 800383a:	a904      	add	r1, sp, #16
 800383c:	f3af 8000 	nop.w
 8003840:	4607      	mov	r7, r0
 8003842:	1c78      	adds	r0, r7, #1
 8003844:	d1d6      	bne.n	80037f4 <_vfiprintf_r+0x1bc>
 8003846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003848:	07d9      	lsls	r1, r3, #31
 800384a:	d405      	bmi.n	8003858 <_vfiprintf_r+0x220>
 800384c:	89ab      	ldrh	r3, [r5, #12]
 800384e:	059a      	lsls	r2, r3, #22
 8003850:	d402      	bmi.n	8003858 <_vfiprintf_r+0x220>
 8003852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003854:	f7ff fe33 	bl	80034be <__retarget_lock_release_recursive>
 8003858:	89ab      	ldrh	r3, [r5, #12]
 800385a:	065b      	lsls	r3, r3, #25
 800385c:	f53f af12 	bmi.w	8003684 <_vfiprintf_r+0x4c>
 8003860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003862:	e711      	b.n	8003688 <_vfiprintf_r+0x50>
 8003864:	ab03      	add	r3, sp, #12
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	462a      	mov	r2, r5
 800386a:	4630      	mov	r0, r6
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <_vfiprintf_r+0x25c>)
 800386e:	a904      	add	r1, sp, #16
 8003870:	f000 f882 	bl	8003978 <_printf_i>
 8003874:	e7e4      	b.n	8003840 <_vfiprintf_r+0x208>
 8003876:	bf00      	nop
 8003878:	08004230 	.word	0x08004230
 800387c:	08004250 	.word	0x08004250
 8003880:	08004210 	.word	0x08004210
 8003884:	08004270 	.word	0x08004270
 8003888:	08004276 	.word	0x08004276
 800388c:	0800427a 	.word	0x0800427a
 8003890:	00000000 	.word	0x00000000
 8003894:	08003613 	.word	0x08003613

08003898 <_printf_common>:
 8003898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	4616      	mov	r6, r2
 800389e:	4699      	mov	r9, r3
 80038a0:	688a      	ldr	r2, [r1, #8]
 80038a2:	690b      	ldr	r3, [r1, #16]
 80038a4:	4607      	mov	r7, r0
 80038a6:	4293      	cmp	r3, r2
 80038a8:	bfb8      	it	lt
 80038aa:	4613      	movlt	r3, r2
 80038ac:	6033      	str	r3, [r6, #0]
 80038ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b2:	460c      	mov	r4, r1
 80038b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038b8:	b10a      	cbz	r2, 80038be <_printf_common+0x26>
 80038ba:	3301      	adds	r3, #1
 80038bc:	6033      	str	r3, [r6, #0]
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	0699      	lsls	r1, r3, #26
 80038c2:	bf42      	ittt	mi
 80038c4:	6833      	ldrmi	r3, [r6, #0]
 80038c6:	3302      	addmi	r3, #2
 80038c8:	6033      	strmi	r3, [r6, #0]
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	f015 0506 	ands.w	r5, r5, #6
 80038d0:	d106      	bne.n	80038e0 <_printf_common+0x48>
 80038d2:	f104 0a19 	add.w	sl, r4, #25
 80038d6:	68e3      	ldr	r3, [r4, #12]
 80038d8:	6832      	ldr	r2, [r6, #0]
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	42ab      	cmp	r3, r5
 80038de:	dc28      	bgt.n	8003932 <_printf_common+0x9a>
 80038e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038e4:	1e13      	subs	r3, r2, #0
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	bf18      	it	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	0692      	lsls	r2, r2, #26
 80038ee:	d42d      	bmi.n	800394c <_printf_common+0xb4>
 80038f0:	4649      	mov	r1, r9
 80038f2:	4638      	mov	r0, r7
 80038f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f8:	47c0      	blx	r8
 80038fa:	3001      	adds	r0, #1
 80038fc:	d020      	beq.n	8003940 <_printf_common+0xa8>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	68e5      	ldr	r5, [r4, #12]
 8003902:	f003 0306 	and.w	r3, r3, #6
 8003906:	2b04      	cmp	r3, #4
 8003908:	bf18      	it	ne
 800390a:	2500      	movne	r5, #0
 800390c:	6832      	ldr	r2, [r6, #0]
 800390e:	f04f 0600 	mov.w	r6, #0
 8003912:	68a3      	ldr	r3, [r4, #8]
 8003914:	bf08      	it	eq
 8003916:	1aad      	subeq	r5, r5, r2
 8003918:	6922      	ldr	r2, [r4, #16]
 800391a:	bf08      	it	eq
 800391c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003920:	4293      	cmp	r3, r2
 8003922:	bfc4      	itt	gt
 8003924:	1a9b      	subgt	r3, r3, r2
 8003926:	18ed      	addgt	r5, r5, r3
 8003928:	341a      	adds	r4, #26
 800392a:	42b5      	cmp	r5, r6
 800392c:	d11a      	bne.n	8003964 <_printf_common+0xcc>
 800392e:	2000      	movs	r0, #0
 8003930:	e008      	b.n	8003944 <_printf_common+0xac>
 8003932:	2301      	movs	r3, #1
 8003934:	4652      	mov	r2, sl
 8003936:	4649      	mov	r1, r9
 8003938:	4638      	mov	r0, r7
 800393a:	47c0      	blx	r8
 800393c:	3001      	adds	r0, #1
 800393e:	d103      	bne.n	8003948 <_printf_common+0xb0>
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	3501      	adds	r5, #1
 800394a:	e7c4      	b.n	80038d6 <_printf_common+0x3e>
 800394c:	2030      	movs	r0, #48	; 0x30
 800394e:	18e1      	adds	r1, r4, r3
 8003950:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800395a:	4422      	add	r2, r4
 800395c:	3302      	adds	r3, #2
 800395e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003962:	e7c5      	b.n	80038f0 <_printf_common+0x58>
 8003964:	2301      	movs	r3, #1
 8003966:	4622      	mov	r2, r4
 8003968:	4649      	mov	r1, r9
 800396a:	4638      	mov	r0, r7
 800396c:	47c0      	blx	r8
 800396e:	3001      	adds	r0, #1
 8003970:	d0e6      	beq.n	8003940 <_printf_common+0xa8>
 8003972:	3601      	adds	r6, #1
 8003974:	e7d9      	b.n	800392a <_printf_common+0x92>
	...

08003978 <_printf_i>:
 8003978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	7e0f      	ldrb	r7, [r1, #24]
 800397e:	4691      	mov	r9, r2
 8003980:	2f78      	cmp	r7, #120	; 0x78
 8003982:	4680      	mov	r8, r0
 8003984:	460c      	mov	r4, r1
 8003986:	469a      	mov	sl, r3
 8003988:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800398a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800398e:	d807      	bhi.n	80039a0 <_printf_i+0x28>
 8003990:	2f62      	cmp	r7, #98	; 0x62
 8003992:	d80a      	bhi.n	80039aa <_printf_i+0x32>
 8003994:	2f00      	cmp	r7, #0
 8003996:	f000 80d9 	beq.w	8003b4c <_printf_i+0x1d4>
 800399a:	2f58      	cmp	r7, #88	; 0x58
 800399c:	f000 80a4 	beq.w	8003ae8 <_printf_i+0x170>
 80039a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039a8:	e03a      	b.n	8003a20 <_printf_i+0xa8>
 80039aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ae:	2b15      	cmp	r3, #21
 80039b0:	d8f6      	bhi.n	80039a0 <_printf_i+0x28>
 80039b2:	a101      	add	r1, pc, #4	; (adr r1, 80039b8 <_printf_i+0x40>)
 80039b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039b8:	08003a11 	.word	0x08003a11
 80039bc:	08003a25 	.word	0x08003a25
 80039c0:	080039a1 	.word	0x080039a1
 80039c4:	080039a1 	.word	0x080039a1
 80039c8:	080039a1 	.word	0x080039a1
 80039cc:	080039a1 	.word	0x080039a1
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	080039a1 	.word	0x080039a1
 80039d8:	080039a1 	.word	0x080039a1
 80039dc:	080039a1 	.word	0x080039a1
 80039e0:	080039a1 	.word	0x080039a1
 80039e4:	08003b33 	.word	0x08003b33
 80039e8:	08003a55 	.word	0x08003a55
 80039ec:	08003b15 	.word	0x08003b15
 80039f0:	080039a1 	.word	0x080039a1
 80039f4:	080039a1 	.word	0x080039a1
 80039f8:	08003b55 	.word	0x08003b55
 80039fc:	080039a1 	.word	0x080039a1
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	080039a1 	.word	0x080039a1
 8003a08:	080039a1 	.word	0x080039a1
 8003a0c:	08003b1d 	.word	0x08003b1d
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	602a      	str	r2, [r5, #0]
 8003a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0a4      	b.n	8003b6e <_printf_i+0x1f6>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	6829      	ldr	r1, [r5, #0]
 8003a28:	0606      	lsls	r6, r0, #24
 8003a2a:	f101 0304 	add.w	r3, r1, #4
 8003a2e:	d50a      	bpl.n	8003a46 <_printf_i+0xce>
 8003a30:	680e      	ldr	r6, [r1, #0]
 8003a32:	602b      	str	r3, [r5, #0]
 8003a34:	2e00      	cmp	r6, #0
 8003a36:	da03      	bge.n	8003a40 <_printf_i+0xc8>
 8003a38:	232d      	movs	r3, #45	; 0x2d
 8003a3a:	4276      	negs	r6, r6
 8003a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a40:	230a      	movs	r3, #10
 8003a42:	485e      	ldr	r0, [pc, #376]	; (8003bbc <_printf_i+0x244>)
 8003a44:	e019      	b.n	8003a7a <_printf_i+0x102>
 8003a46:	680e      	ldr	r6, [r1, #0]
 8003a48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a4c:	602b      	str	r3, [r5, #0]
 8003a4e:	bf18      	it	ne
 8003a50:	b236      	sxthne	r6, r6
 8003a52:	e7ef      	b.n	8003a34 <_printf_i+0xbc>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	6820      	ldr	r0, [r4, #0]
 8003a58:	1d19      	adds	r1, r3, #4
 8003a5a:	6029      	str	r1, [r5, #0]
 8003a5c:	0601      	lsls	r1, r0, #24
 8003a5e:	d501      	bpl.n	8003a64 <_printf_i+0xec>
 8003a60:	681e      	ldr	r6, [r3, #0]
 8003a62:	e002      	b.n	8003a6a <_printf_i+0xf2>
 8003a64:	0646      	lsls	r6, r0, #25
 8003a66:	d5fb      	bpl.n	8003a60 <_printf_i+0xe8>
 8003a68:	881e      	ldrh	r6, [r3, #0]
 8003a6a:	2f6f      	cmp	r7, #111	; 0x6f
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2308      	moveq	r3, #8
 8003a70:	230a      	movne	r3, #10
 8003a72:	4852      	ldr	r0, [pc, #328]	; (8003bbc <_printf_i+0x244>)
 8003a74:	2100      	movs	r1, #0
 8003a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a7a:	6865      	ldr	r5, [r4, #4]
 8003a7c:	2d00      	cmp	r5, #0
 8003a7e:	bfa8      	it	ge
 8003a80:	6821      	ldrge	r1, [r4, #0]
 8003a82:	60a5      	str	r5, [r4, #8]
 8003a84:	bfa4      	itt	ge
 8003a86:	f021 0104 	bicge.w	r1, r1, #4
 8003a8a:	6021      	strge	r1, [r4, #0]
 8003a8c:	b90e      	cbnz	r6, 8003a92 <_printf_i+0x11a>
 8003a8e:	2d00      	cmp	r5, #0
 8003a90:	d04d      	beq.n	8003b2e <_printf_i+0x1b6>
 8003a92:	4615      	mov	r5, r2
 8003a94:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a98:	fb03 6711 	mls	r7, r3, r1, r6
 8003a9c:	5dc7      	ldrb	r7, [r0, r7]
 8003a9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003aa2:	4637      	mov	r7, r6
 8003aa4:	42bb      	cmp	r3, r7
 8003aa6:	460e      	mov	r6, r1
 8003aa8:	d9f4      	bls.n	8003a94 <_printf_i+0x11c>
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d10b      	bne.n	8003ac6 <_printf_i+0x14e>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	07de      	lsls	r6, r3, #31
 8003ab2:	d508      	bpl.n	8003ac6 <_printf_i+0x14e>
 8003ab4:	6923      	ldr	r3, [r4, #16]
 8003ab6:	6861      	ldr	r1, [r4, #4]
 8003ab8:	4299      	cmp	r1, r3
 8003aba:	bfde      	ittt	le
 8003abc:	2330      	movle	r3, #48	; 0x30
 8003abe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ac2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ac6:	1b52      	subs	r2, r2, r5
 8003ac8:	6122      	str	r2, [r4, #16]
 8003aca:	464b      	mov	r3, r9
 8003acc:	4621      	mov	r1, r4
 8003ace:	4640      	mov	r0, r8
 8003ad0:	f8cd a000 	str.w	sl, [sp]
 8003ad4:	aa03      	add	r2, sp, #12
 8003ad6:	f7ff fedf 	bl	8003898 <_printf_common>
 8003ada:	3001      	adds	r0, #1
 8003adc:	d14c      	bne.n	8003b78 <_printf_i+0x200>
 8003ade:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae2:	b004      	add	sp, #16
 8003ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae8:	4834      	ldr	r0, [pc, #208]	; (8003bbc <_printf_i+0x244>)
 8003aea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003aee:	6829      	ldr	r1, [r5, #0]
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003af6:	6029      	str	r1, [r5, #0]
 8003af8:	061d      	lsls	r5, r3, #24
 8003afa:	d514      	bpl.n	8003b26 <_printf_i+0x1ae>
 8003afc:	07df      	lsls	r7, r3, #31
 8003afe:	bf44      	itt	mi
 8003b00:	f043 0320 	orrmi.w	r3, r3, #32
 8003b04:	6023      	strmi	r3, [r4, #0]
 8003b06:	b91e      	cbnz	r6, 8003b10 <_printf_i+0x198>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	f023 0320 	bic.w	r3, r3, #32
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	2310      	movs	r3, #16
 8003b12:	e7af      	b.n	8003a74 <_printf_i+0xfc>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	f043 0320 	orr.w	r3, r3, #32
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	2378      	movs	r3, #120	; 0x78
 8003b1e:	4828      	ldr	r0, [pc, #160]	; (8003bc0 <_printf_i+0x248>)
 8003b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b24:	e7e3      	b.n	8003aee <_printf_i+0x176>
 8003b26:	0659      	lsls	r1, r3, #25
 8003b28:	bf48      	it	mi
 8003b2a:	b2b6      	uxthmi	r6, r6
 8003b2c:	e7e6      	b.n	8003afc <_printf_i+0x184>
 8003b2e:	4615      	mov	r5, r2
 8003b30:	e7bb      	b.n	8003aaa <_printf_i+0x132>
 8003b32:	682b      	ldr	r3, [r5, #0]
 8003b34:	6826      	ldr	r6, [r4, #0]
 8003b36:	1d18      	adds	r0, r3, #4
 8003b38:	6961      	ldr	r1, [r4, #20]
 8003b3a:	6028      	str	r0, [r5, #0]
 8003b3c:	0635      	lsls	r5, r6, #24
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	d501      	bpl.n	8003b46 <_printf_i+0x1ce>
 8003b42:	6019      	str	r1, [r3, #0]
 8003b44:	e002      	b.n	8003b4c <_printf_i+0x1d4>
 8003b46:	0670      	lsls	r0, r6, #25
 8003b48:	d5fb      	bpl.n	8003b42 <_printf_i+0x1ca>
 8003b4a:	8019      	strh	r1, [r3, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4615      	mov	r5, r2
 8003b50:	6123      	str	r3, [r4, #16]
 8003b52:	e7ba      	b.n	8003aca <_printf_i+0x152>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	2100      	movs	r1, #0
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	602a      	str	r2, [r5, #0]
 8003b5c:	681d      	ldr	r5, [r3, #0]
 8003b5e:	6862      	ldr	r2, [r4, #4]
 8003b60:	4628      	mov	r0, r5
 8003b62:	f000 fa9b 	bl	800409c <memchr>
 8003b66:	b108      	cbz	r0, 8003b6c <_printf_i+0x1f4>
 8003b68:	1b40      	subs	r0, r0, r5
 8003b6a:	6060      	str	r0, [r4, #4]
 8003b6c:	6863      	ldr	r3, [r4, #4]
 8003b6e:	6123      	str	r3, [r4, #16]
 8003b70:	2300      	movs	r3, #0
 8003b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b76:	e7a8      	b.n	8003aca <_printf_i+0x152>
 8003b78:	462a      	mov	r2, r5
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4640      	mov	r0, r8
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	47d0      	blx	sl
 8003b82:	3001      	adds	r0, #1
 8003b84:	d0ab      	beq.n	8003ade <_printf_i+0x166>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	079b      	lsls	r3, r3, #30
 8003b8a:	d413      	bmi.n	8003bb4 <_printf_i+0x23c>
 8003b8c:	68e0      	ldr	r0, [r4, #12]
 8003b8e:	9b03      	ldr	r3, [sp, #12]
 8003b90:	4298      	cmp	r0, r3
 8003b92:	bfb8      	it	lt
 8003b94:	4618      	movlt	r0, r3
 8003b96:	e7a4      	b.n	8003ae2 <_printf_i+0x16a>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	4632      	mov	r2, r6
 8003b9c:	4649      	mov	r1, r9
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	47d0      	blx	sl
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	d09b      	beq.n	8003ade <_printf_i+0x166>
 8003ba6:	3501      	adds	r5, #1
 8003ba8:	68e3      	ldr	r3, [r4, #12]
 8003baa:	9903      	ldr	r1, [sp, #12]
 8003bac:	1a5b      	subs	r3, r3, r1
 8003bae:	42ab      	cmp	r3, r5
 8003bb0:	dcf2      	bgt.n	8003b98 <_printf_i+0x220>
 8003bb2:	e7eb      	b.n	8003b8c <_printf_i+0x214>
 8003bb4:	2500      	movs	r5, #0
 8003bb6:	f104 0619 	add.w	r6, r4, #25
 8003bba:	e7f5      	b.n	8003ba8 <_printf_i+0x230>
 8003bbc:	08004281 	.word	0x08004281
 8003bc0:	08004292 	.word	0x08004292

08003bc4 <_sbrk_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	4d05      	ldr	r5, [pc, #20]	; (8003be0 <_sbrk_r+0x1c>)
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fd fd6c 	bl	80016ac <_sbrk>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_sbrk_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_sbrk_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	20000184 	.word	0x20000184

08003be4 <__sread>:
 8003be4:	b510      	push	{r4, lr}
 8003be6:	460c      	mov	r4, r1
 8003be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bec:	f000 fab8 	bl	8004160 <_read_r>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	bfab      	itete	ge
 8003bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8003bf8:	181b      	addge	r3, r3, r0
 8003bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bfe:	bfac      	ite	ge
 8003c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c02:	81a3      	strhlt	r3, [r4, #12]
 8003c04:	bd10      	pop	{r4, pc}

08003c06 <__swrite>:
 8003c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0a:	461f      	mov	r7, r3
 8003c0c:	898b      	ldrh	r3, [r1, #12]
 8003c0e:	4605      	mov	r5, r0
 8003c10:	05db      	lsls	r3, r3, #23
 8003c12:	460c      	mov	r4, r1
 8003c14:	4616      	mov	r6, r2
 8003c16:	d505      	bpl.n	8003c24 <__swrite+0x1e>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c20:	f000 f9c4 	bl	8003fac <_lseek_r>
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	4632      	mov	r2, r6
 8003c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c2c:	81a3      	strh	r3, [r4, #12]
 8003c2e:	4628      	mov	r0, r5
 8003c30:	463b      	mov	r3, r7
 8003c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c3a:	f000 b869 	b.w	8003d10 <_write_r>

08003c3e <__sseek>:
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	460c      	mov	r4, r1
 8003c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c46:	f000 f9b1 	bl	8003fac <_lseek_r>
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	bf15      	itete	ne
 8003c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c5a:	81a3      	strheq	r3, [r4, #12]
 8003c5c:	bf18      	it	ne
 8003c5e:	81a3      	strhne	r3, [r4, #12]
 8003c60:	bd10      	pop	{r4, pc}

08003c62 <__sclose>:
 8003c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c66:	f000 b8d3 	b.w	8003e10 <_close_r>
	...

08003c6c <__swbuf_r>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	460e      	mov	r6, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	4605      	mov	r5, r0
 8003c74:	b118      	cbz	r0, 8003c7e <__swbuf_r+0x12>
 8003c76:	6983      	ldr	r3, [r0, #24]
 8003c78:	b90b      	cbnz	r3, 8003c7e <__swbuf_r+0x12>
 8003c7a:	f7ff fb81 	bl	8003380 <__sinit>
 8003c7e:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <__swbuf_r+0x98>)
 8003c80:	429c      	cmp	r4, r3
 8003c82:	d12b      	bne.n	8003cdc <__swbuf_r+0x70>
 8003c84:	686c      	ldr	r4, [r5, #4]
 8003c86:	69a3      	ldr	r3, [r4, #24]
 8003c88:	60a3      	str	r3, [r4, #8]
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	071a      	lsls	r2, r3, #28
 8003c8e:	d52f      	bpl.n	8003cf0 <__swbuf_r+0x84>
 8003c90:	6923      	ldr	r3, [r4, #16]
 8003c92:	b36b      	cbz	r3, 8003cf0 <__swbuf_r+0x84>
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	b2f6      	uxtb	r6, r6
 8003c9a:	1ac0      	subs	r0, r0, r3
 8003c9c:	6963      	ldr	r3, [r4, #20]
 8003c9e:	4637      	mov	r7, r6
 8003ca0:	4283      	cmp	r3, r0
 8003ca2:	dc04      	bgt.n	8003cae <__swbuf_r+0x42>
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f000 f944 	bl	8003f34 <_fflush_r>
 8003cac:	bb30      	cbnz	r0, 8003cfc <__swbuf_r+0x90>
 8003cae:	68a3      	ldr	r3, [r4, #8]
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	60a3      	str	r3, [r4, #8]
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	6022      	str	r2, [r4, #0]
 8003cbc:	701e      	strb	r6, [r3, #0]
 8003cbe:	6963      	ldr	r3, [r4, #20]
 8003cc0:	4283      	cmp	r3, r0
 8003cc2:	d004      	beq.n	8003cce <__swbuf_r+0x62>
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	07db      	lsls	r3, r3, #31
 8003cc8:	d506      	bpl.n	8003cd8 <__swbuf_r+0x6c>
 8003cca:	2e0a      	cmp	r6, #10
 8003ccc:	d104      	bne.n	8003cd8 <__swbuf_r+0x6c>
 8003cce:	4621      	mov	r1, r4
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 f92f 	bl	8003f34 <_fflush_r>
 8003cd6:	b988      	cbnz	r0, 8003cfc <__swbuf_r+0x90>
 8003cd8:	4638      	mov	r0, r7
 8003cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <__swbuf_r+0x9c>)
 8003cde:	429c      	cmp	r4, r3
 8003ce0:	d101      	bne.n	8003ce6 <__swbuf_r+0x7a>
 8003ce2:	68ac      	ldr	r4, [r5, #8]
 8003ce4:	e7cf      	b.n	8003c86 <__swbuf_r+0x1a>
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <__swbuf_r+0xa0>)
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	bf08      	it	eq
 8003cec:	68ec      	ldreq	r4, [r5, #12]
 8003cee:	e7ca      	b.n	8003c86 <__swbuf_r+0x1a>
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 f81e 	bl	8003d34 <__swsetup_r>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d0cb      	beq.n	8003c94 <__swbuf_r+0x28>
 8003cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8003d00:	e7ea      	b.n	8003cd8 <__swbuf_r+0x6c>
 8003d02:	bf00      	nop
 8003d04:	08004230 	.word	0x08004230
 8003d08:	08004250 	.word	0x08004250
 8003d0c:	08004210 	.word	0x08004210

08003d10 <_write_r>:
 8003d10:	b538      	push	{r3, r4, r5, lr}
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4d05      	ldr	r5, [pc, #20]	; (8003d30 <_write_r+0x20>)
 8003d1c:	602a      	str	r2, [r5, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f7fc ffde 	bl	8000ce0 <_write>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d102      	bne.n	8003d2e <_write_r+0x1e>
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	b103      	cbz	r3, 8003d2e <_write_r+0x1e>
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	20000184 	.word	0x20000184

08003d34 <__swsetup_r>:
 8003d34:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <__swsetup_r+0xcc>)
 8003d36:	b570      	push	{r4, r5, r6, lr}
 8003d38:	681d      	ldr	r5, [r3, #0]
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	b125      	cbz	r5, 8003d4a <__swsetup_r+0x16>
 8003d40:	69ab      	ldr	r3, [r5, #24]
 8003d42:	b913      	cbnz	r3, 8003d4a <__swsetup_r+0x16>
 8003d44:	4628      	mov	r0, r5
 8003d46:	f7ff fb1b 	bl	8003380 <__sinit>
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <__swsetup_r+0xd0>)
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	d10f      	bne.n	8003d70 <__swsetup_r+0x3c>
 8003d50:	686c      	ldr	r4, [r5, #4]
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d58:	0719      	lsls	r1, r3, #28
 8003d5a:	d42c      	bmi.n	8003db6 <__swsetup_r+0x82>
 8003d5c:	06dd      	lsls	r5, r3, #27
 8003d5e:	d411      	bmi.n	8003d84 <__swsetup_r+0x50>
 8003d60:	2309      	movs	r3, #9
 8003d62:	6033      	str	r3, [r6, #0]
 8003d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	81a3      	strh	r3, [r4, #12]
 8003d6e:	e03e      	b.n	8003dee <__swsetup_r+0xba>
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <__swsetup_r+0xd4>)
 8003d72:	429c      	cmp	r4, r3
 8003d74:	d101      	bne.n	8003d7a <__swsetup_r+0x46>
 8003d76:	68ac      	ldr	r4, [r5, #8]
 8003d78:	e7eb      	b.n	8003d52 <__swsetup_r+0x1e>
 8003d7a:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <__swsetup_r+0xd8>)
 8003d7c:	429c      	cmp	r4, r3
 8003d7e:	bf08      	it	eq
 8003d80:	68ec      	ldreq	r4, [r5, #12]
 8003d82:	e7e6      	b.n	8003d52 <__swsetup_r+0x1e>
 8003d84:	0758      	lsls	r0, r3, #29
 8003d86:	d512      	bpl.n	8003dae <__swsetup_r+0x7a>
 8003d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d8a:	b141      	cbz	r1, 8003d9e <__swsetup_r+0x6a>
 8003d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d90:	4299      	cmp	r1, r3
 8003d92:	d002      	beq.n	8003d9a <__swsetup_r+0x66>
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f99b 	bl	80040d0 <_free_r>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003da4:	81a3      	strh	r3, [r4, #12]
 8003da6:	2300      	movs	r3, #0
 8003da8:	6063      	str	r3, [r4, #4]
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	f043 0308 	orr.w	r3, r3, #8
 8003db4:	81a3      	strh	r3, [r4, #12]
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	b94b      	cbnz	r3, 8003dce <__swsetup_r+0x9a>
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc4:	d003      	beq.n	8003dce <__swsetup_r+0x9a>
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 f927 	bl	800401c <__smakebuf_r>
 8003dce:	89a0      	ldrh	r0, [r4, #12]
 8003dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dd4:	f010 0301 	ands.w	r3, r0, #1
 8003dd8:	d00a      	beq.n	8003df0 <__swsetup_r+0xbc>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60a3      	str	r3, [r4, #8]
 8003dde:	6963      	ldr	r3, [r4, #20]
 8003de0:	425b      	negs	r3, r3
 8003de2:	61a3      	str	r3, [r4, #24]
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	b943      	cbnz	r3, 8003dfa <__swsetup_r+0xc6>
 8003de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dec:	d1ba      	bne.n	8003d64 <__swsetup_r+0x30>
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
 8003df0:	0781      	lsls	r1, r0, #30
 8003df2:	bf58      	it	pl
 8003df4:	6963      	ldrpl	r3, [r4, #20]
 8003df6:	60a3      	str	r3, [r4, #8]
 8003df8:	e7f4      	b.n	8003de4 <__swsetup_r+0xb0>
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	e7f7      	b.n	8003dee <__swsetup_r+0xba>
 8003dfe:	bf00      	nop
 8003e00:	20000014 	.word	0x20000014
 8003e04:	08004230 	.word	0x08004230
 8003e08:	08004250 	.word	0x08004250
 8003e0c:	08004210 	.word	0x08004210

08003e10 <_close_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	2300      	movs	r3, #0
 8003e14:	4d05      	ldr	r5, [pc, #20]	; (8003e2c <_close_r+0x1c>)
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	f7fd fc16 	bl	800164c <_close>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d102      	bne.n	8003e2a <_close_r+0x1a>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	b103      	cbz	r3, 8003e2a <_close_r+0x1a>
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	20000184 	.word	0x20000184

08003e30 <__sflush_r>:
 8003e30:	898a      	ldrh	r2, [r1, #12]
 8003e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e34:	4605      	mov	r5, r0
 8003e36:	0710      	lsls	r0, r2, #28
 8003e38:	460c      	mov	r4, r1
 8003e3a:	d457      	bmi.n	8003eec <__sflush_r+0xbc>
 8003e3c:	684b      	ldr	r3, [r1, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	dc04      	bgt.n	8003e4c <__sflush_r+0x1c>
 8003e42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	dc01      	bgt.n	8003e4c <__sflush_r+0x1c>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	d0fa      	beq.n	8003e48 <__sflush_r+0x18>
 8003e52:	2300      	movs	r3, #0
 8003e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e58:	682f      	ldr	r7, [r5, #0]
 8003e5a:	602b      	str	r3, [r5, #0]
 8003e5c:	d032      	beq.n	8003ec4 <__sflush_r+0x94>
 8003e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	075a      	lsls	r2, r3, #29
 8003e64:	d505      	bpl.n	8003e72 <__sflush_r+0x42>
 8003e66:	6863      	ldr	r3, [r4, #4]
 8003e68:	1ac0      	subs	r0, r0, r3
 8003e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e6c:	b10b      	cbz	r3, 8003e72 <__sflush_r+0x42>
 8003e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e70:	1ac0      	subs	r0, r0, r3
 8003e72:	2300      	movs	r3, #0
 8003e74:	4602      	mov	r2, r0
 8003e76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e78:	4628      	mov	r0, r5
 8003e7a:	6a21      	ldr	r1, [r4, #32]
 8003e7c:	47b0      	blx	r6
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	d106      	bne.n	8003e92 <__sflush_r+0x62>
 8003e84:	6829      	ldr	r1, [r5, #0]
 8003e86:	291d      	cmp	r1, #29
 8003e88:	d82c      	bhi.n	8003ee4 <__sflush_r+0xb4>
 8003e8a:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <__sflush_r+0x100>)
 8003e8c:	40ca      	lsrs	r2, r1
 8003e8e:	07d6      	lsls	r6, r2, #31
 8003e90:	d528      	bpl.n	8003ee4 <__sflush_r+0xb4>
 8003e92:	2200      	movs	r2, #0
 8003e94:	6062      	str	r2, [r4, #4]
 8003e96:	6922      	ldr	r2, [r4, #16]
 8003e98:	04d9      	lsls	r1, r3, #19
 8003e9a:	6022      	str	r2, [r4, #0]
 8003e9c:	d504      	bpl.n	8003ea8 <__sflush_r+0x78>
 8003e9e:	1c42      	adds	r2, r0, #1
 8003ea0:	d101      	bne.n	8003ea6 <__sflush_r+0x76>
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	b903      	cbnz	r3, 8003ea8 <__sflush_r+0x78>
 8003ea6:	6560      	str	r0, [r4, #84]	; 0x54
 8003ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eaa:	602f      	str	r7, [r5, #0]
 8003eac:	2900      	cmp	r1, #0
 8003eae:	d0cb      	beq.n	8003e48 <__sflush_r+0x18>
 8003eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eb4:	4299      	cmp	r1, r3
 8003eb6:	d002      	beq.n	8003ebe <__sflush_r+0x8e>
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f909 	bl	80040d0 <_free_r>
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8003ec2:	e7c2      	b.n	8003e4a <__sflush_r+0x1a>
 8003ec4:	6a21      	ldr	r1, [r4, #32]
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b0      	blx	r6
 8003ecc:	1c41      	adds	r1, r0, #1
 8003ece:	d1c7      	bne.n	8003e60 <__sflush_r+0x30>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0c4      	beq.n	8003e60 <__sflush_r+0x30>
 8003ed6:	2b1d      	cmp	r3, #29
 8003ed8:	d001      	beq.n	8003ede <__sflush_r+0xae>
 8003eda:	2b16      	cmp	r3, #22
 8003edc:	d101      	bne.n	8003ee2 <__sflush_r+0xb2>
 8003ede:	602f      	str	r7, [r5, #0]
 8003ee0:	e7b2      	b.n	8003e48 <__sflush_r+0x18>
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee8:	81a3      	strh	r3, [r4, #12]
 8003eea:	e7ae      	b.n	8003e4a <__sflush_r+0x1a>
 8003eec:	690f      	ldr	r7, [r1, #16]
 8003eee:	2f00      	cmp	r7, #0
 8003ef0:	d0aa      	beq.n	8003e48 <__sflush_r+0x18>
 8003ef2:	0793      	lsls	r3, r2, #30
 8003ef4:	bf18      	it	ne
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	680e      	ldr	r6, [r1, #0]
 8003efa:	bf08      	it	eq
 8003efc:	694b      	ldreq	r3, [r1, #20]
 8003efe:	1bf6      	subs	r6, r6, r7
 8003f00:	600f      	str	r7, [r1, #0]
 8003f02:	608b      	str	r3, [r1, #8]
 8003f04:	2e00      	cmp	r6, #0
 8003f06:	dd9f      	ble.n	8003e48 <__sflush_r+0x18>
 8003f08:	4633      	mov	r3, r6
 8003f0a:	463a      	mov	r2, r7
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	6a21      	ldr	r1, [r4, #32]
 8003f10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003f14:	47e0      	blx	ip
 8003f16:	2800      	cmp	r0, #0
 8003f18:	dc06      	bgt.n	8003f28 <__sflush_r+0xf8>
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f24:	81a3      	strh	r3, [r4, #12]
 8003f26:	e790      	b.n	8003e4a <__sflush_r+0x1a>
 8003f28:	4407      	add	r7, r0
 8003f2a:	1a36      	subs	r6, r6, r0
 8003f2c:	e7ea      	b.n	8003f04 <__sflush_r+0xd4>
 8003f2e:	bf00      	nop
 8003f30:	20400001 	.word	0x20400001

08003f34 <_fflush_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	690b      	ldr	r3, [r1, #16]
 8003f38:	4605      	mov	r5, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	b913      	cbnz	r3, 8003f44 <_fflush_r+0x10>
 8003f3e:	2500      	movs	r5, #0
 8003f40:	4628      	mov	r0, r5
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	b118      	cbz	r0, 8003f4e <_fflush_r+0x1a>
 8003f46:	6983      	ldr	r3, [r0, #24]
 8003f48:	b90b      	cbnz	r3, 8003f4e <_fflush_r+0x1a>
 8003f4a:	f7ff fa19 	bl	8003380 <__sinit>
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <_fflush_r+0x6c>)
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d11b      	bne.n	8003f8c <_fflush_r+0x58>
 8003f54:	686c      	ldr	r4, [r5, #4]
 8003f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ef      	beq.n	8003f3e <_fflush_r+0xa>
 8003f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f60:	07d0      	lsls	r0, r2, #31
 8003f62:	d404      	bmi.n	8003f6e <_fflush_r+0x3a>
 8003f64:	0599      	lsls	r1, r3, #22
 8003f66:	d402      	bmi.n	8003f6e <_fflush_r+0x3a>
 8003f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f6a:	f7ff faa7 	bl	80034bc <__retarget_lock_acquire_recursive>
 8003f6e:	4628      	mov	r0, r5
 8003f70:	4621      	mov	r1, r4
 8003f72:	f7ff ff5d 	bl	8003e30 <__sflush_r>
 8003f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f78:	4605      	mov	r5, r0
 8003f7a:	07da      	lsls	r2, r3, #31
 8003f7c:	d4e0      	bmi.n	8003f40 <_fflush_r+0xc>
 8003f7e:	89a3      	ldrh	r3, [r4, #12]
 8003f80:	059b      	lsls	r3, r3, #22
 8003f82:	d4dd      	bmi.n	8003f40 <_fflush_r+0xc>
 8003f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f86:	f7ff fa9a 	bl	80034be <__retarget_lock_release_recursive>
 8003f8a:	e7d9      	b.n	8003f40 <_fflush_r+0xc>
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <_fflush_r+0x70>)
 8003f8e:	429c      	cmp	r4, r3
 8003f90:	d101      	bne.n	8003f96 <_fflush_r+0x62>
 8003f92:	68ac      	ldr	r4, [r5, #8]
 8003f94:	e7df      	b.n	8003f56 <_fflush_r+0x22>
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <_fflush_r+0x74>)
 8003f98:	429c      	cmp	r4, r3
 8003f9a:	bf08      	it	eq
 8003f9c:	68ec      	ldreq	r4, [r5, #12]
 8003f9e:	e7da      	b.n	8003f56 <_fflush_r+0x22>
 8003fa0:	08004230 	.word	0x08004230
 8003fa4:	08004250 	.word	0x08004250
 8003fa8:	08004210 	.word	0x08004210

08003fac <_lseek_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4d05      	ldr	r5, [pc, #20]	; (8003fcc <_lseek_r+0x20>)
 8003fb8:	602a      	str	r2, [r5, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fd fb6a 	bl	8001694 <_lseek>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_lseek_r+0x1e>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_lseek_r+0x1e>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	20000184 	.word	0x20000184

08003fd0 <__swhatbuf_r>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	460e      	mov	r6, r1
 8003fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd8:	4614      	mov	r4, r2
 8003fda:	2900      	cmp	r1, #0
 8003fdc:	461d      	mov	r5, r3
 8003fde:	b096      	sub	sp, #88	; 0x58
 8003fe0:	da08      	bge.n	8003ff4 <__swhatbuf_r+0x24>
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003fe8:	602a      	str	r2, [r5, #0]
 8003fea:	061a      	lsls	r2, r3, #24
 8003fec:	d410      	bmi.n	8004010 <__swhatbuf_r+0x40>
 8003fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff2:	e00e      	b.n	8004012 <__swhatbuf_r+0x42>
 8003ff4:	466a      	mov	r2, sp
 8003ff6:	f000 f8c5 	bl	8004184 <_fstat_r>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	dbf1      	blt.n	8003fe2 <__swhatbuf_r+0x12>
 8003ffe:	9a01      	ldr	r2, [sp, #4]
 8004000:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004004:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004008:	425a      	negs	r2, r3
 800400a:	415a      	adcs	r2, r3
 800400c:	602a      	str	r2, [r5, #0]
 800400e:	e7ee      	b.n	8003fee <__swhatbuf_r+0x1e>
 8004010:	2340      	movs	r3, #64	; 0x40
 8004012:	2000      	movs	r0, #0
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	b016      	add	sp, #88	; 0x58
 8004018:	bd70      	pop	{r4, r5, r6, pc}
	...

0800401c <__smakebuf_r>:
 800401c:	898b      	ldrh	r3, [r1, #12]
 800401e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004020:	079d      	lsls	r5, r3, #30
 8004022:	4606      	mov	r6, r0
 8004024:	460c      	mov	r4, r1
 8004026:	d507      	bpl.n	8004038 <__smakebuf_r+0x1c>
 8004028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	6123      	str	r3, [r4, #16]
 8004030:	2301      	movs	r3, #1
 8004032:	6163      	str	r3, [r4, #20]
 8004034:	b002      	add	sp, #8
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	466a      	mov	r2, sp
 800403a:	ab01      	add	r3, sp, #4
 800403c:	f7ff ffc8 	bl	8003fd0 <__swhatbuf_r>
 8004040:	9900      	ldr	r1, [sp, #0]
 8004042:	4605      	mov	r5, r0
 8004044:	4630      	mov	r0, r6
 8004046:	f7ff fa5b 	bl	8003500 <_malloc_r>
 800404a:	b948      	cbnz	r0, 8004060 <__smakebuf_r+0x44>
 800404c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004050:	059a      	lsls	r2, r3, #22
 8004052:	d4ef      	bmi.n	8004034 <__smakebuf_r+0x18>
 8004054:	f023 0303 	bic.w	r3, r3, #3
 8004058:	f043 0302 	orr.w	r3, r3, #2
 800405c:	81a3      	strh	r3, [r4, #12]
 800405e:	e7e3      	b.n	8004028 <__smakebuf_r+0xc>
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <__smakebuf_r+0x7c>)
 8004062:	62b3      	str	r3, [r6, #40]	; 0x28
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	6020      	str	r0, [r4, #0]
 8004068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406c:	81a3      	strh	r3, [r4, #12]
 800406e:	9b00      	ldr	r3, [sp, #0]
 8004070:	6120      	str	r0, [r4, #16]
 8004072:	6163      	str	r3, [r4, #20]
 8004074:	9b01      	ldr	r3, [sp, #4]
 8004076:	b15b      	cbz	r3, 8004090 <__smakebuf_r+0x74>
 8004078:	4630      	mov	r0, r6
 800407a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800407e:	f000 f893 	bl	80041a8 <_isatty_r>
 8004082:	b128      	cbz	r0, 8004090 <__smakebuf_r+0x74>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	89a0      	ldrh	r0, [r4, #12]
 8004092:	4305      	orrs	r5, r0
 8004094:	81a5      	strh	r5, [r4, #12]
 8004096:	e7cd      	b.n	8004034 <__smakebuf_r+0x18>
 8004098:	08003319 	.word	0x08003319

0800409c <memchr>:
 800409c:	4603      	mov	r3, r0
 800409e:	b510      	push	{r4, lr}
 80040a0:	b2c9      	uxtb	r1, r1
 80040a2:	4402      	add	r2, r0
 80040a4:	4293      	cmp	r3, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	d101      	bne.n	80040ae <memchr+0x12>
 80040aa:	2000      	movs	r0, #0
 80040ac:	e003      	b.n	80040b6 <memchr+0x1a>
 80040ae:	7804      	ldrb	r4, [r0, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	428c      	cmp	r4, r1
 80040b4:	d1f6      	bne.n	80040a4 <memchr+0x8>
 80040b6:	bd10      	pop	{r4, pc}

080040b8 <__malloc_lock>:
 80040b8:	4801      	ldr	r0, [pc, #4]	; (80040c0 <__malloc_lock+0x8>)
 80040ba:	f7ff b9ff 	b.w	80034bc <__retarget_lock_acquire_recursive>
 80040be:	bf00      	nop
 80040c0:	20000178 	.word	0x20000178

080040c4 <__malloc_unlock>:
 80040c4:	4801      	ldr	r0, [pc, #4]	; (80040cc <__malloc_unlock+0x8>)
 80040c6:	f7ff b9fa 	b.w	80034be <__retarget_lock_release_recursive>
 80040ca:	bf00      	nop
 80040cc:	20000178 	.word	0x20000178

080040d0 <_free_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4605      	mov	r5, r0
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d040      	beq.n	800415a <_free_r+0x8a>
 80040d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040dc:	1f0c      	subs	r4, r1, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bfb8      	it	lt
 80040e2:	18e4      	addlt	r4, r4, r3
 80040e4:	f7ff ffe8 	bl	80040b8 <__malloc_lock>
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <_free_r+0x8c>)
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	b933      	cbnz	r3, 80040fc <_free_r+0x2c>
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	6014      	str	r4, [r2, #0]
 80040f2:	4628      	mov	r0, r5
 80040f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040f8:	f7ff bfe4 	b.w	80040c4 <__malloc_unlock>
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d908      	bls.n	8004112 <_free_r+0x42>
 8004100:	6820      	ldr	r0, [r4, #0]
 8004102:	1821      	adds	r1, r4, r0
 8004104:	428b      	cmp	r3, r1
 8004106:	bf01      	itttt	eq
 8004108:	6819      	ldreq	r1, [r3, #0]
 800410a:	685b      	ldreq	r3, [r3, #4]
 800410c:	1809      	addeq	r1, r1, r0
 800410e:	6021      	streq	r1, [r4, #0]
 8004110:	e7ed      	b.n	80040ee <_free_r+0x1e>
 8004112:	461a      	mov	r2, r3
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b10b      	cbz	r3, 800411c <_free_r+0x4c>
 8004118:	42a3      	cmp	r3, r4
 800411a:	d9fa      	bls.n	8004112 <_free_r+0x42>
 800411c:	6811      	ldr	r1, [r2, #0]
 800411e:	1850      	adds	r0, r2, r1
 8004120:	42a0      	cmp	r0, r4
 8004122:	d10b      	bne.n	800413c <_free_r+0x6c>
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	4401      	add	r1, r0
 8004128:	1850      	adds	r0, r2, r1
 800412a:	4283      	cmp	r3, r0
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	d1e0      	bne.n	80040f2 <_free_r+0x22>
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4401      	add	r1, r0
 8004136:	6011      	str	r1, [r2, #0]
 8004138:	6053      	str	r3, [r2, #4]
 800413a:	e7da      	b.n	80040f2 <_free_r+0x22>
 800413c:	d902      	bls.n	8004144 <_free_r+0x74>
 800413e:	230c      	movs	r3, #12
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	e7d6      	b.n	80040f2 <_free_r+0x22>
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	1821      	adds	r1, r4, r0
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1809      	addeq	r1, r1, r0
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	6063      	str	r3, [r4, #4]
 8004156:	6054      	str	r4, [r2, #4]
 8004158:	e7cb      	b.n	80040f2 <_free_r+0x22>
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	2000017c 	.word	0x2000017c

08004160 <_read_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4604      	mov	r4, r0
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	2200      	movs	r2, #0
 800416a:	4d05      	ldr	r5, [pc, #20]	; (8004180 <_read_r+0x20>)
 800416c:	602a      	str	r2, [r5, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	f7fd fa4f 	bl	8001612 <_read>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_read_r+0x1e>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_read_r+0x1e>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	20000184 	.word	0x20000184

08004184 <_fstat_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	2300      	movs	r3, #0
 8004188:	4d06      	ldr	r5, [pc, #24]	; (80041a4 <_fstat_r+0x20>)
 800418a:	4604      	mov	r4, r0
 800418c:	4608      	mov	r0, r1
 800418e:	4611      	mov	r1, r2
 8004190:	602b      	str	r3, [r5, #0]
 8004192:	f7fd fa66 	bl	8001662 <_fstat>
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	d102      	bne.n	80041a0 <_fstat_r+0x1c>
 800419a:	682b      	ldr	r3, [r5, #0]
 800419c:	b103      	cbz	r3, 80041a0 <_fstat_r+0x1c>
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	bd38      	pop	{r3, r4, r5, pc}
 80041a2:	bf00      	nop
 80041a4:	20000184 	.word	0x20000184

080041a8 <_isatty_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	2300      	movs	r3, #0
 80041ac:	4d05      	ldr	r5, [pc, #20]	; (80041c4 <_isatty_r+0x1c>)
 80041ae:	4604      	mov	r4, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	f7fd fa64 	bl	8001680 <_isatty>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_isatty_r+0x1a>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_isatty_r+0x1a>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	20000184 	.word	0x20000184

080041c8 <_init>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	bf00      	nop
 80041cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ce:	bc08      	pop	{r3}
 80041d0:	469e      	mov	lr, r3
 80041d2:	4770      	bx	lr

080041d4 <_fini>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr
