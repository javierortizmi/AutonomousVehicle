
LAB3_Prueba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f74  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004124  08004124  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800412c  0800412c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000024  08004158  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004158  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b270  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfb  00000000  00000000  0002b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002dac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153a7  00000000  00000000  0002e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6a0  00000000  00000000  000439d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e530  00000000  00000000  00050077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de5a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000326c  00000000  00000000  000de5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000024 	.word	0x20000024
 8000158:	00000000 	.word	0x00000000
 800015c:	08004098 	.word	0x08004098

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000028 	.word	0x20000028
 8000178:	08004098 	.word	0x08004098

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <lineBreakFunction>:
void chooseAMode(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lineBreakFunction(void) {      // This functions send a 10 and a 13 in ASCII
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  lineBreak[0] = 10;                // 10 turns for change the current line to the lower one
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <lineBreakFunction+0x30>)
 800048a:	220a      	movs	r2, #10
 800048c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, lineBreak, 1, 10000);
 800048e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000492:	2201      	movs	r2, #1
 8000494:	4907      	ldr	r1, [pc, #28]	; (80004b4 <lineBreakFunction+0x30>)
 8000496:	4808      	ldr	r0, [pc, #32]	; (80004b8 <lineBreakFunction+0x34>)
 8000498:	f003 f891 	bl	80035be <HAL_UART_Transmit>
  lineBreak[0] = 13;                // 13 turns for going to the beginning of the sentence
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <lineBreakFunction+0x30>)
 800049e:	220d      	movs	r2, #13
 80004a0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, lineBreak, 1, 10000);
 80004a2:	f242 7310 	movw	r3, #10000	; 0x2710
 80004a6:	2201      	movs	r2, #1
 80004a8:	4902      	ldr	r1, [pc, #8]	; (80004b4 <lineBreakFunction+0x30>)
 80004aa:	4803      	ldr	r0, [pc, #12]	; (80004b8 <lineBreakFunction+0x34>)
 80004ac:	f003 f887 	bl	80035be <HAL_UART_Transmit>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200001b0 	.word	0x200001b0
 80004b8:	20000154 	.word	0x20000154

080004bc <chooseAMode>:
void chooseAMode(void) {            // The function is called when we want to transmit the sentence: "Choose a mode"
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(&huart1, choose, 7, 10000);
 80004c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80004c4:	2207      	movs	r2, #7
 80004c6:	4906      	ldr	r1, [pc, #24]	; (80004e0 <chooseAMode+0x24>)
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <chooseAMode+0x28>)
 80004ca:	f003 f878 	bl	80035be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, aMode, 7, 10000);
 80004ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80004d2:	2207      	movs	r2, #7
 80004d4:	4904      	ldr	r1, [pc, #16]	; (80004e8 <chooseAMode+0x2c>)
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <chooseAMode+0x28>)
 80004d8:	f003 f871 	bl	80035be <HAL_UART_Transmit>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000008 	.word	0x20000008
 80004e4:	20000154 	.word	0x20000154
 80004e8:	20000010 	.word	0x20000010

080004ec <goForward>:

void goForward(void) {              // Contains the necessary changes in the registers to make the robot go forward
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11)<<16;      // PA11 reset
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <goForward+0x40>)
 80004f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004f6:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12)<<16;      // PA12 reset
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <goForward+0x40>)
 80004fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004fe:	619a      	str	r2, [r3, #24]
  TIM4->CCR3 = (maxSpeed-(maxSpeed/10)); // DC set to max Speed: (50-99) => (50%-100%)
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <goForward+0x44>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <goForward+0x44>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <goForward+0x48>)
 800050c:	fba2 2303 	umull	r2, r3, r2, r3
 8000510:	08db      	lsrs	r3, r3, #3
 8000512:	b29b      	uxth	r3, r3
 8000514:	1aca      	subs	r2, r1, r3
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <goForward+0x4c>)
 8000518:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = maxSpeed; // // DC set to max Speed: (50-99) => (50%-100%)
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <goForward+0x44>)
 800051c:	881a      	ldrh	r2, [r3, #0]
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <goForward+0x4c>)
 8000520:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40020000 	.word	0x40020000
 8000530:	20000000 	.word	0x20000000
 8000534:	cccccccd 	.word	0xcccccccd
 8000538:	40000800 	.word	0x40000800

0800053c <goBackward>:

void goBackward(void) {             // Contains the necessary changes in the registers to make the robot go backward
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11);          // PA11 set
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <goBackward+0x48>)
 8000542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000546:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12);          // PA12 set
 8000548:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <goBackward+0x48>)
 800054a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800054e:	619a      	str	r2, [r3, #24]
  TIM4->CCR3 = 99-(maxSpeed-(maxSpeed/10)); // DC set to the max value the DC can take - max Speed: (0-50) => (0%-50%)
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <goBackward+0x4c>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <goBackward+0x4c>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	4a0c      	ldr	r2, [pc, #48]	; (800058c <goBackward+0x50>)
 800055c:	fba2 2303 	umull	r2, r3, r2, r3
 8000560:	08db      	lsrs	r3, r3, #3
 8000562:	b29b      	uxth	r3, r3
 8000564:	1acb      	subs	r3, r1, r3
 8000566:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <goBackward+0x54>)
 800056c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 99-maxSpeed; // DC set to the max value the DC can take - max Speed: (0-50) => (0%-50%)
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <goBackward+0x4c>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <goBackward+0x54>)
 8000578:	641a      	str	r2, [r3, #64]	; 0x40
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40020000 	.word	0x40020000
 8000588:	20000000 	.word	0x20000000
 800058c:	cccccccd 	.word	0xcccccccd
 8000590:	40000800 	.word	0x40000800

08000594 <forwardBrake>:

void forwardBrake(void) {           // Contains the necessary changes in the registers to make the robot go backward
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11)<<16;      // PA11 reset
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <forwardBrake+0x78>)
 800059a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800059e:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12)<<16;      // PA12 reset
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <forwardBrake+0x78>)
 80005a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005a6:	619a      	str	r2, [r3, #24]
  TIM4->CCR3 = (((maxSpeed-maxSpeed/10)-35)*(distance-10)/10)+35; // Decreases as the distance also decreases
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <forwardBrake+0x7c>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <forwardBrake+0x7c>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	4a18      	ldr	r2, [pc, #96]	; (8000614 <forwardBrake+0x80>)
 80005b4:	fba2 2303 	umull	r2, r3, r2, r3
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	1acb      	subs	r3, r1, r3
 80005be:	3b23      	subs	r3, #35	; 0x23
 80005c0:	4a15      	ldr	r2, [pc, #84]	; (8000618 <forwardBrake+0x84>)
 80005c2:	8812      	ldrh	r2, [r2, #0]
 80005c4:	3a0a      	subs	r2, #10
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <forwardBrake+0x88>)
 80005cc:	fb82 1203 	smull	r1, r2, r2, r3
 80005d0:	1092      	asrs	r2, r2, #2
 80005d2:	17db      	asrs	r3, r3, #31
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	f103 0223 	add.w	r2, r3, #35	; 0x23
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <forwardBrake+0x8c>)
 80005dc:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = ((maxSpeed-35)*(distance-10)/10)+35;               // Decreases as the distance also decreases
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <forwardBrake+0x7c>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	3b23      	subs	r3, #35	; 0x23
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <forwardBrake+0x84>)
 80005e6:	8812      	ldrh	r2, [r2, #0]
 80005e8:	3a0a      	subs	r2, #10
 80005ea:	fb02 f303 	mul.w	r3, r2, r3
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <forwardBrake+0x88>)
 80005f0:	fb82 1203 	smull	r1, r2, r2, r3
 80005f4:	1092      	asrs	r2, r2, #2
 80005f6:	17db      	asrs	r3, r3, #31
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	f103 0223 	add.w	r2, r3, #35	; 0x23
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <forwardBrake+0x8c>)
 8000600:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40020000 	.word	0x40020000
 8000610:	20000000 	.word	0x20000000
 8000614:	cccccccd 	.word	0xcccccccd
 8000618:	20000198 	.word	0x20000198
 800061c:	66666667 	.word	0x66666667
 8000620:	40000800 	.word	0x40000800

08000624 <Stop>:

void Stop(void) {
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11)<<16;  // PA11 reset
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <Stop+0x28>)
 800062a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800062e:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12)<<16;  // PA12 reset
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <Stop+0x28>)
 8000632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000636:	619a      	str	r2, [r3, #24]
  TIM4->CCR3 = 0; // DC initialize to 0 (0%)
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <Stop+0x2c>)
 800063a:	2200      	movs	r2, #0
 800063c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 0; // DC initialize to 0 (0%)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <Stop+0x2c>)
 8000640:	2200      	movs	r2, #0
 8000642:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40020000 	.word	0x40020000
 8000650:	40000800 	.word	0x40000800

08000654 <goRight>:

void goRight(void) {
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11);      // PA11 set
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <goRight+0x28>)
 800065a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800065e:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12)<<16;  // PA12 reset
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <goRight+0x28>)
 8000662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000666:	619a      	str	r2, [r3, #24]
  TIM4->CCR3 = 0;               // DC initialize to 0 (0%)
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <goRight+0x2c>)
 800066a:	2200      	movs	r2, #0
 800066c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 99;              // DC set to the maximum
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <goRight+0x2c>)
 8000670:	2263      	movs	r2, #99	; 0x63
 8000672:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40020000 	.word	0x40020000
 8000680:	40000800 	.word	0x40000800

08000684 <goLeft>:

void goLeft(void) {
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11)<<16;  // PA11 reset
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <goLeft+0x28>)
 800068a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800068e:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12);      // PA12 set
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <goLeft+0x28>)
 8000692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000696:	619a      	str	r2, [r3, #24]
  TIM4->CCR3 = 99;              // DC set to the maximum
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <goLeft+0x2c>)
 800069a:	2263      	movs	r2, #99	; 0x63
 800069c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 0;               // DC initialize to 0 (0%)
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <goLeft+0x2c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40000800 	.word	0x40000800

080006b4 <ADC1_IRQHandler>:


void ADC1_IRQHandler(void) {
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  if((ADC1->SR & (1 << 1)) != 0) {    // ADC EOC
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <ADC1_IRQHandler+0x44>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d012      	beq.n	80006ea <ADC1_IRQHandler+0x36>
    maxSpeed = (ADC1->DR) * (99 - 50) / (4095) + 50;  // Stores the value of the ADC: (0-4095) into maxSpeed: (50-99)
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <ADC1_IRQHandler+0x44>)
 80006c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	00da      	lsls	r2, r3, #3
 80006d0:	1ad2      	subs	r2, r2, r3
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <ADC1_IRQHandler+0x48>)
 80006d4:	fba3 1302 	umull	r1, r3, r3, r2
 80006d8:	1ad2      	subs	r2, r2, r3
 80006da:	0852      	lsrs	r2, r2, #1
 80006dc:	4413      	add	r3, r2
 80006de:	0adb      	lsrs	r3, r3, #11
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	3332      	adds	r3, #50	; 0x32
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <ADC1_IRQHandler+0x4c>)
 80006e8:	801a      	strh	r2, [r3, #0]
  }
  ADC1->SR = 0;     // Clear the flags
 80006ea:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <ADC1_IRQHandler+0x44>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40012400 	.word	0x40012400
 80006fc:	00100101 	.word	0x00100101
 8000700:	20000000 	.word	0x20000000

08000704 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  if((TIM3->SR & 0x0002) != 0) {      // TIM3 Ch1 flag
 8000708:	4b64      	ldr	r3, [pc, #400]	; (800089c <TIM3_IRQHandler+0x198>)
 800070a:	691b      	ldr	r3, [r3, #16]
 800070c:	f003 0302 	and.w	r3, r3, #2
 8000710:	2b00      	cmp	r3, #0
 8000712:	f000 808f 	beq.w	8000834 <TIM3_IRQHandler+0x130>
    TIM3->CCR1 += HALFSECONDPERIOD;   // Update the CCR with 0.5 seconds more
 8000716:	4b61      	ldr	r3, [pc, #388]	; (800089c <TIM3_IRQHandler+0x198>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071a:	4a60      	ldr	r2, [pc, #384]	; (800089c <TIM3_IRQHandler+0x198>)
 800071c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000720:	6353      	str	r3, [r2, #52]	; 0x34

    // LAUNCH ADC
    ADC1->CR2 |= 0x40000000;          //  = 1 -> Start conversion
 8000722:	4b5f      	ldr	r3, [pc, #380]	; (80008a0 <TIM3_IRQHandler+0x19c>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4a5e      	ldr	r2, [pc, #376]	; (80008a0 <TIM3_IRQHandler+0x19c>)
 8000728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800072c:	6093      	str	r3, [r2, #8]

    // LAUNCH TRIGGER
    GPIOD->BSRR = (1 << 2);                 // Send a 1 to the trigger
 800072e:	4b5d      	ldr	r3, [pc, #372]	; (80008a4 <TIM3_IRQHandler+0x1a0>)
 8000730:	2204      	movs	r2, #4
 8000732:	619a      	str	r2, [r3, #24]
    TIM2->CCR2 = TIM2->CNT + TRIGGERPULSE;  // Update counter to count 12us (15us just to have enough)
 8000734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073e:	330f      	adds	r3, #15
 8000740:	6393      	str	r3, [r2, #56]	; 0x38
    TIM2->DIER |= (1 << 2);                 // Enable DIER Ch2
 8000742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	60d3      	str	r3, [r2, #12]

    if(globalMode == 1) {           // Decide functionality mode depending on the received BT bit
 8000752:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <TIM3_IRQHandler+0x1a4>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d101      	bne.n	800075e <TIM3_IRQHandler+0x5a>
      Stop();
 800075a:	f7ff ff63 	bl	8000624 <Stop>
    }
    if(globalMode == 2) {
 800075e:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <TIM3_IRQHandler+0x1a4>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d101      	bne.n	800076a <TIM3_IRQHandler+0x66>
      goForward();
 8000766:	f7ff fec1 	bl	80004ec <goForward>
    }

    if(globalMode == 3) {
 800076a:	4b4f      	ldr	r3, [pc, #316]	; (80008a8 <TIM3_IRQHandler+0x1a4>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d101      	bne.n	8000776 <TIM3_IRQHandler+0x72>
      goBackward();
 8000772:	f7ff fee3 	bl	800053c <goBackward>
    }

    if(globalMode == 4) {
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <TIM3_IRQHandler+0x1a4>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b04      	cmp	r3, #4
 800077c:	d101      	bne.n	8000782 <TIM3_IRQHandler+0x7e>
      goRight();
 800077e:	f7ff ff69 	bl	8000654 <goRight>
    }

    if(globalMode == 5) {
 8000782:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <TIM3_IRQHandler+0x1a4>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	2b05      	cmp	r3, #5
 8000788:	d101      	bne.n	800078e <TIM3_IRQHandler+0x8a>
      goLeft();
 800078a:	f7ff ff7b 	bl	8000684 <goLeft>
    }

    if(globalMode == 6) {         // AUTOMATIC MODE
 800078e:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <TIM3_IRQHandler+0x1a4>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	2b06      	cmp	r3, #6
 8000794:	d145      	bne.n	8000822 <TIM3_IRQHandler+0x11e>
      // DECIDE MODE
      if(cautionMode == 0) {        // CASE DISTANCE < 10 centimeters
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <TIM3_IRQHandler+0x1a8>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d126      	bne.n	80007ec <TIM3_IRQHandler+0xe8>
        if(turnMode == 0) {         // Case it has finished turning or it is not turning at all
 800079e:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <TIM3_IRQHandler+0x1ac>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d11c      	bne.n	80007e0 <TIM3_IRQHandler+0xdc>
          GPIOA->BSRR = (1 << 1);   // Continuous buzzer
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <TIM3_IRQHandler+0x1b0>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	619a      	str	r2, [r3, #24]
          Stop();                   // Stop the movement
 80007ac:	f7ff ff3a 	bl	8000624 <Stop>
          TIM2->DIER &= ~(1 << 1);  // Disable Echo Ch1 DIER (Echo is not detecting)
 80007b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ba:	f023 0302 	bic.w	r3, r3, #2
 80007be:	60d3      	str	r3, [r2, #12]
          TIM3->DIER |= (1 << 2);   // Enable TIM3 Ch2 to start turning in one direction
 80007c0:	4b36      	ldr	r3, [pc, #216]	; (800089c <TIM3_IRQHandler+0x198>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	4a35      	ldr	r2, [pc, #212]	; (800089c <TIM3_IRQHandler+0x198>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	60d3      	str	r3, [r2, #12]
          TIM3->CCR2 = TIM3->CNT + HALFSECONDPERIOD;  // Update the counter to wait 0.5 seconds stopped
 80007cc:	4b33      	ldr	r3, [pc, #204]	; (800089c <TIM3_IRQHandler+0x198>)
 80007ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d0:	4a32      	ldr	r2, [pc, #200]	; (800089c <TIM3_IRQHandler+0x198>)
 80007d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80007d6:	6393      	str	r3, [r2, #56]	; 0x38
          turnMode = 1;             // Change the turnMode to start a turning sequence
 80007d8:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <TIM3_IRQHandler+0x1ac>)
 80007da:	2201      	movs	r2, #1
 80007dc:	801a      	strh	r2, [r3, #0]
 80007de:	e020      	b.n	8000822 <TIM3_IRQHandler+0x11e>
        }
        else {
          GPIOA->BSRR = (1 << 1);   // Continuous buzzer
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <TIM3_IRQHandler+0x1b0>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	619a      	str	r2, [r3, #24]
          Stop();                   // Stop the movement
 80007e6:	f7ff ff1d 	bl	8000624 <Stop>
 80007ea:	e01a      	b.n	8000822 <TIM3_IRQHandler+0x11e>
        }
      }
      else if(cautionMode == 1) { // CASE DISTANCE >= 10cm && <= 20cm
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <TIM3_IRQHandler+0x1a8>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d110      	bne.n	8000816 <TIM3_IRQHandler+0x112>

        forwardBrake();             // Continue going forward but speed decreases as distance decreases
 80007f4:	f7ff fece 	bl	8000594 <forwardBrake>

        if((GPIOA->ODR & (1 << 1)) != 0) {  // Intermittent sound, each 0.5 seconds:
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <TIM3_IRQHandler+0x1b0>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	2b00      	cmp	r3, #0
 8000802:	d004      	beq.n	800080e <TIM3_IRQHandler+0x10a>
          GPIOA->BSRR = (1 << 1)<<16;       // If the buzzer is on -> turn off
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <TIM3_IRQHandler+0x1b0>)
 8000806:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800080a:	619a      	str	r2, [r3, #24]
 800080c:	e009      	b.n	8000822 <TIM3_IRQHandler+0x11e>
        }
        else {
          GPIOA->BSRR = (1 << 1);           // If the buzzer is off -> turn on
 800080e:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <TIM3_IRQHandler+0x1b0>)
 8000810:	2202      	movs	r2, #2
 8000812:	619a      	str	r2, [r3, #24]
 8000814:	e005      	b.n	8000822 <TIM3_IRQHandler+0x11e>
        }
      }
      else {                      // CASE DISTANCE > 20 centimeters
        GPIOA->BSRR = (1 << 1)<<16;     // Buzzer off
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <TIM3_IRQHandler+0x1b0>)
 8000818:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800081c:	619a      	str	r2, [r3, #24]
        goForward();                    // Go forward at maxSpeed
 800081e:	f7ff fe65 	bl	80004ec <goForward>

      }
    }
    received[0]=0;            // Clear the received USART bit
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <TIM3_IRQHandler+0x1b4>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
    TIM3->SR &= ~(0x0002);    // Clear the flags
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <TIM3_IRQHandler+0x198>)
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <TIM3_IRQHandler+0x198>)
 800082e:	f023 0302 	bic.w	r3, r3, #2
 8000832:	6113      	str	r3, [r2, #16]
  }

  if((TIM3->SR & 0x0004) != 0) {    // When the turning sequence starts (<10cm and 0.5 seconds have passed)
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <TIM3_IRQHandler+0x198>)
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	2b00      	cmp	r3, #0
 800083e:	d02b      	beq.n	8000898 <TIM3_IRQHandler+0x194>

      if(prevTurnMode == 4) {       // Change the turning depending on the previous step
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <TIM3_IRQHandler+0x1b8>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	2b04      	cmp	r3, #4
 8000846:	d103      	bne.n	8000850 <TIM3_IRQHandler+0x14c>
        turnMode = 2;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <TIM3_IRQHandler+0x1ac>)
 800084a:	2202      	movs	r2, #2
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	e00e      	b.n	800086e <TIM3_IRQHandler+0x16a>
      }
      else if(prevTurnMode == 2) {
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <TIM3_IRQHandler+0x1b8>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d103      	bne.n	8000860 <TIM3_IRQHandler+0x15c>
        turnMode = 3;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <TIM3_IRQHandler+0x1ac>)
 800085a:	2203      	movs	r2, #3
 800085c:	801a      	strh	r2, [r3, #0]
 800085e:	e006      	b.n	800086e <TIM3_IRQHandler+0x16a>
      }
      else if(prevTurnMode == 3) {
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <TIM3_IRQHandler+0x1b8>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d102      	bne.n	800086e <TIM3_IRQHandler+0x16a>
        turnMode = 4;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <TIM3_IRQHandler+0x1ac>)
 800086a:	2204      	movs	r2, #4
 800086c:	801a      	strh	r2, [r3, #0]
      }
      prevTurnMode = turnMode;      // Update the previous turn mode
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <TIM3_IRQHandler+0x1ac>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <TIM3_IRQHandler+0x1b8>)
 8000874:	801a      	strh	r2, [r3, #0]
      tim3Time = TIM3->CNT;         // Store the counter value in order to make the robot turn only the time we want
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <TIM3_IRQHandler+0x198>)
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <TIM3_IRQHandler+0x1bc>)
 800087e:	801a      	strh	r2, [r3, #0]
      TIM3->DIER &= ~(1 << 2);      // Disables this channel
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <TIM3_IRQHandler+0x198>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	4a05      	ldr	r2, [pc, #20]	; (800089c <TIM3_IRQHandler+0x198>)
 8000886:	f023 0304 	bic.w	r3, r3, #4
 800088a:	60d3      	str	r3, [r2, #12]
      TIM3->SR &= ~(0x0004);        // Clear the flags
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <TIM3_IRQHandler+0x198>)
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	4a02      	ldr	r2, [pc, #8]	; (800089c <TIM3_IRQHandler+0x198>)
 8000892:	f023 0304 	bic.w	r3, r3, #4
 8000896:	6113      	str	r3, [r2, #16]

  }
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40000400 	.word	0x40000400
 80008a0:	40012400 	.word	0x40012400
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	20000004 	.word	0x20000004
 80008ac:	200001a0 	.word	0x200001a0
 80008b0:	20000002 	.word	0x20000002
 80008b4:	40020000 	.word	0x40020000
 80008b8:	200001a8 	.word	0x200001a8
 80008bc:	200001a2 	.word	0x200001a2
 80008c0:	200001a4 	.word	0x200001a4

080008c4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0

  // TRIGGER (CHANNEL 2)
  if((TIM2->SR & 0x0004) != 0) {      // TIM2 CHANNEL  2 (Trigger when 15us have passed)
 80008ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d013      	beq.n	8000900 <TIM2_IRQHandler+0x3c>
    GPIOD->BSRR = (1 << 2) << 16;     // Trigger -> 0   (Reset the trigger)
 80008d8:	4b57      	ldr	r3, [pc, #348]	; (8000a38 <TIM2_IRQHandler+0x174>)
 80008da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008de:	619a      	str	r2, [r3, #24]
    TIM2->DIER &= ~(1 << 2);          // Disable DIER Ch2
 80008e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	f023 0304 	bic.w	r3, r3, #4
 80008ee:	60d3      	str	r3, [r2, #12]
    TIM2->SR &= ~(0x0004);            // Clear the flag
 80008f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fa:	f023 0304 	bic.w	r3, r3, #4
 80008fe:	6113      	str	r3, [r2, #16]
  }

  // ECHO (CHANNEL 1)
  if((TIM2->SR & 0x0002) != 0) {      // TIM2 CHANNEL  1  (Echo when receives the reply signal rising and falling edge)
 8000900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 808f 	beq.w	8000a2e <TIM2_IRQHandler+0x16a>

    if((GPIOA->IDR&(1 << 5)) != 0) {  // Checks whether is the Echo is high (rising edge is received)
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <TIM2_IRQHandler+0x178>)
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	f003 0320 	and.w	r3, r3, #32
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <TIM2_IRQHandler+0x66>
      echoStartTime = TIM2->CCR1;       // Store the time to calculate later the total time
 800091c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	b29a      	uxth	r2, r3
 8000924:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <TIM2_IRQHandler+0x17c>)
 8000926:	801a      	strh	r2, [r3, #0]
 8000928:	e079      	b.n	8000a1e <TIM2_IRQHandler+0x15a>
    }
    else {                            // or low (falling edge is received)
      echoTotalTime = TIM2->CCR1 - echoStartTime;     // Calculate the time that has passed from the rising to the falling edge
 800092a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800092e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000930:	4a43      	ldr	r2, [pc, #268]	; (8000a40 <TIM2_IRQHandler+0x17c>)
 8000932:	8812      	ldrh	r2, [r2, #0]
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	461a      	mov	r2, r3
 8000938:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <TIM2_IRQHandler+0x180>)
 800093a:	601a      	str	r2, [r3, #0]
      if(echoTotalTime < 0) echoTotalTime += 0xFFFF;  // Rearrange the variable if it turns to be negative
 800093c:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <TIM2_IRQHandler+0x180>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	da06      	bge.n	8000952 <TIM2_IRQHandler+0x8e>
 8000944:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <TIM2_IRQHandler+0x180>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800094c:	33ff      	adds	r3, #255	; 0xff
 800094e:	4a3d      	ldr	r2, [pc, #244]	; (8000a44 <TIM2_IRQHandler+0x180>)
 8000950:	6013      	str	r3, [r2, #0]
      distance = (echoTotalTime) / 90;                // Apply formula to calculate the distance
 8000952:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <TIM2_IRQHandler+0x180>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a3c      	ldr	r2, [pc, #240]	; (8000a48 <TIM2_IRQHandler+0x184>)
 8000958:	fb82 1203 	smull	r1, r2, r2, r3
 800095c:	441a      	add	r2, r3
 800095e:	1192      	asrs	r2, r2, #6
 8000960:	17db      	asrs	r3, r3, #31
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <TIM2_IRQHandler+0x188>)
 8000968:	801a      	strh	r2, [r3, #0]
      // Decide buzzer Mode
      if(distance < 10) {     // Decide how the robot will work depending on the distance. If distance < 10:
 800096a:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <TIM2_IRQHandler+0x188>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	2b09      	cmp	r3, #9
 8000970:	d81a      	bhi.n	80009a8 <TIM2_IRQHandler+0xe4>
        cautionMode = 0;      // Stop and start the sequence mode
 8000972:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <TIM2_IRQHandler+0x18c>)
 8000974:	2200      	movs	r2, #0
 8000976:	801a      	strh	r2, [r3, #0]
        turnMode = 0;
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <TIM2_IRQHandler+0x190>)
 800097a:	2200      	movs	r2, #0
 800097c:	801a      	strh	r2, [r3, #0]
        uint8_t answer[7] = {60, 32, 49, 48, 32, 99, 109};  // Transmit that there is an obstacle at less than 10cm
 800097e:	4a36      	ldr	r2, [pc, #216]	; (8000a58 <TIM2_IRQHandler+0x194>)
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000988:	6018      	str	r0, [r3, #0]
 800098a:	3304      	adds	r3, #4
 800098c:	8019      	strh	r1, [r3, #0]
 800098e:	3302      	adds	r3, #2
 8000990:	0c0a      	lsrs	r2, r1, #16
 8000992:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, answer, 7, 10000);
 8000994:	f107 0110 	add.w	r1, r7, #16
 8000998:	f242 7310 	movw	r3, #10000	; 0x2710
 800099c:	2207      	movs	r2, #7
 800099e:	482f      	ldr	r0, [pc, #188]	; (8000a5c <TIM2_IRQHandler+0x198>)
 80009a0:	f002 fe0d 	bl	80035be <HAL_UART_Transmit>
        lineBreakFunction();
 80009a4:	f7ff fd6e 	bl	8000484 <lineBreakFunction>
      }
      if(distance >= 10 && distance <= 20) {  // If distance is between 10cm and 20cm
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <TIM2_IRQHandler+0x188>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	2b09      	cmp	r3, #9
 80009ae:	d92f      	bls.n	8000a10 <TIM2_IRQHandler+0x14c>
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <TIM2_IRQHandler+0x188>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	2b14      	cmp	r3, #20
 80009b6:	d82b      	bhi.n	8000a10 <TIM2_IRQHandler+0x14c>
        cautionMode = 1;      // Move forward reducing speed and reestablish the turning sequence
 80009b8:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <TIM2_IRQHandler+0x18c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	801a      	strh	r2, [r3, #0]
        prevTurnMode = 4;
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <TIM2_IRQHandler+0x19c>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	801a      	strh	r2, [r3, #0]
        uint8_t answer[7] = {79, 98, 115, 116, 97, 99, 32}; // Transmit that there is an obstacle
 80009c4:	4a27      	ldr	r2, [pc, #156]	; (8000a64 <TIM2_IRQHandler+0x1a0>)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ce:	6018      	str	r0, [r3, #0]
 80009d0:	3304      	adds	r3, #4
 80009d2:	8019      	strh	r1, [r3, #0]
 80009d4:	3302      	adds	r3, #2
 80009d6:	0c0a      	lsrs	r2, r1, #16
 80009d8:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, answer, 7, 10000);
 80009da:	f107 0108 	add.w	r1, r7, #8
 80009de:	f242 7310 	movw	r3, #10000	; 0x2710
 80009e2:	2207      	movs	r2, #7
 80009e4:	481d      	ldr	r0, [pc, #116]	; (8000a5c <TIM2_IRQHandler+0x198>)
 80009e6:	f002 fdea 	bl	80035be <HAL_UART_Transmit>
        uint8_t answer1[7] = {49, 48, 60, 120, 60, 50, 48}; // between 10 and 20 centimeters
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <TIM2_IRQHandler+0x1a4>)
 80009ec:	463b      	mov	r3, r7
 80009ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f2:	6018      	str	r0, [r3, #0]
 80009f4:	3304      	adds	r3, #4
 80009f6:	8019      	strh	r1, [r3, #0]
 80009f8:	3302      	adds	r3, #2
 80009fa:	0c0a      	lsrs	r2, r1, #16
 80009fc:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, answer1, 7, 10000);
 80009fe:	4639      	mov	r1, r7
 8000a00:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a04:	2207      	movs	r2, #7
 8000a06:	4815      	ldr	r0, [pc, #84]	; (8000a5c <TIM2_IRQHandler+0x198>)
 8000a08:	f002 fdd9 	bl	80035be <HAL_UART_Transmit>
        lineBreakFunction();
 8000a0c:	f7ff fd3a 	bl	8000484 <lineBreakFunction>
      }
      if(distance > 20) {   // IF distance is greater than 20:
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <TIM2_IRQHandler+0x188>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	2b14      	cmp	r3, #20
 8000a16:	d902      	bls.n	8000a1e <TIM2_IRQHandler+0x15a>
        cautionMode = 2;    // Just move forward
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <TIM2_IRQHandler+0x18c>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	801a      	strh	r2, [r3, #0]
      }
    }

    TIM2->SR &= ~(0x0002);            // Clear the flag
 8000a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a28:	f023 0302 	bic.w	r3, r3, #2
 8000a2c:	6113      	str	r3, [r2, #16]
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	2000019a 	.word	0x2000019a
 8000a44:	2000019c 	.word	0x2000019c
 8000a48:	b60b60b7 	.word	0xb60b60b7
 8000a4c:	20000198 	.word	0x20000198
 8000a50:	200001a0 	.word	0x200001a0
 8000a54:	20000002 	.word	0x20000002
 8000a58:	080040b0 	.word	0x080040b0
 8000a5c:	20000154 	.word	0x20000154
 8000a60:	200001a2 	.word	0x200001a2
 8000a64:	080040b8 	.word	0x080040b8
 8000a68:	080040c0 	.word	0x080040c0

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f000 febc 	bl	80017ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 fa51 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 fc07 	bl	800128c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a7e:	f000 faf3 	bl	8001068 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a82:	f000 fb3d 	bl	8001100 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a86:	f000 fb89 	bl	800119c <MX_TIM4_Init>
  MX_ADC_Init();
 8000a8a:	f000 fa95 	bl	8000fb8 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000a8e:	f000 fbd3 	bl	8001238 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // CONFIG BUZZER GPIO
  GPIOA->MODER &= ~(1 << (1*2 +1));   // PA1 as Digital Output (01)
 8000a92:	4ba5      	ldr	r3, [pc, #660]	; (8000d28 <main+0x2bc>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4aa4      	ldr	r2, [pc, #656]	; (8000d28 <main+0x2bc>)
 8000a98:	f023 0308 	bic.w	r3, r3, #8
 8000a9c:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (1*2));
 8000a9e:	4ba2      	ldr	r3, [pc, #648]	; (8000d28 <main+0x2bc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4aa1      	ldr	r2, [pc, #644]	; (8000d28 <main+0x2bc>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6013      	str	r3, [r2, #0]

  // CONFIG TRIGGER GPIO
  GPIOD->MODER &= ~(1 << (2*2 +1));   // PD2 as Digital Output (01)
 8000aaa:	4ba0      	ldr	r3, [pc, #640]	; (8000d2c <main+0x2c0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a9f      	ldr	r2, [pc, #636]	; (8000d2c <main+0x2c0>)
 8000ab0:	f023 0320 	bic.w	r3, r3, #32
 8000ab4:	6013      	str	r3, [r2, #0]
  GPIOD->MODER |= (1 << (2*2));
 8000ab6:	4b9d      	ldr	r3, [pc, #628]	; (8000d2c <main+0x2c0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a9c      	ldr	r2, [pc, #624]	; (8000d2c <main+0x2c0>)
 8000abc:	f043 0310 	orr.w	r3, r3, #16
 8000ac0:	6013      	str	r3, [r2, #0]

  // CONFIG ECHO GPIO
  GPIOA->MODER |= (1 << (5*2 +1));    // PA5 as AF (10)
 8000ac2:	4b99      	ldr	r3, [pc, #612]	; (8000d28 <main+0x2bc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a98      	ldr	r2, [pc, #608]	; (8000d28 <main+0x2bc>)
 8000ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000acc:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~(1 << (5*2));
 8000ace:	4b96      	ldr	r3, [pc, #600]	; (8000d28 <main+0x2bc>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a95      	ldr	r2, [pc, #596]	; (8000d28 <main+0x2bc>)
 8000ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ad8:	6013      	str	r3, [r2, #0]
  GPIOA->AFR[0] &= ~(0x00F00000);
 8000ada:	4b93      	ldr	r3, [pc, #588]	; (8000d28 <main+0x2bc>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <main+0x2bc>)
 8000ae0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (1 << 5*4);        // Select the AF1 for PA5
 8000ae6:	4b90      	ldr	r3, [pc, #576]	; (8000d28 <main+0x2bc>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a8f      	ldr	r2, [pc, #572]	; (8000d28 <main+0x2bc>)
 8000aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af0:	6213      	str	r3, [r2, #32]

  // MOTOR 1 CONFIG
  GPIOB->MODER |= (1 << (8*2 +1));    // PB8 as AF (10)
 8000af2:	4b8f      	ldr	r3, [pc, #572]	; (8000d30 <main+0x2c4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a8e      	ldr	r2, [pc, #568]	; (8000d30 <main+0x2c4>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~(1 << (8*2));
 8000afe:	4b8c      	ldr	r3, [pc, #560]	; (8000d30 <main+0x2c4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a8b      	ldr	r2, [pc, #556]	; (8000d30 <main+0x2c4>)
 8000b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b08:	6013      	str	r3, [r2, #0]
  GPIOB->AFR[1] |= (1 << (0*4 +1));     // PB8 as AF2 (linked to TIM4)
 8000b0a:	4b89      	ldr	r3, [pc, #548]	; (8000d30 <main+0x2c4>)
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	4a88      	ldr	r2, [pc, #544]	; (8000d30 <main+0x2c4>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->MODER &= ~(1 << (11*2 +1));  // PA11 as Digital Output(01)
 8000b16:	4b84      	ldr	r3, [pc, #528]	; (8000d28 <main+0x2bc>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a83      	ldr	r2, [pc, #524]	; (8000d28 <main+0x2bc>)
 8000b1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b20:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (11*2));
 8000b22:	4b81      	ldr	r3, [pc, #516]	; (8000d28 <main+0x2bc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a80      	ldr	r2, [pc, #512]	; (8000d28 <main+0x2bc>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b2c:	6013      	str	r3, [r2, #0]

  // MOTOR 2 CONFIG
  GPIOB->MODER |= (1 << (9*2 +1));    // PB8 as AF (10)
 8000b2e:	4b80      	ldr	r3, [pc, #512]	; (8000d30 <main+0x2c4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a7f      	ldr	r2, [pc, #508]	; (8000d30 <main+0x2c4>)
 8000b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b38:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~(1 << (9*2));
 8000b3a:	4b7d      	ldr	r3, [pc, #500]	; (8000d30 <main+0x2c4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a7c      	ldr	r2, [pc, #496]	; (8000d30 <main+0x2c4>)
 8000b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b44:	6013      	str	r3, [r2, #0]
  GPIOB->AFR[1] |= (1 << (1*4 +1));     // PB9 as AF2 (linked to TIM4)
 8000b46:	4b7a      	ldr	r3, [pc, #488]	; (8000d30 <main+0x2c4>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a79      	ldr	r2, [pc, #484]	; (8000d30 <main+0x2c4>)
 8000b4c:	f043 0320 	orr.w	r3, r3, #32
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->MODER &= ~(1 << (12*2 +1));  // PA12 as Digital Output(01)
 8000b52:	4b75      	ldr	r3, [pc, #468]	; (8000d28 <main+0x2bc>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a74      	ldr	r2, [pc, #464]	; (8000d28 <main+0x2bc>)
 8000b58:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (12*2));
 8000b5e:	4b72      	ldr	r3, [pc, #456]	; (8000d28 <main+0x2bc>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a71      	ldr	r2, [pc, #452]	; (8000d28 <main+0x2bc>)
 8000b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b68:	6013      	str	r3, [r2, #0]

  // POTENCIOMETER CONFIG
  GPIOA->MODER |= (1 << (4*2 +1));    // PA4 as analog (11)
 8000b6a:	4b6f      	ldr	r3, [pc, #444]	; (8000d28 <main+0x2bc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a6e      	ldr	r2, [pc, #440]	; (8000d28 <main+0x2bc>)
 8000b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b74:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (4*2));
 8000b76:	4b6c      	ldr	r3, [pc, #432]	; (8000d28 <main+0x2bc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a6b      	ldr	r2, [pc, #428]	; (8000d28 <main+0x2bc>)
 8000b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b80:	6013      	str	r3, [r2, #0]

  // ADC CONFIG
  ADC1->CR2 &= ~(0x00000001);   // ADC needs to be turned off before configuring it
 8000b82:	4b6c      	ldr	r3, [pc, #432]	; (8000d34 <main+0x2c8>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	4a6b      	ldr	r2, [pc, #428]	; (8000d34 <main+0x2c8>)
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	6093      	str	r3, [r2, #8]
  ADC1->CR1 |= 0x00000020;
 8000b8e:	4b69      	ldr	r3, [pc, #420]	; (8000d34 <main+0x2c8>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4a68      	ldr	r2, [pc, #416]	; (8000d34 <main+0x2c8>)
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	6053      	str	r3, [r2, #4]
  ADC1->CR2 |= 0x00000400;
 8000b9a:	4b66      	ldr	r3, [pc, #408]	; (8000d34 <main+0x2c8>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	4a65      	ldr	r2, [pc, #404]	; (8000d34 <main+0x2c8>)
 8000ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba4:	6093      	str	r3, [r2, #8]
  ADC1->SQR1 = 0x00000000;
 8000ba6:	4b63      	ldr	r3, [pc, #396]	; (8000d34 <main+0x2c8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
  ADC1->SQR5 = 0x00000004;
 8000bac:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <main+0x2c8>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40

  ADC1->CR2 |= 0x00000001;
 8000bb2:	4b60      	ldr	r3, [pc, #384]	; (8000d34 <main+0x2c8>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	4a5f      	ldr	r2, [pc, #380]	; (8000d34 <main+0x2c8>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6093      	str	r3, [r2, #8]

  // TIM2 CONFIG (TRIGGER ECHO)
  // Select the internal clock
  TIM2->CR1 = 0x0000;     // ARPE = 0 (only for PWM); CEN = 0 (counter disabled for configuration)
 8000bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
  TIM2->CR2 = 0x0000;     // All zeros
 8000bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  TIM2->SMCR = 0x0000;    // All zeros
 8000bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]

  // Counter behavior setting
  TIM2->PSC = 31;               // freq_Counter = 32 MHz / 32 = 1 MHz -->> T_Counter = 1 us
 8000bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bda:	221f      	movs	r2, #31
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->CNT = 0;                // Initialize the counter at 0
 8000bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR = 0xFFFF;           // Maximum value
 8000be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR2 = TRIGGERPULSE;    // CCR2 = Trigger Pulse (~12us)
 8000bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf4:	220f      	movs	r2, #15
 8000bf6:	639a      	str	r2, [r3, #56]	; 0x38

  // Setting IRQ or not
  TIM2->DIER &= ~(0xFF);
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c06:	60d3      	str	r3, [r2, #12]
  TIM2->DIER |= (1 << 1);       // Enable IRQ for Channel 1 (CC1E)
 8000c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	60d3      	str	r3, [r2, #12]
  TIM2->DIER &= ~(1 << 2);      // Disable DIER Ch2
 8000c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c22:	f023 0304 	bic.w	r3, r3, #4
 8000c26:	60d3      	str	r3, [r2, #12]

  // Output mode
  TIM2->CCMR1 &= ~(0xFFFF);   // Clear CCMR1 register
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	0c1b      	lsrs	r3, r3, #16
 8000c34:	041b      	lsls	r3, r3, #16
 8000c36:	6193      	str	r3, [r2, #24]
  TIM2->CCMR1 |= 0x0001;      // CC1S = 01 (TIC)
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6193      	str	r3, [r2, #24]
                              // CC2S = 00 (TOC)
                              // OC2PE = 0 (only for PWM)
                              // OC2M = 000 (No output)
  TIM2->CCER = 0x000b;        // CC1E = 1 (Enable capture)
 8000c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c4c:	220b      	movs	r2, #11
 8000c4e:	621a      	str	r2, [r3, #32]
                              // CC2E = 0 (Disable hardware output)
                              // CC1NP:CC1P = 11 (Both edges)

  // Counter enabling
  TIM2->CR1 |= 0x0001;        // CEN = 1 -->> Start counter
 8000c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
  TIM2->EGR |= 0x0001;        // UG = 1 -->> Update all registers
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6153      	str	r3, [r2, #20]
  TIM2->SR = 0x0000;          // Clear counter flags
 8000c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]


  // TIM3 CONFIG (PPal Loop)
  // Select the internal clock
  TIM3->CR1 = 0x0000;         // ARPE = 0 (only for PWM); CEN = 0 (counter disabled for configuration)
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <main+0x2cc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
  TIM3->CR2 = 0x0000;         // All zeros
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <main+0x2cc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  TIM3->SMCR = 0x0000;        // All zeros
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <main+0x2cc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]

  //Counter behavior setting
  TIM3->PSC = 31999;              // freq_Counter = 32 MHz / 32000 = 1 kHz -->> T_Counter = 1 ms -->> CCR = 500
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <main+0x2cc>)
 8000c8c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  TIM3->CNT = 0;                  // Initialize the counter at 0
 8000c92:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <main+0x2cc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->ARR = 0xFFFF;             // Set to the maximum
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <main+0x2cc>)
 8000c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR1 = HALFSECONDPERIOD;  // CH1 CCR1 = 500
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <main+0x2cc>)
 8000ca2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ca6:	635a      	str	r2, [r3, #52]	; 0x34

  // Setting IRQ or not
  TIM3->DIER |= (1 << 1);    // We enable an IRQ in channel 1
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <main+0x2cc>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <main+0x2cc>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	60d3      	str	r3, [r2, #12]
  TIM3->DIER &= ~(1 << 2);
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <main+0x2cc>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <main+0x2cc>)
 8000cba:	f023 0304 	bic.w	r3, r3, #4
 8000cbe:	60d3      	str	r3, [r2, #12]

  // Output mode
  TIM3->CCMR1 &= ~(0xFFFF);   // Clear CCMR1 register
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <main+0x2cc>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <main+0x2cc>)
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	041b      	lsls	r3, r3, #16
 8000cca:	6193      	str	r3, [r2, #24]
  TIM3->CCMR1 = 0x0000;       // CC1S = 0 (TOC); OC1M = 000 (no output); OC1PE = 0 (No preload)
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <main+0x2cc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  TIM3->CCER = 0x0000;        // CC1NP = 0; CC1P = 0; CC1E = 0 (Disable output)
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <main+0x2cc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]

  // Counter enabling
  TIM3->CR1 |= 0x0001;        // CEN = 1 -->> Start counter
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <main+0x2cc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <main+0x2cc>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6013      	str	r3, [r2, #0]
  TIM3->EGR |= 0x0001;        // UG = 1 -->> Update all registers
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <main+0x2cc>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <main+0x2cc>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6153      	str	r3, [r2, #20]
  TIM3->SR = 0x0000;          // Clear counter flags
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <main+0x2cc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]

  // TIM4 CONFIG
  // Internal clock selection: CR1, CR2, SMRC
  TIM4->CR1 = 0x0080; // ARPE = 1 -> Is PWM; CEN = 0; Counter OFF
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <main+0x2d0>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	601a      	str	r2, [r3, #0]
  TIM4->CR2 = 0x0000; // Always 0 in this course
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <main+0x2d0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  TIM4->SMCR = 0x0000; // Always 0 in this course
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <main+0x2d0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]

  // Counter setting: PSC, CNT, ARR and CCRx
  TIM4->PSC = 319; // Pre-scaler=320 -> f_counter=32000000/320 = 100000 steps/second -> T = 10us
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <main+0x2d0>)
 8000d0a:	f240 123f 	movw	r2, #319	; 0x13f
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->CNT = 0; // Initialize counter to 0
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <main+0x2d0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->ARR = 99; // PWM Frequency to 1000 Hz and 100 steps
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <main+0x2d0>)
 8000d18:	2263      	movs	r2, #99	; 0x63
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->CCR3 = maxSpeed; // DC initialize to 99 (50%)
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <main+0x2d4>)
 8000d1e:	881a      	ldrh	r2, [r3, #0]
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <main+0x2d0>)
 8000d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d24:	e00e      	b.n	8000d44 <main+0x2d8>
 8000d26:	bf00      	nop
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020c00 	.word	0x40020c00
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40012400 	.word	0x40012400
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	40000800 	.word	0x40000800
 8000d40:	20000000 	.word	0x20000000
  TIM4->CCR4 = maxSpeed; // DC initialize to 99 (50%)
 8000d44:	4b6a      	ldr	r3, [pc, #424]	; (8000ef0 <main+0x484>)
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	4b6a      	ldr	r3, [pc, #424]	; (8000ef4 <main+0x488>)
 8000d4a:	641a      	str	r2, [r3, #64]	; 0x40

  // Select, or not, IRQ: DIER
  TIM4->DIER = 0x0000; // No IRQ when counting is finished -> CCyIE = 0
 8000d4c:	4b69      	ldr	r3, [pc, #420]	; (8000ef4 <main+0x488>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]

  // Output mode
  TIM4->CCMR1 &= ~(0xFFFF); // Clear CCMR1
 8000d52:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <main+0x488>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a67      	ldr	r2, [pc, #412]	; (8000ef4 <main+0x488>)
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	6193      	str	r3, [r2, #24]
  TIM4->CCMR2 |= (0x6868);     // CCyS = 0 (TOC, PWM)
 8000d5e:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <main+0x488>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a64      	ldr	r2, [pc, #400]	; (8000ef4 <main+0x488>)
 8000d64:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000d68:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000d6c:	61d3      	str	r3, [r2, #28]
                            // OCyM = 110 (PWM starting in 1)
                            // OCyPE = 1 (with preload)
  TIM4->CCER |= 0x1100;      // CCyP = 0 (always in PWM)
 8000d6e:	4b61      	ldr	r3, [pc, #388]	; (8000ef4 <main+0x488>)
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4a60      	ldr	r2, [pc, #384]	; (8000ef4 <main+0x488>)
 8000d74:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8000d78:	6213      	str	r3, [r2, #32]
                            // CCyE = 1 (hardware output activated)

  // Counter enabling
  TIM4->CR1 |= 0x0001;  // CEN = 1 -> Start counter
 8000d7a:	4b5e      	ldr	r3, [pc, #376]	; (8000ef4 <main+0x488>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a5d      	ldr	r2, [pc, #372]	; (8000ef4 <main+0x488>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6013      	str	r3, [r2, #0]
  TIM4->EGR |= 0x0001;  // UG = 1 -> Generate update event
 8000d86:	4b5b      	ldr	r3, [pc, #364]	; (8000ef4 <main+0x488>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a5a      	ldr	r2, [pc, #360]	; (8000ef4 <main+0x488>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6153      	str	r3, [r2, #20]
  TIM4->SR = 0;         // Counter flags cleared
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <main+0x488>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]

  // Enabling ADC1_IRQ at NVIC
  NVIC->ISER[0] |= (1 << 18);
 8000d98:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <main+0x48c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a56      	ldr	r2, [pc, #344]	; (8000ef8 <main+0x48c>)
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da2:	6013      	str	r3, [r2, #0]

  // Enabling TIM2_IRQ at NVIC
  NVIC->ISER[0] |= (1 << 28);
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <main+0x48c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a53      	ldr	r2, [pc, #332]	; (8000ef8 <main+0x48c>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6013      	str	r3, [r2, #0]

  // Enabling TIM3_IRQ at NVIC
  NVIC->ISER[0] |= (1 << 29);
 8000db0:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <main+0x48c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a50      	ldr	r2, [pc, #320]	; (8000ef8 <main+0x48c>)
 8000db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dba:	6013      	str	r3, [r2, #0]

  // Wait for the first received bit
  HAL_UART_Receive_IT(&huart1, received, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	494f      	ldr	r1, [pc, #316]	; (8000efc <main+0x490>)
 8000dc0:	484f      	ldr	r0, [pc, #316]	; (8000f00 <main+0x494>)
 8000dc2:	f002 fc8e 	bl	80036e2 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      if(turnMode == 2) {
 8000dc6:	4b4f      	ldr	r3, [pc, #316]	; (8000f04 <main+0x498>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d12e      	bne.n	8000e2c <main+0x3c0>
        uint8_t answer[7] = {82, 105, 103, 104, 116, 0, 0}; // Transmit that it is going right
 8000dce:	4a4e      	ldr	r2, [pc, #312]	; (8000f08 <main+0x49c>)
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dd8:	6018      	str	r0, [r3, #0]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	8019      	strh	r1, [r3, #0]
 8000dde:	3302      	adds	r3, #2
 8000de0:	0c0a      	lsrs	r2, r1, #16
 8000de2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, answer, 7, 10000);
 8000de4:	f107 0110 	add.w	r1, r7, #16
 8000de8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000dec:	2207      	movs	r2, #7
 8000dee:	4844      	ldr	r0, [pc, #272]	; (8000f00 <main+0x494>)
 8000df0:	f002 fbe5 	bl	80035be <HAL_UART_Transmit>
        lineBreakFunction();
 8000df4:	f7ff fb46 	bl	8000484 <lineBreakFunction>
        while(TIM3->CNT < tim3Time + NINETYDEGREETURN) {    // Turn right 90º
 8000df8:	e001      	b.n	8000dfe <main+0x392>
          goRight();
 8000dfa:	f7ff fc2b 	bl	8000654 <goRight>
        while(TIM3->CNT < tim3Time + NINETYDEGREETURN) {    // Turn right 90º
 8000dfe:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <main+0x4a0>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	4a43      	ldr	r2, [pc, #268]	; (8000f10 <main+0x4a4>)
 8000e04:	8812      	ldrh	r2, [r2, #0]
 8000e06:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d3f5      	bcc.n	8000dfa <main+0x38e>
        }
        TIM2->DIER |= (1 << 1);  // Enable Echo Ch1 (Echo) to start detecting again
 8000e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	60d3      	str	r3, [r2, #12]
        turnMode = 1;
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <main+0x498>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	801a      	strh	r2, [r3, #0]
        cautionMode = 0;
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <main+0x4a8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	801a      	strh	r2, [r3, #0]
 8000e2a:	e7cc      	b.n	8000dc6 <main+0x35a>
      }
      else if(turnMode == 3){
 8000e2c:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <main+0x498>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d12e      	bne.n	8000e92 <main+0x426>
        uint8_t answer[7] = {76, 101, 102, 116, 0, 0, 0};   // Transmit that it is going left
 8000e34:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <main+0x4ac>)
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e3e:	6018      	str	r0, [r3, #0]
 8000e40:	3304      	adds	r3, #4
 8000e42:	8019      	strh	r1, [r3, #0]
 8000e44:	3302      	adds	r3, #2
 8000e46:	0c0a      	lsrs	r2, r1, #16
 8000e48:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, answer, 7, 10000);
 8000e4a:	f107 0108 	add.w	r1, r7, #8
 8000e4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e52:	2207      	movs	r2, #7
 8000e54:	482a      	ldr	r0, [pc, #168]	; (8000f00 <main+0x494>)
 8000e56:	f002 fbb2 	bl	80035be <HAL_UART_Transmit>
        lineBreakFunction();
 8000e5a:	f7ff fb13 	bl	8000484 <lineBreakFunction>
        while(TIM3->CNT < tim3Time + HUNDREDEIGHTYDEGREETURN) {   // Turn left 180º
 8000e5e:	e001      	b.n	8000e64 <main+0x3f8>
          goLeft();
 8000e60:	f7ff fc10 	bl	8000684 <goLeft>
        while(TIM3->CNT < tim3Time + HUNDREDEIGHTYDEGREETURN) {   // Turn left 180º
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <main+0x4a0>)
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	4a29      	ldr	r2, [pc, #164]	; (8000f10 <main+0x4a4>)
 8000e6a:	8812      	ldrh	r2, [r2, #0]
 8000e6c:	f202 32ca 	addw	r2, r2, #970	; 0x3ca
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d3f5      	bcc.n	8000e60 <main+0x3f4>
        }
        TIM2->DIER |= (1 << 1);  // Enable Echo Ch1 (Echo) to start detecting again
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	60d3      	str	r3, [r2, #12]
        turnMode = 1;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <main+0x498>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	801a      	strh	r2, [r3, #0]
        cautionMode = 0;
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <main+0x4a8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	801a      	strh	r2, [r3, #0]
 8000e90:	e799      	b.n	8000dc6 <main+0x35a>
      }
      else if(turnMode == 4){
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <main+0x498>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d195      	bne.n	8000dc6 <main+0x35a>
        uint8_t answer[7] = {76, 101, 102, 116, 0, 0, 0};   // Transmit that it is going left
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <main+0x4ac>)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea2:	6018      	str	r0, [r3, #0]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	8019      	strh	r1, [r3, #0]
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	0c0a      	lsrs	r2, r1, #16
 8000eac:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, answer, 7, 10000);
 8000eae:	4639      	mov	r1, r7
 8000eb0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	4812      	ldr	r0, [pc, #72]	; (8000f00 <main+0x494>)
 8000eb8:	f002 fb81 	bl	80035be <HAL_UART_Transmit>
        lineBreakFunction();
 8000ebc:	f7ff fae2 	bl	8000484 <lineBreakFunction>
        while(TIM3->CNT < tim3Time + NINETYDEGREETURN) {  // Turn left 90º
 8000ec0:	e001      	b.n	8000ec6 <main+0x45a>
          goLeft();
 8000ec2:	f7ff fbdf 	bl	8000684 <goLeft>
        while(TIM3->CNT < tim3Time + NINETYDEGREETURN) {  // Turn left 90º
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <main+0x4a0>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <main+0x4a4>)
 8000ecc:	8812      	ldrh	r2, [r2, #0]
 8000ece:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d3f5      	bcc.n	8000ec2 <main+0x456>
        }
        TIM2->DIER |= (1 << 1);  // Enable Echo Ch1 (Echo) to start detecting again
 8000ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	60d3      	str	r3, [r2, #12]
        turnMode = 1;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <main+0x498>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	801a      	strh	r2, [r3, #0]
      if(turnMode == 2) {
 8000eec:	e76b      	b.n	8000dc6 <main+0x35a>
 8000eee:	bf00      	nop
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	40000800 	.word	0x40000800
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	200001a8 	.word	0x200001a8
 8000f00:	20000154 	.word	0x20000154
 8000f04:	20000002 	.word	0x20000002
 8000f08:	080040c8 	.word	0x080040c8
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	200001a4 	.word	0x200001a4
 8000f14:	200001a0 	.word	0x200001a0
 8000f18:	080040d0 	.word	0x080040d0

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b092      	sub	sp, #72	; 0x48
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2234      	movs	r2, #52	; 0x34
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 f8ac 	bl	8004088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <SystemClock_Config+0x98>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f46:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <SystemClock_Config+0x98>)
 8000f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f56:	2310      	movs	r3, #16
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000f68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fa78 	bl	8002468 <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f7e:	f000 fad3 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
 8000f84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2303      	movs	r3, #3
 8000f88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fd94 	bl	8002ac8 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fa6:	f000 fabf 	bl	8001528 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3748      	adds	r7, #72	; 0x48
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <MX_ADC_Init+0xa8>)
 8000fca:	4a26      	ldr	r2, [pc, #152]	; (8001064 <MX_ADC_Init+0xac>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_ADC_Init+0xa8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_ADC_Init+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_ADC_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_ADC_Init+0xa8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_ADC_Init+0xa8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_ADC_Init+0xa8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_ADC_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_ADC_Init+0xa8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_ADC_Init+0xa8>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_ADC_Init+0xa8>)
 8001008:	2201      	movs	r2, #1
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_ADC_Init+0xa8>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_ADC_Init+0xa8>)
 8001016:	2210      	movs	r2, #16
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_ADC_Init+0xa8>)
 800101c:	2200      	movs	r2, #0
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_ADC_Init+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_ADC_Init+0xa8>)
 800102a:	f000 fc4f 	bl	80018cc <HAL_ADC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001034:	f000 fa78 	bl	8001528 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001038:	2304      	movs	r3, #4
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2301      	movs	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_ADC_Init+0xa8>)
 800104a:	f000 fd85 	bl	8001b58 <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001054:	f000 fa68 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000040 	.word	0x20000040
 8001064:	40012400 	.word	0x40012400

08001068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	463b      	mov	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_TIM2_Init+0x94>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_TIM2_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_TIM2_Init+0x94>)
 800109a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_TIM2_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_TIM2_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ac:	4813      	ldr	r0, [pc, #76]	; (80010fc <MX_TIM2_Init+0x94>)
 80010ae:	f001 ffd1 	bl	8003054 <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b8:	f000 fa36 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_TIM2_Init+0x94>)
 80010ca:	f002 f802 	bl	80030d2 <HAL_TIM_ConfigClockSource>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d4:	f000 fa28 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_TIM2_Init+0x94>)
 80010e6:	f002 f9bf 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f000 fa1a 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000094 	.word	0x20000094

08001100 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_TIM3_Init+0x94>)
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <MX_TIM3_Init+0x98>)
 8001120:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_TIM3_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM3_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_TIM3_Init+0x94>)
 8001130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001134:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_TIM3_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_TIM3_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <MX_TIM3_Init+0x94>)
 8001144:	f001 ff86 	bl	8003054 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800114e:	f000 f9eb 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_TIM3_Init+0x94>)
 8001160:	f001 ffb7 	bl	80030d2 <HAL_TIM_ConfigClockSource>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800116a:	f000 f9dd 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <MX_TIM3_Init+0x94>)
 800117c:	f002 f974 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001186:	f000 f9cf 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000d4 	.word	0x200000d4
 8001198:	40000400 	.word	0x40000400

0800119c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM4_Init+0x94>)
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <MX_TIM4_Init+0x98>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_TIM4_Init+0x94>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_TIM4_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_TIM4_Init+0x94>)
 80011cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_TIM4_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM4_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_TIM4_Init+0x94>)
 80011e0:	f001 ff38 	bl	8003054 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011ea:	f000 f99d 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_TIM4_Init+0x94>)
 80011fc:	f001 ff69 	bl	80030d2 <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 f98f 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_TIM4_Init+0x94>)
 8001218:	f002 f926 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001222:	f000 f981 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000114 	.word	0x20000114
 8001234:	40000800 	.word	0x40000800

08001238 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_USART1_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001244:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001270:	f002 f958 	bl	8003524 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f955 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000154 	.word	0x20000154
 8001288:	40013800 	.word	0x40013800

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a20      	ldr	r2, [pc, #128]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a14      	ldr	r2, [pc, #80]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_GPIO_Init+0x9c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001308:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_GPIO_Init+0xa0>)
 800131a:	f000 ff15 	bl	8002148 <HAL_GPIO_Init>

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40020800 	.word	0x40020800

08001330 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	; 0x40
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, received, 1); // Rx is activated again to store the received bit in received
 8001338:	2201      	movs	r2, #1
 800133a:	4971      	ldr	r1, [pc, #452]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f002 f9d0 	bl	80036e2 <HAL_UART_Receive_IT>
  if(received[0] != '1' && received[0] != '2' && received[0] != '3' && received[0] != '4' && received[0] != '5' && received[0] != '6') {
 8001342:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b31      	cmp	r3, #49	; 0x31
 8001348:	d029      	beq.n	800139e <HAL_UART_RxCpltCallback+0x6e>
 800134a:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b32      	cmp	r3, #50	; 0x32
 8001350:	d025      	beq.n	800139e <HAL_UART_RxCpltCallback+0x6e>
 8001352:	4b6b      	ldr	r3, [pc, #428]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b33      	cmp	r3, #51	; 0x33
 8001358:	d021      	beq.n	800139e <HAL_UART_RxCpltCallback+0x6e>
 800135a:	4b69      	ldr	r3, [pc, #420]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b34      	cmp	r3, #52	; 0x34
 8001360:	d01d      	beq.n	800139e <HAL_UART_RxCpltCallback+0x6e>
 8001362:	4b67      	ldr	r3, [pc, #412]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b35      	cmp	r3, #53	; 0x35
 8001368:	d019      	beq.n	800139e <HAL_UART_RxCpltCallback+0x6e>
 800136a:	4b65      	ldr	r3, [pc, #404]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b36      	cmp	r3, #54	; 0x36
 8001370:	d015      	beq.n	800139e <HAL_UART_RxCpltCallback+0x6e>
    uint8_t answer[7] = {69, 114, 114, 111, 114,0,0}; // Error message is sent if the bit is not what we are expecting
 8001372:	4a64      	ldr	r2, [pc, #400]	; (8001504 <HAL_UART_RxCpltCallback+0x1d4>)
 8001374:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800137c:	6018      	str	r0, [r3, #0]
 800137e:	3304      	adds	r3, #4
 8001380:	8019      	strh	r1, [r3, #0]
 8001382:	3302      	adds	r3, #2
 8001384:	0c0a      	lsrs	r2, r1, #16
 8001386:	701a      	strb	r2, [r3, #0]
    lineBreakFunction();
 8001388:	f7ff f87c 	bl	8000484 <lineBreakFunction>
    HAL_UART_Transmit(&huart1, answer, 7, 10000);
 800138c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001390:	f242 7310 	movw	r3, #10000	; 0x2710
 8001394:	2207      	movs	r2, #7
 8001396:	485c      	ldr	r0, [pc, #368]	; (8001508 <HAL_UART_RxCpltCallback+0x1d8>)
 8001398:	f002 f911 	bl	80035be <HAL_UART_Transmit>
  if(received[0] != '1' && received[0] != '2' && received[0] != '3' && received[0] != '4' && received[0] != '5' && received[0] != '6') {
 800139c:	e0a7      	b.n	80014ee <HAL_UART_RxCpltCallback+0x1be>
  }
  else {    // The bit received is what we expexted and we change the variable globalMode depending on it
    if(received[0] == '1') {   // A 1 is received -> STOP
 800139e:	4b58      	ldr	r3, [pc, #352]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b31      	cmp	r3, #49	; 0x31
 80013a4:	d117      	bne.n	80013d6 <HAL_UART_RxCpltCallback+0xa6>
      globalMode = 1;
 80013a6:	4b59      	ldr	r3, [pc, #356]	; (800150c <HAL_UART_RxCpltCallback+0x1dc>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {83, 116, 111, 112, 112, 101, 100};
 80013ac:	4a58      	ldr	r2, [pc, #352]	; (8001510 <HAL_UART_RxCpltCallback+0x1e0>)
 80013ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b6:	6018      	str	r0, [r3, #0]
 80013b8:	3304      	adds	r3, #4
 80013ba:	8019      	strh	r1, [r3, #0]
 80013bc:	3302      	adds	r3, #2
 80013be:	0c0a      	lsrs	r2, r1, #16
 80013c0:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 80013c2:	f7ff f85f 	bl	8000484 <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 80013c6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80013ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80013ce:	2207      	movs	r2, #7
 80013d0:	484d      	ldr	r0, [pc, #308]	; (8001508 <HAL_UART_RxCpltCallback+0x1d8>)
 80013d2:	f002 f8f4 	bl	80035be <HAL_UART_Transmit>
    }
    if(received[0] == '2') {   // A 2 is received -> FORWARD
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b32      	cmp	r3, #50	; 0x32
 80013dc:	d117      	bne.n	800140e <HAL_UART_RxCpltCallback+0xde>
      globalMode = 2;
 80013de:	4b4b      	ldr	r3, [pc, #300]	; (800150c <HAL_UART_RxCpltCallback+0x1dc>)
 80013e0:	2202      	movs	r2, #2
 80013e2:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {70, 111, 114, 119, 97, 114, 100};
 80013e4:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_UART_RxCpltCallback+0x1e4>)
 80013e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ee:	6018      	str	r0, [r3, #0]
 80013f0:	3304      	adds	r3, #4
 80013f2:	8019      	strh	r1, [r3, #0]
 80013f4:	3302      	adds	r3, #2
 80013f6:	0c0a      	lsrs	r2, r1, #16
 80013f8:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 80013fa:	f7ff f843 	bl	8000484 <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 80013fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001402:	f242 7310 	movw	r3, #10000	; 0x2710
 8001406:	2207      	movs	r2, #7
 8001408:	483f      	ldr	r0, [pc, #252]	; (8001508 <HAL_UART_RxCpltCallback+0x1d8>)
 800140a:	f002 f8d8 	bl	80035be <HAL_UART_Transmit>
    }
    if(received[0] == '3') {   // A 3 is received -> BACK
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b33      	cmp	r3, #51	; 0x33
 8001414:	d117      	bne.n	8001446 <HAL_UART_RxCpltCallback+0x116>
      globalMode = 3;
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_UART_RxCpltCallback+0x1dc>)
 8001418:	2203      	movs	r2, #3
 800141a:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {66, 97, 99, 107, 0, 0, 0};
 800141c:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <HAL_UART_RxCpltCallback+0x1e8>)
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001426:	6018      	str	r0, [r3, #0]
 8001428:	3304      	adds	r3, #4
 800142a:	8019      	strh	r1, [r3, #0]
 800142c:	3302      	adds	r3, #2
 800142e:	0c0a      	lsrs	r2, r1, #16
 8001430:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 8001432:	f7ff f827 	bl	8000484 <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 8001436:	f107 0120 	add.w	r1, r7, #32
 800143a:	f242 7310 	movw	r3, #10000	; 0x2710
 800143e:	2207      	movs	r2, #7
 8001440:	4831      	ldr	r0, [pc, #196]	; (8001508 <HAL_UART_RxCpltCallback+0x1d8>)
 8001442:	f002 f8bc 	bl	80035be <HAL_UART_Transmit>
    }
    if(received[0] == '4') {   // A 4 is received -> RIGHT
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b34      	cmp	r3, #52	; 0x34
 800144c:	d117      	bne.n	800147e <HAL_UART_RxCpltCallback+0x14e>
      globalMode = 4;
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_UART_RxCpltCallback+0x1dc>)
 8001450:	2204      	movs	r2, #4
 8001452:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {82, 105, 103, 104, 116, 0, 0};
 8001454:	4a31      	ldr	r2, [pc, #196]	; (800151c <HAL_UART_RxCpltCallback+0x1ec>)
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800145e:	6018      	str	r0, [r3, #0]
 8001460:	3304      	adds	r3, #4
 8001462:	8019      	strh	r1, [r3, #0]
 8001464:	3302      	adds	r3, #2
 8001466:	0c0a      	lsrs	r2, r1, #16
 8001468:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 800146a:	f7ff f80b 	bl	8000484 <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 800146e:	f107 0118 	add.w	r1, r7, #24
 8001472:	f242 7310 	movw	r3, #10000	; 0x2710
 8001476:	2207      	movs	r2, #7
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <HAL_UART_RxCpltCallback+0x1d8>)
 800147a:	f002 f8a0 	bl	80035be <HAL_UART_Transmit>
    }
    if(received[0] == '5') {   // A 5 is received -> LEFT
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b35      	cmp	r3, #53	; 0x35
 8001484:	d117      	bne.n	80014b6 <HAL_UART_RxCpltCallback+0x186>
      globalMode = 5;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_UART_RxCpltCallback+0x1dc>)
 8001488:	2205      	movs	r2, #5
 800148a:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {76, 101, 102, 116, 0, 0, 0};
 800148c:	4a24      	ldr	r2, [pc, #144]	; (8001520 <HAL_UART_RxCpltCallback+0x1f0>)
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001496:	6018      	str	r0, [r3, #0]
 8001498:	3304      	adds	r3, #4
 800149a:	8019      	strh	r1, [r3, #0]
 800149c:	3302      	adds	r3, #2
 800149e:	0c0a      	lsrs	r2, r1, #16
 80014a0:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 80014a2:	f7fe ffef 	bl	8000484 <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 80014a6:	f107 0110 	add.w	r1, r7, #16
 80014aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80014ae:	2207      	movs	r2, #7
 80014b0:	4815      	ldr	r0, [pc, #84]	; (8001508 <HAL_UART_RxCpltCallback+0x1d8>)
 80014b2:	f002 f884 	bl	80035be <HAL_UART_Transmit>
    }
    if(received[0] == '6') {   // A 6 is received -> AUTOMATIC
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_UART_RxCpltCallback+0x1d0>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b36      	cmp	r3, #54	; 0x36
 80014bc:	d117      	bne.n	80014ee <HAL_UART_RxCpltCallback+0x1be>
      globalMode = 6;
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_UART_RxCpltCallback+0x1dc>)
 80014c0:	2206      	movs	r2, #6
 80014c2:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {65, 117, 116, 111, 110, 111, 109};
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_UART_RxCpltCallback+0x1f4>)
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ce:	6018      	str	r0, [r3, #0]
 80014d0:	3304      	adds	r3, #4
 80014d2:	8019      	strh	r1, [r3, #0]
 80014d4:	3302      	adds	r3, #2
 80014d6:	0c0a      	lsrs	r2, r1, #16
 80014d8:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 80014da:	f7fe ffd3 	bl	8000484 <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 80014de:	f107 0108 	add.w	r1, r7, #8
 80014e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80014e6:	2207      	movs	r2, #7
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <HAL_UART_RxCpltCallback+0x1d8>)
 80014ea:	f002 f868 	bl	80035be <HAL_UART_Transmit>
    }
  }
  lineBreakFunction();
 80014ee:	f7fe ffc9 	bl	8000484 <lineBreakFunction>
  chooseAMode();
 80014f2:	f7fe ffe3 	bl	80004bc <chooseAMode>
}
 80014f6:	bf00      	nop
 80014f8:	3740      	adds	r7, #64	; 0x40
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200001a8 	.word	0x200001a8
 8001504:	080040d8 	.word	0x080040d8
 8001508:	20000154 	.word	0x20000154
 800150c:	20000004 	.word	0x20000004
 8001510:	080040e0 	.word	0x080040e0
 8001514:	080040e8 	.word	0x080040e8
 8001518:	080040f0 	.word	0x080040f0
 800151c:	080040c8 	.word	0x080040c8
 8001520:	080040d0 	.word	0x080040d0
 8001524:	080040f8 	.word	0x080040f8

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_MspInit+0x5c>)
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <HAL_MspInit+0x5c>)
 8001540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001544:	6253      	str	r3, [r2, #36]	; 0x24
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_MspInit+0x5c>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x5c>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_MspInit+0x5c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6213      	str	r3, [r2, #32]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_MspInit+0x5c>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x5c>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x5c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6253      	str	r3, [r2, #36]	; 0x24
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x5c>)
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001582:	2007      	movs	r0, #7
 8001584:	f000 fd20 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_ADC_MspInit+0x74>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d123      	bne.n	80015fe <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_ADC_MspInit+0x78>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_ADC_MspInit+0x78>)
 80015bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c0:	6213      	str	r3, [r2, #32]
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_ADC_MspInit+0x78>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_ADC_MspInit+0x78>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_ADC_MspInit+0x78>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_ADC_MspInit+0x78>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015e6:	2310      	movs	r3, #16
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ea:	2303      	movs	r3, #3
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_ADC_MspInit+0x7c>)
 80015fa:	f000 fda5 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40012400 	.word	0x40012400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d10c      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6253      	str	r3, [r2, #36]	; 0x24
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800163e:	e022      	b.n	8001686 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a13      	ldr	r2, [pc, #76]	; (8001694 <HAL_TIM_Base_MspInit+0x80>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10c      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6253      	str	r3, [r2, #36]	; 0x24
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
}
 8001662:	e010      	b.n	8001686 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_TIM_Base_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10b      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6253      	str	r3, [r2, #36]	; 0x24
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800
 8001694:	40000400 	.word	0x40000400
 8001698:	40000800 	.word	0x40000800

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_UART_MspInit+0x8c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12f      	bne.n	800171e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_UART_MspInit+0x90>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <HAL_UART_MspInit+0x90>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_UART_MspInit+0x90>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_UART_MspInit+0x90>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_UART_MspInit+0x90>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_UART_MspInit+0x90>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ee:	23c0      	movs	r3, #192	; 0xc0
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016fe:	2307      	movs	r3, #7
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <HAL_UART_MspInit+0x94>)
 800170a:	f000 fd1d 	bl	8002148 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2025      	movs	r0, #37	; 0x25
 8001714:	f000 fc63 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001718:	2025      	movs	r0, #37	; 0x25
 800171a:	f000 fc7c 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40013800 	.word	0x40013800
 800172c:	40023800 	.word	0x40023800
 8001730:	40020400 	.word	0x40020400

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f88b 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <USART1_IRQHandler+0x10>)
 800178a:	f001 ffdb 	bl	8003744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000154 	.word	0x20000154

08001798 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	; (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	; (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ca:	f7ff ffe5 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f002 fc37 	bl	8004040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d2:	f7ff f94b 	bl	8000a6c <main>
  bx lr
 80017d6:	4770      	bx	lr
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80017e0:	08004134 	.word	0x08004134
  ldr r2, =_sbss
 80017e4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80017e8:	200001bc 	.word	0x200001bc

080017ec <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <COMP_ACQ_IRQHandler>

080017ee <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 fbe5 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f80e 	bl	8001820 <HAL_InitTick>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	71fb      	strb	r3, [r7, #7]
 800180e:	e001      	b.n	8001814 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001810:	f7ff fe90 	bl	8001534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001814:	79fb      	ldrb	r3, [r7, #7]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_InitTick+0x68>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d022      	beq.n	800187a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_InitTick+0x6c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_InitTick+0x68>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001840:	fbb1 f3f3 	udiv	r3, r1, r3
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fbf2 	bl	8002032 <HAL_SYSTICK_Config>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10f      	bne.n	8001874 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	d809      	bhi.n	800186e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185a:	2200      	movs	r2, #0
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	f04f 30ff 	mov.w	r0, #4294967295
 8001862:	f000 fbbc 	bl	8001fde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_InitTick+0x70>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e007      	b.n	800187e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e004      	b.n	800187e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e001      	b.n	800187e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000020 	.word	0x20000020
 800188c:	20000018 	.word	0x20000018
 8001890:	2000001c 	.word	0x2000001c

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x1c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x20>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_IncTick+0x1c>)
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	200001b8 	.word	0x200001b8
 80018b4:	20000020 	.word	0x20000020

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	200001b8 	.word	0x200001b8

080018cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e127      	b.n	8001b3c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d115      	bne.n	8001926 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001908:	4b8e      	ldr	r3, [pc, #568]	; (8001b44 <HAL_ADC_Init+0x278>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a8d      	ldr	r2, [pc, #564]	; (8001b44 <HAL_ADC_Init+0x278>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	4b8b      	ldr	r3, [pc, #556]	; (8001b44 <HAL_ADC_Init+0x278>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff fe37 	bl	8001594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 80ff 	bne.w	8001b32 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800193c:	f023 0302 	bic.w	r3, r3, #2
 8001940:	f043 0202 	orr.w	r2, r3, #2
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001948:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_ADC_Init+0x27c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	497c      	ldr	r1, [pc, #496]	; (8001b48 <HAL_ADC_Init+0x27c>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001962:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196a:	4619      	mov	r1, r3
 800196c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001970:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001986:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800198c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80019ae:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80019b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b2:	4313      	orrs	r3, r2
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	2b10      	cmp	r3, #16
 80019bc:	d007      	beq.n	80019ce <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80019c6:	4313      	orrs	r3, r2
 80019c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ca:	4313      	orrs	r3, r2
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d8:	2b40      	cmp	r3, #64	; 0x40
 80019da:	d04f      	beq.n	8001a7c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e2:	4313      	orrs	r3, r2
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019ee:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6912      	ldr	r2, [r2, #16]
 80019f4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80019f8:	d003      	beq.n	8001a02 <HAL_ADC_Init+0x136>
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6912      	ldr	r2, [r2, #16]
 80019fe:	2a01      	cmp	r2, #1
 8001a00:	d102      	bne.n	8001a08 <HAL_ADC_Init+0x13c>
 8001a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a06:	e000      	b.n	8001a0a <HAL_ADC_Init+0x13e>
 8001a08:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001a0a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d125      	bne.n	8001a68 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d114      	bne.n	8001a50 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001a30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	fa92 f2a2 	rbit	r2, r2
 8001a38:	617a      	str	r2, [r7, #20]
  return result;
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a4e:	e00b      	b.n	8001a68 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f043 0220 	orr.w	r2, r3, #32
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_ADC_Init+0x280>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_ADC_Init+0x284>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a98:	d003      	beq.n	8001aa2 <HAL_ADC_Init+0x1d6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d119      	bne.n	8001ad6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001ab6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	fa92 f2a2 	rbit	r2, r2
 8001abe:	60fa      	str	r2, [r7, #12]
  return result;
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	fab2 f282 	clz	r2, r2
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	fa03 f202 	lsl.w	r2, r3, r2
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad4:	e007      	b.n	8001ae6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_ADC_Init+0x288>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d10b      	bne.n	8001b0e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	f023 0303 	bic.w	r3, r3, #3
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b0c:	e014      	b.n	8001b38 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f023 0312 	bic.w	r3, r3, #18
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3738      	adds	r7, #56	; 0x38
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40012700 	.word	0x40012700
 8001b4c:	fcfc16ff 	.word	0xfcfc16ff
 8001b50:	c0fff189 	.word	0xc0fff189
 8001b54:	bf80fffe 	.word	0xbf80fffe

08001b58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x20>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e14f      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x2c0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d81c      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b05      	subs	r3, #5
 8001b9a:	221f      	movs	r2, #31
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4019      	ands	r1, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b05      	subs	r3, #5
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc0:	e07e      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d81c      	bhi.n	8001c04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b23      	subs	r3, #35	; 0x23
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4019      	ands	r1, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b23      	subs	r3, #35	; 0x23
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c02:	e05d      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b12      	cmp	r3, #18
 8001c0a:	d81c      	bhi.n	8001c46 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b41      	subs	r3, #65	; 0x41
 8001c1e:	221f      	movs	r2, #31
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4019      	ands	r1, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b41      	subs	r3, #65	; 0x41
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
 8001c44:	e03c      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b18      	cmp	r3, #24
 8001c4c:	d81c      	bhi.n	8001c88 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b5f      	subs	r3, #95	; 0x5f
 8001c60:	221f      	movs	r2, #31
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	4019      	ands	r1, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b5f      	subs	r3, #95	; 0x5f
 8001c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
 8001c86:	e01b      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b7d      	subs	r3, #125	; 0x7d
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4019      	ands	r1, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b7d      	subs	r3, #125	; 0x7d
 8001cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	d81a      	bhi.n	8001cfe <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6959      	ldr	r1, [r3, #20]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2207      	movs	r2, #7
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	4019      	ands	r1, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6898      	ldr	r0, [r3, #8]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	e05d      	b.n	8001dba <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b13      	cmp	r3, #19
 8001d04:	d81c      	bhi.n	8001d40 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6919      	ldr	r1, [r3, #16]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	3b1e      	subs	r3, #30
 8001d18:	2207      	movs	r2, #7
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	4019      	ands	r1, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6898      	ldr	r0, [r3, #8]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b1e      	subs	r3, #30
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	611a      	str	r2, [r3, #16]
 8001d3e:	e03c      	b.n	8001dba <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b1d      	cmp	r3, #29
 8001d46:	d81c      	bhi.n	8001d82 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68d9      	ldr	r1, [r3, #12]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	3b3c      	subs	r3, #60	; 0x3c
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4019      	ands	r1, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6898      	ldr	r0, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	3b3c      	subs	r3, #60	; 0x3c
 8001d74:	fa00 f203 	lsl.w	r2, r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	e01b      	b.n	8001dba <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	3b5a      	subs	r3, #90	; 0x5a
 8001d94:	2207      	movs	r2, #7
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4019      	ands	r1, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6898      	ldr	r0, [r3, #8]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	3b5a      	subs	r3, #90	; 0x5a
 8001dae:	fa00 f203 	lsl.w	r2, r0, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d003      	beq.n	8001dca <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dc6:	2b11      	cmp	r3, #17
 8001dc8:	d121      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_ADC_ConfigChannel+0x2cc>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d11b      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_ADC_ConfigChannel+0x2cc>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_ADC_ConfigChannel+0x2cc>)
 8001ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001de0:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b10      	cmp	r3, #16
 8001de8:	d111      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_ADC_ConfigChannel+0x2d0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <HAL_ADC_ConfigChannel+0x2d4>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	0c9a      	lsrs	r2, r3, #18
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001e00:	e002      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f9      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40012700 	.word	0x40012700
 8001e28:	20000018 	.word	0x20000018
 8001e2c:	431bde83 	.word	0x431bde83

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4906      	ldr	r1, [pc, #24]	; (8001ec8 <__NVIC_EnableIRQ+0x34>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	; (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff90 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff2d 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff42 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff90 	bl	8001f20 <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5f 	bl	8001ecc <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff35 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d008      	beq.n	8002074 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2204      	movs	r2, #4
 8002066:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e022      	b.n	80020ba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 020e 	bic.w	r2, r2, #14
 8002082:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 021c 	and.w	r2, r3, #28
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d005      	beq.n	80020e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2204      	movs	r2, #4
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e029      	b.n	800213c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 020e 	bic.w	r2, r2, #14
 80020f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 021c 	and.w	r2, r3, #28
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
    }
  }
  return status;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800215e:	e160      	b.n	8002422 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8152 	beq.w	800241c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d005      	beq.n	8002190 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800218c:	2b02      	cmp	r3, #2
 800218e:	d130      	bne.n	80021f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80021c6:	2201      	movs	r2, #1
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 0201 	and.w	r2, r3, #1
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d017      	beq.n	800222e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d123      	bne.n	8002282 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	6939      	ldr	r1, [r7, #16]
 800227e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0203 	and.w	r2, r3, #3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80ac 	beq.w	800241c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c4:	4b5e      	ldr	r3, [pc, #376]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a5d      	ldr	r2, [pc, #372]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80022dc:	4a59      	ldr	r2, [pc, #356]	; (8002444 <HAL_GPIO_Init+0x2fc>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a51      	ldr	r2, [pc, #324]	; (8002448 <HAL_GPIO_Init+0x300>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d025      	beq.n	8002354 <HAL_GPIO_Init+0x20c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a50      	ldr	r2, [pc, #320]	; (800244c <HAL_GPIO_Init+0x304>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d01f      	beq.n	8002350 <HAL_GPIO_Init+0x208>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a4f      	ldr	r2, [pc, #316]	; (8002450 <HAL_GPIO_Init+0x308>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d019      	beq.n	800234c <HAL_GPIO_Init+0x204>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4e      	ldr	r2, [pc, #312]	; (8002454 <HAL_GPIO_Init+0x30c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_GPIO_Init+0x200>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a4d      	ldr	r2, [pc, #308]	; (8002458 <HAL_GPIO_Init+0x310>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00d      	beq.n	8002344 <HAL_GPIO_Init+0x1fc>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a4c      	ldr	r2, [pc, #304]	; (800245c <HAL_GPIO_Init+0x314>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <HAL_GPIO_Init+0x1f8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_GPIO_Init+0x318>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_GPIO_Init+0x1f4>
 8002338:	2306      	movs	r3, #6
 800233a:	e00c      	b.n	8002356 <HAL_GPIO_Init+0x20e>
 800233c:	2307      	movs	r3, #7
 800233e:	e00a      	b.n	8002356 <HAL_GPIO_Init+0x20e>
 8002340:	2305      	movs	r3, #5
 8002342:	e008      	b.n	8002356 <HAL_GPIO_Init+0x20e>
 8002344:	2304      	movs	r3, #4
 8002346:	e006      	b.n	8002356 <HAL_GPIO_Init+0x20e>
 8002348:	2303      	movs	r3, #3
 800234a:	e004      	b.n	8002356 <HAL_GPIO_Init+0x20e>
 800234c:	2302      	movs	r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x20e>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_GPIO_Init+0x20e>
 8002354:	2300      	movs	r3, #0
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	f002 0203 	and.w	r2, r2, #3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4093      	lsls	r3, r2
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002366:	4937      	ldr	r1, [pc, #220]	; (8002444 <HAL_GPIO_Init+0x2fc>)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002374:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_GPIO_Init+0x31c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002398:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_GPIO_Init+0x31c>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800239e:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_GPIO_Init+0x31c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023c2:	4a28      	ldr	r2, [pc, #160]	; (8002464 <HAL_GPIO_Init+0x31c>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_GPIO_Init+0x31c>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_GPIO_Init+0x31c>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_GPIO_Init+0x31c>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002416:	4a13      	ldr	r2, [pc, #76]	; (8002464 <HAL_GPIO_Init+0x31c>)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f ae97 	bne.w	8002160 <HAL_GPIO_Init+0x18>
  }
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40010000 	.word	0x40010000
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40021400 	.word	0x40021400
 8002460:	40021800 	.word	0x40021800
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e31d      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247a:	4b94      	ldr	r3, [pc, #592]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002484:	4b91      	ldr	r3, [pc, #580]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d07b      	beq.n	8002592 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d006      	beq.n	80024ae <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d10f      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5e>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ae:	4b87      	ldr	r3, [pc, #540]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d06a      	beq.n	8002590 <HAL_RCC_OscConfig+0x128>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d166      	bne.n	8002590 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e2f7      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x74>
 80024ce:	4b7f      	ldr	r3, [pc, #508]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e02d      	b.n	8002538 <HAL_RCC_OscConfig+0xd0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10c      	bne.n	80024fe <HAL_RCC_OscConfig+0x96>
 80024e4:	4b79      	ldr	r3, [pc, #484]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a78      	ldr	r2, [pc, #480]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b76      	ldr	r3, [pc, #472]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a75      	ldr	r2, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	e01c      	b.n	8002538 <HAL_RCC_OscConfig+0xd0>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b05      	cmp	r3, #5
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0xb8>
 8002506:	4b71      	ldr	r3, [pc, #452]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a70      	ldr	r2, [pc, #448]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b6e      	ldr	r3, [pc, #440]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6d      	ldr	r2, [pc, #436]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0xd0>
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a69      	ldr	r2, [pc, #420]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a66      	ldr	r2, [pc, #408]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff f9ba 	bl	80018b8 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff f9b6 	bl	80018b8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e2ad      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800255a:	4b5c      	ldr	r3, [pc, #368]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0xe0>
 8002566:	e014      	b.n	8002592 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7ff f9a6 	bl	80018b8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002570:	f7ff f9a2 	bl	80018b8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e299      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002582:	4b52      	ldr	r3, [pc, #328]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x108>
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d05a      	beq.n	8002654 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d119      	bne.n	80025de <HAL_RCC_OscConfig+0x176>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d116      	bne.n	80025de <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_OscConfig+0x160>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e276      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b40      	ldr	r3, [pc, #256]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	493d      	ldr	r1, [pc, #244]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025dc:	e03a      	b.n	8002654 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d020      	beq.n	8002628 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e6:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <HAL_RCC_OscConfig+0x268>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff f964 	bl	80018b8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff f960 	bl	80018b8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e257      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	492a      	ldr	r1, [pc, #168]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
 8002626:	e015      	b.n	8002654 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_RCC_OscConfig+0x268>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7ff f943 	bl	80018b8 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002636:	f7ff f93f 	bl	80018b8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e236      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80b8 	beq.w	80027d2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d170      	bne.n	800274a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x218>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e21a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800268c:	429a      	cmp	r2, r3
 800268e:	d921      	bls.n	80026d4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fc7d 	bl	8002f94 <RCC_SetFlashLatencyFromMSIRange>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e208      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4906      	ldr	r1, [pc, #24]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	4901      	ldr	r1, [pc, #4]	; (80026cc <HAL_RCC_OscConfig+0x264>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 80026ca:	e020      	b.n	800270e <HAL_RCC_OscConfig+0x2a6>
 80026cc:	40023800 	.word	0x40023800
 80026d0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d4:	4b99      	ldr	r3, [pc, #612]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4996      	ldr	r1, [pc, #600]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e6:	4b95      	ldr	r3, [pc, #596]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	4991      	ldr	r1, [pc, #580]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fc48 	bl	8002f94 <RCC_SetFlashLatencyFromMSIRange>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e1d3      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	0b5b      	lsrs	r3, r3, #13
 8002714:	3301      	adds	r3, #1
 8002716:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800271e:	4a87      	ldr	r2, [pc, #540]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002720:	6892      	ldr	r2, [r2, #8]
 8002722:	0912      	lsrs	r2, r2, #4
 8002724:	f002 020f 	and.w	r2, r2, #15
 8002728:	4985      	ldr	r1, [pc, #532]	; (8002940 <HAL_RCC_OscConfig+0x4d8>)
 800272a:	5c8a      	ldrb	r2, [r1, r2]
 800272c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800272e:	4a85      	ldr	r2, [pc, #532]	; (8002944 <HAL_RCC_OscConfig+0x4dc>)
 8002730:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <HAL_RCC_OscConfig+0x4e0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f872 	bl	8001820 <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d045      	beq.n	80027d2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	e1b5      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d029      	beq.n	80027a6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002752:	4b7e      	ldr	r3, [pc, #504]	; (800294c <HAL_RCC_OscConfig+0x4e4>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff f8ae 	bl	80018b8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002760:	f7ff f8aa 	bl	80018b8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1a1      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002772:	4b72      	ldr	r3, [pc, #456]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277e:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	496c      	ldr	r1, [pc, #432]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4967      	ldr	r1, [pc, #412]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027a6:	4b69      	ldr	r3, [pc, #420]	; (800294c <HAL_RCC_OscConfig+0x4e4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7ff f884 	bl	80018b8 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b4:	f7ff f880 	bl	80018b8 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e177      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d030      	beq.n	8002840 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e6:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7ff f864 	bl	80018b8 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f4:	f7ff f860 	bl	80018b8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e157      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002806:	4b4d      	ldr	r3, [pc, #308]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x38c>
 8002812:	e015      	b.n	8002840 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002814:	4b4e      	ldr	r3, [pc, #312]	; (8002950 <HAL_RCC_OscConfig+0x4e8>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7ff f84d 	bl	80018b8 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002822:	f7ff f849 	bl	80018b8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e140      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002834:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80b5 	beq.w	80029b8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10d      	bne.n	800287a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	6253      	str	r3, [r2, #36]	; 0x24
 800286a:	4b34      	ldr	r3, [pc, #208]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002876:	2301      	movs	r3, #1
 8002878:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x4ec>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d118      	bne.n	80028b8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002886:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCC_OscConfig+0x4ec>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_RCC_OscConfig+0x4ec>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002892:	f7ff f811 	bl	80018b8 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289a:	f7ff f80d 	bl	80018b8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	; 0x64
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e104      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <HAL_RCC_OscConfig+0x4ec>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x466>
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80028c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80028c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ca:	6353      	str	r3, [r2, #52]	; 0x34
 80028cc:	e02d      	b.n	800292a <HAL_RCC_OscConfig+0x4c2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x488>
 80028d6:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80028dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e0:	6353      	str	r3, [r2, #52]	; 0x34
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	4a15      	ldr	r2, [pc, #84]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80028e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ec:	6353      	str	r3, [r2, #52]	; 0x34
 80028ee:	e01c      	b.n	800292a <HAL_RCC_OscConfig+0x4c2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	d10c      	bne.n	8002912 <HAL_RCC_OscConfig+0x4aa>
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 80028fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002902:	6353      	str	r3, [r2, #52]	; 0x34
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6353      	str	r3, [r2, #52]	; 0x34
 8002910:	e00b      	b.n	800292a <HAL_RCC_OscConfig+0x4c2>
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800291c:	6353      	str	r3, [r2, #52]	; 0x34
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002922:	4a06      	ldr	r2, [pc, #24]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002928:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d024      	beq.n	800297c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7fe ffc1 	bl	80018b8 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002938:	e019      	b.n	800296e <HAL_RCC_OscConfig+0x506>
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	0800410c 	.word	0x0800410c
 8002944:	20000018 	.word	0x20000018
 8002948:	2000001c 	.word	0x2000001c
 800294c:	42470020 	.word	0x42470020
 8002950:	42470680 	.word	0x42470680
 8002954:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe ffae 	bl	80018b8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0a3      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ee      	beq.n	8002958 <HAL_RCC_OscConfig+0x4f0>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297c:	f7fe ff9c 	bl	80018b8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe ff98 	bl	80018b8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e08d      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800299a:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ee      	bne.n	8002984 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029a6:	7ffb      	ldrb	r3, [r7, #31]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b44      	ldr	r3, [pc, #272]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	4a43      	ldr	r2, [pc, #268]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 80029b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d079      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d056      	beq.n	8002a74 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d13b      	bne.n	8002a46 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <HAL_RCC_OscConfig+0x65c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe ff70 	bl	80018b8 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe ff6c 	bl	80018b8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e063      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	4319      	orrs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	430b      	orrs	r3, r1
 8002a12:	492b      	ldr	r1, [pc, #172]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a18:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_RCC_OscConfig+0x65c>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe ff4b 	bl	80018b8 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe ff47 	bl	80018b8 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e03e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x5be>
 8002a44:	e036      	b.n	8002ab4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <HAL_RCC_OscConfig+0x65c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe ff34 	bl	80018b8 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe ff30 	bl	80018b8 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e027      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5ec>
 8002a72:	e01f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e01a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_RCC_OscConfig+0x658>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d10d      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d106      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470060 	.word	0x42470060

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e11a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b8f      	ldr	r3, [pc, #572]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d919      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_ClockConfig+0x34>
 8002af0:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a89      	ldr	r2, [pc, #548]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b87      	ldr	r3, [pc, #540]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 0201 	bic.w	r2, r3, #1
 8002b04:	4985      	ldr	r1, [pc, #532]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0c:	4b83      	ldr	r3, [pc, #524]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0f9      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2a:	4b7d      	ldr	r3, [pc, #500]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	497a      	ldr	r1, [pc, #488]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 808e 	beq.w	8002c66 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b52:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d121      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0d7      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d115      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0cb      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0bf      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b92:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0b7      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	495c      	ldr	r1, [pc, #368]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fe80 	bl	80018b8 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d112      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fe78 	bl	80018b8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e09b      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bda:	4b51      	ldr	r3, [pc, #324]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d1ee      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xfc>
 8002be6:	e03e      	b.n	8002c66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d112      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf2:	f7fe fe61 	bl	80018b8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e084      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c08:	4b45      	ldr	r3, [pc, #276]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d1ee      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0x12a>
 8002c14:	e027      	b.n	8002c66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d11d      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7fe fe4a 	bl	80018b8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e06d      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c36:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d1ee      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x158>
 8002c42:	e010      	b.n	8002c66 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fe fe38 	bl	80018b8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e05b      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ee      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d219      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d105      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1be>
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0201 	bic.w	r2, r3, #1
 8002c8e:	4923      	ldr	r1, [pc, #140]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e034      	b.n	8002d12 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4917      	ldr	r1, [pc, #92]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	490f      	ldr	r1, [pc, #60]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ce6:	f000 f823 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RCC_ClockConfig+0x258>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	490b      	ldr	r1, [pc, #44]	; (8002d24 <HAL_RCC_ClockConfig+0x25c>)
 8002cf8:	5ccb      	ldrb	r3, [r1, r3]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x264>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fd8a 	bl	8001820 <HAL_InitTick>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d10:	7afb      	ldrb	r3, [r7, #11]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00
 8002d20:	40023800 	.word	0x40023800
 8002d24:	0800410c 	.word	0x0800410c
 8002d28:	20000018 	.word	0x20000018
 8002d2c:	2000001c 	.word	0x2000001c

08002d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b092      	sub	sp, #72	; 0x48
 8002d36:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d00d      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x34>
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	f200 80d5 	bhi.w	8002ef8 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d002      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x28>
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0x2e>
 8002d56:	e0cf      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d58:	4b72      	ldr	r3, [pc, #456]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002d5a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002d5c:	e0da      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002d60:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002d62:	e0d7      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d66:	0c9b      	lsrs	r3, r3, #18
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	4b6f      	ldr	r3, [pc, #444]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002d6e:	5c9b      	ldrb	r3, [r3, r2]
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d74:	0d9b      	lsrs	r3, r3, #22
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d05d      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	4611      	mov	r1, r2
 8002d92:	4604      	mov	r4, r0
 8002d94:	460d      	mov	r5, r1
 8002d96:	4622      	mov	r2, r4
 8002d98:	462b      	mov	r3, r5
 8002d9a:	f04f 0000 	mov.w	r0, #0
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	0159      	lsls	r1, r3, #5
 8002da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da8:	0150      	lsls	r0, r2, #5
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4621      	mov	r1, r4
 8002db0:	1a51      	subs	r1, r2, r1
 8002db2:	6139      	str	r1, [r7, #16]
 8002db4:	4629      	mov	r1, r5
 8002db6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc8:	4659      	mov	r1, fp
 8002dca:	018b      	lsls	r3, r1, #6
 8002dcc:	4651      	mov	r1, sl
 8002dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dd2:	4651      	mov	r1, sl
 8002dd4:	018a      	lsls	r2, r1, #6
 8002dd6:	46d4      	mov	ip, sl
 8002dd8:	ebb2 080c 	subs.w	r8, r2, ip
 8002ddc:	4659      	mov	r1, fp
 8002dde:	eb63 0901 	sbc.w	r9, r3, r1
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002df6:	4690      	mov	r8, r2
 8002df8:	4699      	mov	r9, r3
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	eb18 0303 	adds.w	r3, r8, r3
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	462b      	mov	r3, r5
 8002e04:	eb49 0303 	adc.w	r3, r9, r3
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e16:	4629      	mov	r1, r5
 8002e18:	024b      	lsls	r3, r1, #9
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	4604      	mov	r4, r0
 8002e20:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002e24:	4601      	mov	r1, r0
 8002e26:	024a      	lsls	r2, r1, #9
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	2200      	movs	r2, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e38:	f7fd f9a0 	bl	800017c <__aeabi_uldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4613      	mov	r3, r2
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
 8002e44:	e055      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	2200      	movs	r2, #0
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e4e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e52:	4642      	mov	r2, r8
 8002e54:	464b      	mov	r3, r9
 8002e56:	f04f 0000 	mov.w	r0, #0
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	0159      	lsls	r1, r3, #5
 8002e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e64:	0150      	lsls	r0, r2, #5
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	46c4      	mov	ip, r8
 8002e6c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002e70:	4640      	mov	r0, r8
 8002e72:	4649      	mov	r1, r9
 8002e74:	468c      	mov	ip, r1
 8002e76:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e86:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e8a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e8e:	ebb2 040a 	subs.w	r4, r2, sl
 8002e92:	eb63 050b 	sbc.w	r5, r3, fp
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	00eb      	lsls	r3, r5, #3
 8002ea0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea4:	00e2      	lsls	r2, r4, #3
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	461d      	mov	r5, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	18e3      	adds	r3, r4, r3
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	eb45 0303 	adc.w	r3, r5, r3
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	028b      	lsls	r3, r1, #10
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	4604      	mov	r4, r0
 8002ece:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	028a      	lsls	r2, r1, #10
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	2200      	movs	r2, #0
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	61fa      	str	r2, [r7, #28]
 8002ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee6:	f7fd f949 	bl	800017c <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4613      	mov	r3, r2
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002ef6:	e00d      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	0b5b      	lsrs	r3, r3, #13
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	3301      	adds	r3, #1
 8002f08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002f12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3748      	adds	r7, #72	; 0x48
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	007a1200 	.word	0x007a1200
 8002f2c:	08004100 	.word	0x08004100

08002f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000018 	.word	0x20000018

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f48:	f7ff fff2 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4903      	ldr	r1, [pc, #12]	; (8002f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	0800411c 	.word	0x0800411c

08002f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f70:	f7ff ffde 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0adb      	lsrs	r3, r3, #11
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	; (8002f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	0800411c 	.word	0x0800411c

08002f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fa0:	4b29      	ldr	r3, [pc, #164]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d12c      	bne.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fac:	4b26      	ldr	r3, [pc, #152]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e016      	b.n	8002ff2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6253      	str	r3, [r2, #36]	; 0x24
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002fe4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ff8:	d105      	bne.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003000:	d101      	bne.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003002:	2301      	movs	r3, #1
 8003004:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 0201 	bic.w	r2, r3, #1
 8003020:	490b      	ldr	r1, [pc, #44]	; (8003050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	429a      	cmp	r2, r3
 8003034:	d001      	beq.n	800303a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000
 8003050:	40023c00 	.word	0x40023c00

08003054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e031      	b.n	80030ca <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe faca 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 f8e2 	bl	800325c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_ConfigClockSource+0x18>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e0b3      	b.n	8003252 <HAL_TIM_ConfigClockSource+0x180>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003108:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003110:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003122:	d03e      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0xd0>
 8003124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003128:	f200 8087 	bhi.w	800323a <HAL_TIM_ConfigClockSource+0x168>
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	f000 8085 	beq.w	800323e <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003138:	d87f      	bhi.n	800323a <HAL_TIM_ConfigClockSource+0x168>
 800313a:	2b70      	cmp	r3, #112	; 0x70
 800313c:	d01a      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0xa2>
 800313e:	2b70      	cmp	r3, #112	; 0x70
 8003140:	d87b      	bhi.n	800323a <HAL_TIM_ConfigClockSource+0x168>
 8003142:	2b60      	cmp	r3, #96	; 0x60
 8003144:	d050      	beq.n	80031e8 <HAL_TIM_ConfigClockSource+0x116>
 8003146:	2b60      	cmp	r3, #96	; 0x60
 8003148:	d877      	bhi.n	800323a <HAL_TIM_ConfigClockSource+0x168>
 800314a:	2b50      	cmp	r3, #80	; 0x50
 800314c:	d03c      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0xf6>
 800314e:	2b50      	cmp	r3, #80	; 0x50
 8003150:	d873      	bhi.n	800323a <HAL_TIM_ConfigClockSource+0x168>
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d058      	beq.n	8003208 <HAL_TIM_ConfigClockSource+0x136>
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d86f      	bhi.n	800323a <HAL_TIM_ConfigClockSource+0x168>
 800315a:	2b30      	cmp	r3, #48	; 0x30
 800315c:	d064      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0x156>
 800315e:	2b30      	cmp	r3, #48	; 0x30
 8003160:	d86b      	bhi.n	800323a <HAL_TIM_ConfigClockSource+0x168>
 8003162:	2b20      	cmp	r3, #32
 8003164:	d060      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0x156>
 8003166:	2b20      	cmp	r3, #32
 8003168:	d867      	bhi.n	800323a <HAL_TIM_ConfigClockSource+0x168>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d05c      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0x156>
 800316e:	2b10      	cmp	r3, #16
 8003170:	d05a      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003172:	e062      	b.n	800323a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f000 f951 	bl	800342a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003196:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]
      break;
 80031a0:	e04e      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f000 f93a 	bl	800342a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031c4:	609a      	str	r2, [r3, #8]
      break;
 80031c6:	e03b      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f000 f8b1 	bl	800333c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2150      	movs	r1, #80	; 0x50
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f908 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 80031e6:	e02b      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	461a      	mov	r2, r3
 80031f6:	f000 f8cf 	bl	8003398 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2160      	movs	r1, #96	; 0x60
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f8f8 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8003206:	e01b      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	461a      	mov	r2, r3
 8003216:	f000 f891 	bl	800333c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2140      	movs	r1, #64	; 0x40
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f8e8 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8003226:	e00b      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 f8df 	bl	80033f6 <TIM_ITRx_SetConfig>
        break;
 8003238:	e002      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800323a:	bf00      	nop
 800323c:	e000      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800323e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003272:	d00f      	beq.n	8003294 <TIM_Base_SetConfig+0x38>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a2b      	ldr	r2, [pc, #172]	; (8003324 <TIM_Base_SetConfig+0xc8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00b      	beq.n	8003294 <TIM_Base_SetConfig+0x38>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <TIM_Base_SetConfig+0xcc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d007      	beq.n	8003294 <TIM_Base_SetConfig+0x38>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a29      	ldr	r2, [pc, #164]	; (800332c <TIM_Base_SetConfig+0xd0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_Base_SetConfig+0x38>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a28      	ldr	r2, [pc, #160]	; (8003330 <TIM_Base_SetConfig+0xd4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d017      	beq.n	80032de <TIM_Base_SetConfig+0x82>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <TIM_Base_SetConfig+0xc8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <TIM_Base_SetConfig+0x82>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <TIM_Base_SetConfig+0xcc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00f      	beq.n	80032de <TIM_Base_SetConfig+0x82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <TIM_Base_SetConfig+0xd0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00b      	beq.n	80032de <TIM_Base_SetConfig+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <TIM_Base_SetConfig+0xd4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <TIM_Base_SetConfig+0x82>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <TIM_Base_SetConfig+0xd8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d003      	beq.n	80032de <TIM_Base_SetConfig+0x82>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a17      	ldr	r2, [pc, #92]	; (8003338 <TIM_Base_SetConfig+0xdc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d108      	bne.n	80032f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	615a      	str	r2, [r3, #20]
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40000c00 	.word	0x40000c00
 8003330:	40010800 	.word	0x40010800
 8003334:	40010c00 	.word	0x40010c00
 8003338:	40011000 	.word	0x40011000

0800333c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0201 	bic.w	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f023 030a 	bic.w	r3, r3, #10
 8003378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 0210 	bic.w	r2, r3, #16
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	031b      	lsls	r3, r3, #12
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	621a      	str	r2, [r3, #32]
}
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	f043 0307 	orr.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800342a:	b480      	push	{r7}
 800342c:	b087      	sub	sp, #28
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003444:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	021a      	lsls	r2, r3, #8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	431a      	orrs	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4313      	orrs	r3, r2
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	609a      	str	r2, [r3, #8]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e046      	b.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d00e      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a12      	ldr	r2, [pc, #72]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a10      	ldr	r2, [pc, #64]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10c      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40010800 	.word	0x40010800

08003524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e03f      	b.n	80035b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe f8a6 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fc85 	bl	8003e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800357c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800358c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800359c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08a      	sub	sp, #40	; 0x28
 80035c2:	af02      	add	r7, sp, #8
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d17c      	bne.n	80036d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_UART_Transmit+0x2c>
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e075      	b.n	80036da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Transmit+0x3e>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e06e      	b.n	80036da <HAL_UART_Transmit+0x11c>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2221      	movs	r2, #33	; 0x21
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003612:	f7fe f951 	bl	80018b8 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	88fa      	ldrh	r2, [r7, #6]
 8003622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d108      	bne.n	8003640 <HAL_UART_Transmit+0x82>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e003      	b.n	8003648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003644:	2300      	movs	r3, #0
 8003646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003650:	e02a      	b.n	80036a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	2180      	movs	r1, #128	; 0x80
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fa38 	bl	8003ad2 <UART_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e036      	b.n	80036da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10b      	bne.n	800368a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	3302      	adds	r3, #2
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	e007      	b.n	800369a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3301      	adds	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1cf      	bne.n	8003652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2140      	movs	r1, #64	; 0x40
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa08 	bl	8003ad2 <UART_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e006      	b.n	80036da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036d8:	2302      	movs	r3, #2
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	4613      	mov	r3, r2
 80036ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d11d      	bne.n	8003738 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_UART_Receive_IT+0x26>
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e016      	b.n	800373a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_UART_Receive_IT+0x38>
 8003716:	2302      	movs	r3, #2
 8003718:	e00f      	b.n	800373a <HAL_UART_Receive_IT+0x58>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	461a      	mov	r2, r3
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa19 	bl	8003b66 <UART_Start_Receive_IT>
 8003734:	4603      	mov	r3, r0
 8003736:	e000      	b.n	800373a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10d      	bne.n	8003796 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_UART_IRQHandler+0x52>
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fac9 	bl	8003d26 <UART_Receive_IT>
      return;
 8003794:	e17b      	b.n	8003a8e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80b1 	beq.w	8003900 <HAL_UART_IRQHandler+0x1bc>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_UART_IRQHandler+0x70>
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80a6 	beq.w	8003900 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_UART_IRQHandler+0x90>
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_UART_IRQHandler+0xb0>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f043 0202 	orr.w	r2, r3, #2
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_UART_IRQHandler+0xd0>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00f      	beq.n	800383e <HAL_UART_IRQHandler+0xfa>
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <HAL_UART_IRQHandler+0xee>
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0208 	orr.w	r2, r3, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 811e 	beq.w	8003a84 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_UART_IRQHandler+0x11e>
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fa62 	bl	8003d26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_UART_IRQHandler+0x146>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d031      	beq.n	80038ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9a4 	bl	8003bd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d123      	bne.n	80038e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	4a76      	ldr	r2, [pc, #472]	; (8003a94 <HAL_UART_IRQHandler+0x350>)
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fbfe 	bl	80020c4 <HAL_DMA_Abort_IT>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d8:	4610      	mov	r0, r2
 80038da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e00e      	b.n	80038fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8e3 	bl	8003aaa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e00a      	b.n	80038fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8df 	bl	8003aaa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e006      	b.n	80038fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8db 	bl	8003aaa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038fa:	e0c3      	b.n	8003a84 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	bf00      	nop
    return;
 80038fe:	e0c1      	b.n	8003a84 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 80a1 	bne.w	8003a4c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 809b 	beq.w	8003a4c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8095 	beq.w	8003a4c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d14e      	bne.n	80039e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003950:	8a3b      	ldrh	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8098 	beq.w	8003a88 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800395c:	8a3a      	ldrh	r2, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	f080 8092 	bcs.w	8003a88 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8a3a      	ldrh	r2, [r7, #16]
 8003968:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b20      	cmp	r3, #32
 8003972:	d02b      	beq.n	80039cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003982:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0210 	bic.w	r2, r2, #16
 80039c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fb3f 	bl	800204a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f86d 	bl	8003abc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039e2:	e051      	b.n	8003a88 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d047      	beq.n	8003a8c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80039fc:	8a7b      	ldrh	r3, [r7, #18]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d044      	beq.n	8003a8c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a10:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0210 	bic.w	r2, r2, #16
 8003a3e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a40:	8a7b      	ldrh	r3, [r7, #18]
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f839 	bl	8003abc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a4a:	e01f      	b.n	8003a8c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_UART_IRQHandler+0x324>
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f8f9 	bl	8003c58 <UART_Transmit_IT>
    return;
 8003a66:	e012      	b.n	8003a8e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <HAL_UART_IRQHandler+0x34a>
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f93a 	bl	8003cf6 <UART_EndTransmit_IT>
    return;
 8003a82:	e004      	b.n	8003a8e <HAL_UART_IRQHandler+0x34a>
    return;
 8003a84:	bf00      	nop
 8003a86:	e002      	b.n	8003a8e <HAL_UART_IRQHandler+0x34a>
      return;
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_IRQHandler+0x34a>
      return;
 8003a8c:	bf00      	nop
  }
}
 8003a8e:	3728      	adds	r7, #40	; 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	08003c31 	.word	0x08003c31

08003a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae2:	e02c      	b.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d028      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003af2:	f7fd fee1 	bl	80018b8 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d21d      	bcs.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e00f      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4013      	ands	r3, r2
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d0c3      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	4613      	mov	r3, r2
 8003b72:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2222      	movs	r2, #34	; 0x22
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003baa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0220 	orr.w	r2, r2, #32
 8003bca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0210 	bic.w	r2, r2, #16
 8003c16:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff ff2d 	bl	8003aaa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b21      	cmp	r3, #33	; 0x21
 8003c6a:	d13e      	bne.n	8003cea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c74:	d114      	bne.n	8003ca0 <UART_Transmit_IT+0x48>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d110      	bne.n	8003ca0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]
 8003c9e:	e008      	b.n	8003cb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	1c59      	adds	r1, r3, #1
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6211      	str	r1, [r2, #32]
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10f      	bne.n	8003ce6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
  }
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff febe 	bl	8003a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b22      	cmp	r3, #34	; 0x22
 8003d38:	f040 8099 	bne.w	8003e6e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d44:	d117      	bne.n	8003d76 <UART_Receive_IT+0x50>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d113      	bne.n	8003d76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
 8003d74:	e026      	b.n	8003dc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d007      	beq.n	8003d9a <UART_Receive_IT+0x74>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <UART_Receive_IT+0x82>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e008      	b.n	8003dba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d148      	bne.n	8003e6a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0220 	bic.w	r2, r2, #32
 8003de6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d123      	bne.n	8003e60 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0210 	bic.w	r2, r2, #16
 8003e2c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d10a      	bne.n	8003e52 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fe2f 	bl	8003abc <HAL_UARTEx_RxEventCallback>
 8003e5e:	e002      	b.n	8003e66 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fd fa65 	bl	8001330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e002      	b.n	8003e70 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003eb8:	f023 030c 	bic.w	r3, r3, #12
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a55      	ldr	r2, [pc, #340]	; (8004038 <UART_SetConfig+0x1c0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ee6:	f7ff f841 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	e002      	b.n	8003ef4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eee:	f7ff f829 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8003ef2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efc:	d14c      	bne.n	8003f98 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009a      	lsls	r2, r3, #2
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	4a49      	ldr	r2, [pc, #292]	; (800403c <UART_SetConfig+0x1c4>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	0119      	lsls	r1, r3, #4
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009a      	lsls	r2, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f34:	4b41      	ldr	r3, [pc, #260]	; (800403c <UART_SetConfig+0x1c4>)
 8003f36:	fba3 0302 	umull	r0, r3, r3, r2
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2064      	movs	r0, #100	; 0x64
 8003f3e:	fb00 f303 	mul.w	r3, r0, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	3332      	adds	r3, #50	; 0x32
 8003f48:	4a3c      	ldr	r2, [pc, #240]	; (800403c <UART_SetConfig+0x1c4>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f56:	4419      	add	r1, r3
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009a      	lsls	r2, r3, #2
 8003f62:	441a      	add	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f6e:	4b33      	ldr	r3, [pc, #204]	; (800403c <UART_SetConfig+0x1c4>)
 8003f70:	fba3 0302 	umull	r0, r3, r3, r2
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	2064      	movs	r0, #100	; 0x64
 8003f78:	fb00 f303 	mul.w	r3, r0, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	3332      	adds	r3, #50	; 0x32
 8003f82:	4a2e      	ldr	r2, [pc, #184]	; (800403c <UART_SetConfig+0x1c4>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f003 0207 	and.w	r2, r3, #7
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	440a      	add	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f96:	e04a      	b.n	800402e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009a      	lsls	r2, r3, #2
 8003fa2:	441a      	add	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	4a23      	ldr	r2, [pc, #140]	; (800403c <UART_SetConfig+0x1c4>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	0119      	lsls	r1, r3, #4
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009a      	lsls	r2, r3, #2
 8003fc2:	441a      	add	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fce:	4b1b      	ldr	r3, [pc, #108]	; (800403c <UART_SetConfig+0x1c4>)
 8003fd0:	fba3 0302 	umull	r0, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	2064      	movs	r0, #100	; 0x64
 8003fd8:	fb00 f303 	mul.w	r3, r0, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	3332      	adds	r3, #50	; 0x32
 8003fe2:	4a16      	ldr	r2, [pc, #88]	; (800403c <UART_SetConfig+0x1c4>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fee:	4419      	add	r1, r3
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	fbb2 f2f3 	udiv	r2, r2, r3
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <UART_SetConfig+0x1c4>)
 8004008:	fba3 0302 	umull	r0, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	2064      	movs	r0, #100	; 0x64
 8004010:	fb00 f303 	mul.w	r3, r0, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	3332      	adds	r3, #50	; 0x32
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <UART_SetConfig+0x1c4>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	f003 020f 	and.w	r2, r3, #15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	440a      	add	r2, r1
 800402c:	609a      	str	r2, [r3, #8]
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40013800 	.word	0x40013800
 800403c:	51eb851f 	.word	0x51eb851f

08004040 <__libc_init_array>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	2600      	movs	r6, #0
 8004044:	4d0c      	ldr	r5, [pc, #48]	; (8004078 <__libc_init_array+0x38>)
 8004046:	4c0d      	ldr	r4, [pc, #52]	; (800407c <__libc_init_array+0x3c>)
 8004048:	1b64      	subs	r4, r4, r5
 800404a:	10a4      	asrs	r4, r4, #2
 800404c:	42a6      	cmp	r6, r4
 800404e:	d109      	bne.n	8004064 <__libc_init_array+0x24>
 8004050:	f000 f822 	bl	8004098 <_init>
 8004054:	2600      	movs	r6, #0
 8004056:	4d0a      	ldr	r5, [pc, #40]	; (8004080 <__libc_init_array+0x40>)
 8004058:	4c0a      	ldr	r4, [pc, #40]	; (8004084 <__libc_init_array+0x44>)
 800405a:	1b64      	subs	r4, r4, r5
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	42a6      	cmp	r6, r4
 8004060:	d105      	bne.n	800406e <__libc_init_array+0x2e>
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	f855 3b04 	ldr.w	r3, [r5], #4
 8004068:	4798      	blx	r3
 800406a:	3601      	adds	r6, #1
 800406c:	e7ee      	b.n	800404c <__libc_init_array+0xc>
 800406e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004072:	4798      	blx	r3
 8004074:	3601      	adds	r6, #1
 8004076:	e7f2      	b.n	800405e <__libc_init_array+0x1e>
 8004078:	0800412c 	.word	0x0800412c
 800407c:	0800412c 	.word	0x0800412c
 8004080:	0800412c 	.word	0x0800412c
 8004084:	08004130 	.word	0x08004130

08004088 <memset>:
 8004088:	4603      	mov	r3, r0
 800408a:	4402      	add	r2, r0
 800408c:	4293      	cmp	r3, r2
 800408e:	d100      	bne.n	8004092 <memset+0xa>
 8004090:	4770      	bx	lr
 8004092:	f803 1b01 	strb.w	r1, [r3], #1
 8004096:	e7f9      	b.n	800408c <memset+0x4>

08004098 <_init>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	bf00      	nop
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr

080040a4 <_fini>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr
