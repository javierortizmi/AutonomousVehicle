
LAB4_BTTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b30  08002b30  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b38  08002b38  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000020  08002b60  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002b60  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063a0  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165a  00000000  00000000  000263e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00027a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  00028148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015382  00000000  00000000  000287c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a46  00000000  00000000  0003db42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845f0  00000000  00000000  00045588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b4c  00000000  00000000  000c9bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08002acc 	.word	0x08002acc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08002acc 	.word	0x08002acc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <espera>:
// Biblioteca de funciones especiales

void espera(int tiempo) {
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0; i<tiempo; i++);
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	e002      	b.n	8000498 <espera+0x14>
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3301      	adds	r3, #1
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf8      	blt.n	8000492 <espera+0xe>
}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <lineBreakFunction>:
void chooseAMode(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lineBreakFunction(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  lineBreak[0] = 10;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <lineBreakFunction+0x30>)
 80004b2:	220a      	movs	r2, #10
 80004b4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, lineBreak, 1, 10000);
 80004b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80004ba:	2201      	movs	r2, #1
 80004bc:	4907      	ldr	r1, [pc, #28]	; (80004dc <lineBreakFunction+0x30>)
 80004be:	4808      	ldr	r0, [pc, #32]	; (80004e0 <lineBreakFunction+0x34>)
 80004c0:	f001 fd97 	bl	8001ff2 <HAL_UART_Transmit>
  lineBreak[0] = 13;
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <lineBreakFunction+0x30>)
 80004c6:	220d      	movs	r2, #13
 80004c8:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, lineBreak, 1, 10000);
 80004ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80004ce:	2201      	movs	r2, #1
 80004d0:	4902      	ldr	r1, [pc, #8]	; (80004dc <lineBreakFunction+0x30>)
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <lineBreakFunction+0x34>)
 80004d4:	f001 fd8d 	bl	8001ff2 <HAL_UART_Transmit>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000088 	.word	0x20000088
 80004e0:	2000003c 	.word	0x2000003c

080004e4 <chooseAMode>:
void chooseAMode(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  HAL_UART_Transmit(&huart1, choose, 7, 10000);
 80004e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80004ec:	2207      	movs	r2, #7
 80004ee:	4906      	ldr	r1, [pc, #24]	; (8000508 <chooseAMode+0x24>)
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <chooseAMode+0x28>)
 80004f2:	f001 fd7e 	bl	8001ff2 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, aMode, 7, 10000);
 80004f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80004fa:	2207      	movs	r2, #7
 80004fc:	4904      	ldr	r1, [pc, #16]	; (8000510 <chooseAMode+0x2c>)
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <chooseAMode+0x28>)
 8000500:	f001 fd77 	bl	8001ff2 <HAL_UART_Transmit>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000004 	.word	0x20000004
 800050c:	2000003c 	.word	0x2000003c
 8000510:	2000000c 	.word	0x2000000c

08000514 <goForward>:

void goForward(void) {
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11)<<16;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <goForward+0x2c>)
 800051a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800051e:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12)<<16;
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <goForward+0x2c>)
 8000522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000526:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 8);
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <goForward+0x30>)
 800052a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052e:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 9);
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <goForward+0x30>)
 8000532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000536:	619a      	str	r2, [r3, #24]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40020000 	.word	0x40020000
 8000544:	40020400 	.word	0x40020400

08000548 <goBackward>:

void goBackward(void) {
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11);
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <goBackward+0x2c>)
 800054e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000552:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12);
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <goBackward+0x2c>)
 8000556:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800055a:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 8)<<16;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <goBackward+0x30>)
 800055e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000562:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 9)<<16;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <goBackward+0x30>)
 8000566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800056a:	619a      	str	r2, [r3, #24]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40020000 	.word	0x40020000
 8000578:	40020400 	.word	0x40020400

0800057c <Stop>:

void Stop(void) {
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11)<<16;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <Stop+0x2c>)
 8000582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000586:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12)<<16;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <Stop+0x2c>)
 800058a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800058e:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 8)<<16;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <Stop+0x30>)
 8000592:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000596:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 9)<<16;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <Stop+0x30>)
 800059a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800059e:	619a      	str	r2, [r3, #24]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40020400 	.word	0x40020400

080005b0 <goRight>:

void goRight(void) {
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11);
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <goRight+0x2c>)
 80005b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005ba:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12)<<16;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <goRight+0x2c>)
 80005be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c2:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 8)<<16;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <goRight+0x30>)
 80005c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005ca:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 9);
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <goRight+0x30>)
 80005ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d2:	619a      	str	r2, [r3, #24]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40020400 	.word	0x40020400

080005e4 <goLeft>:

void goLeft(void) {
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  GPIOA->BSRR = (1 << 11)<<16;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <goLeft+0x2c>)
 80005ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ee:	619a      	str	r2, [r3, #24]
  GPIOA->BSRR = (1 << 12);
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <goLeft+0x2c>)
 80005f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005f6:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 8);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <goLeft+0x30>)
 80005fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005fe:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1 << 9)<<16;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <goLeft+0x30>)
 8000602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000606:	619a      	str	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40020000 	.word	0x40020000
 8000614:	40020400 	.word	0x40020400

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fb03 	bl	8000c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f86c 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f8e2 	bl	80007ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000628:	f000 f8b6 	bl	8000798 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // MOTOR 1 CONFIG
  GPIOB->MODER &= ~(1 << (8*2 +1));
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <main+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a2c      	ldr	r2, [pc, #176]	; (80006e4 <main+0xcc>)
 8000632:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000636:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (1 << (8*2));
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <main+0xcc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <main+0xcc>)
 800063e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000642:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~(1 << (11*2 +1));  // PA11 as Digital Output(01)
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <main+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <main+0xd0>)
 800064a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800064e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (11*2));
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <main+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a24      	ldr	r2, [pc, #144]	; (80006e8 <main+0xd0>)
 8000656:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800065a:	6013      	str	r3, [r2, #0]

  // MOTOR 2 CONFIG
  GPIOB->MODER &= ~(1 << (9*2 +1));
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <main+0xcc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <main+0xcc>)
 8000662:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000666:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (1 << (9*2));
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <main+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <main+0xcc>)
 800066e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000672:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~(1 << (12*2 +1));  // PA12 as Digital Output(01)
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <main+0xd0>)
 800067a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800067e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (12*2));
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <main+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <main+0xd0>)
 8000686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800068a:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(&huart1, received, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	4917      	ldr	r1, [pc, #92]	; (80006ec <main+0xd4>)
 8000690:	4817      	ldr	r0, [pc, #92]	; (80006f0 <main+0xd8>)
 8000692:	f001 fd40 	bl	8002116 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(mode == 1) {
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <main+0xdc>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d102      	bne.n	80006a4 <main+0x8c>
      Stop();
 800069e:	f7ff ff6d 	bl	800057c <Stop>
 80006a2:	e01a      	b.n	80006da <main+0xc2>
    }
    else if(mode == 2) {
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <main+0xdc>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d102      	bne.n	80006b2 <main+0x9a>
      goForward();
 80006ac:	f7ff ff32 	bl	8000514 <goForward>
 80006b0:	e013      	b.n	80006da <main+0xc2>
    }
    else if(mode == 3) {
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <main+0xdc>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d102      	bne.n	80006c0 <main+0xa8>
      goBackward();
 80006ba:	f7ff ff45 	bl	8000548 <goBackward>
 80006be:	e00c      	b.n	80006da <main+0xc2>
    }
    else if(mode == 4) {
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <main+0xdc>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	d102      	bne.n	80006ce <main+0xb6>
      goRight();
 80006c8:	f7ff ff72 	bl	80005b0 <goRight>
 80006cc:	e005      	b.n	80006da <main+0xc2>
    }
    else if(mode == 5) {
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <main+0xdc>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	d101      	bne.n	80006da <main+0xc2>
      goLeft();
 80006d6:	f7ff ff85 	bl	80005e4 <goLeft>
    }

    espera(100000);
 80006da:	4807      	ldr	r0, [pc, #28]	; (80006f8 <main+0xe0>)
 80006dc:	f7ff fed2 	bl	8000484 <espera>
    if(mode == 1) {
 80006e0:	e7d9      	b.n	8000696 <main+0x7e>
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020000 	.word	0x40020000
 80006ec:	20000080 	.word	0x20000080
 80006f0:	2000003c 	.word	0x2000003c
 80006f4:	20000000 	.word	0x20000000
 80006f8:	000186a0 	.word	0x000186a0

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b092      	sub	sp, #72	; 0x48
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f9d6 	bl	8002abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemClock_Config+0x98>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemClock_Config+0x98>)
 8000728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800072c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072e:	2302      	movs	r3, #2
 8000730:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2310      	movs	r3, #16
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073e:	2300      	movs	r3, #0
 8000740:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000742:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000748:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fe0a 	bl	800136c <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800075e:	f000 f983 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2303      	movs	r3, #3
 8000768:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	2101      	movs	r1, #1
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f926 	bl	80019cc <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000786:	f000 f96f 	bl	8000a68 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3748      	adds	r7, #72	; 0x48
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f001 fbc2 	bl	8001f58 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f945 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000003c 	.word	0x2000003c
 80007e8:	40013800 	.word	0x40013800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a35      	ldr	r2, [pc, #212]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_GPIO_Init+0xf0>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a2f      	ldr	r2, [pc, #188]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000820:	f043 0320 	orr.w	r3, r3, #32
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 0320 	and.w	r3, r3, #32
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a29      	ldr	r2, [pc, #164]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_GPIO_Init+0xf0>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000868:	481d      	ldr	r0, [pc, #116]	; (80008e0 <MX_GPIO_Init+0xf4>)
 800086a:	f000 fd67 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000874:	481b      	ldr	r0, [pc, #108]	; (80008e4 <MX_GPIO_Init+0xf8>)
 8000876:	f000 fd61 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000880:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4815      	ldr	r0, [pc, #84]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000892:	f000 fbc3 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8000896:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_GPIO_Init+0xf4>)
 80008b0:	f000 fbb4 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0xf8>)
 80008ce:	f000 fba5 	bl	800101c <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020800 	.word	0x40020800

080008ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, received, 1); // Vuelve a activar Rx por haber acabado el buffer
 80008f4:	2201      	movs	r2, #1
 80008f6:	4954      	ldr	r1, [pc, #336]	; (8000a48 <HAL_UART_RxCpltCallback+0x15c>)
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f001 fc0c 	bl	8002116 <HAL_UART_Receive_IT>


    if(received[0] == '1') {   // A 1 is received -> STOP
 80008fe:	4b52      	ldr	r3, [pc, #328]	; (8000a48 <HAL_UART_RxCpltCallback+0x15c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b31      	cmp	r3, #49	; 0x31
 8000904:	d11b      	bne.n	800093e <HAL_UART_RxCpltCallback+0x52>
      mode = 1;
 8000906:	4b51      	ldr	r3, [pc, #324]	; (8000a4c <HAL_UART_RxCpltCallback+0x160>)
 8000908:	2201      	movs	r2, #1
 800090a:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {83, 116, 111, 112, 112, 101, 100};
 800090c:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <HAL_UART_RxCpltCallback+0x164>)
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000916:	6018      	str	r0, [r3, #0]
 8000918:	3304      	adds	r3, #4
 800091a:	8019      	strh	r1, [r3, #0]
 800091c:	3302      	adds	r3, #2
 800091e:	0c0a      	lsrs	r2, r1, #16
 8000920:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 8000922:	f7ff fdc3 	bl	80004ac <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 8000926:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800092a:	f242 7310 	movw	r3, #10000	; 0x2710
 800092e:	2207      	movs	r2, #7
 8000930:	4848      	ldr	r0, [pc, #288]	; (8000a54 <HAL_UART_RxCpltCallback+0x168>)
 8000932:	f001 fb5e 	bl	8001ff2 <HAL_UART_Transmit>
      lineBreakFunction();
 8000936:	f7ff fdb9 	bl	80004ac <lineBreakFunction>
      chooseAMode();
 800093a:	f7ff fdd3 	bl	80004e4 <chooseAMode>
    }
    if(received[0] == '2') {   // A 2 is received -> FORWARD
 800093e:	4b42      	ldr	r3, [pc, #264]	; (8000a48 <HAL_UART_RxCpltCallback+0x15c>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b32      	cmp	r3, #50	; 0x32
 8000944:	d11b      	bne.n	800097e <HAL_UART_RxCpltCallback+0x92>
      mode = 2;
 8000946:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <HAL_UART_RxCpltCallback+0x160>)
 8000948:	2202      	movs	r2, #2
 800094a:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {70, 111, 114, 119, 97, 114, 100};
 800094c:	4a42      	ldr	r2, [pc, #264]	; (8000a58 <HAL_UART_RxCpltCallback+0x16c>)
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000956:	6018      	str	r0, [r3, #0]
 8000958:	3304      	adds	r3, #4
 800095a:	8019      	strh	r1, [r3, #0]
 800095c:	3302      	adds	r3, #2
 800095e:	0c0a      	lsrs	r2, r1, #16
 8000960:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 8000962:	f7ff fda3 	bl	80004ac <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 8000966:	f107 0120 	add.w	r1, r7, #32
 800096a:	f242 7310 	movw	r3, #10000	; 0x2710
 800096e:	2207      	movs	r2, #7
 8000970:	4838      	ldr	r0, [pc, #224]	; (8000a54 <HAL_UART_RxCpltCallback+0x168>)
 8000972:	f001 fb3e 	bl	8001ff2 <HAL_UART_Transmit>
      lineBreakFunction();
 8000976:	f7ff fd99 	bl	80004ac <lineBreakFunction>
      chooseAMode();
 800097a:	f7ff fdb3 	bl	80004e4 <chooseAMode>
    }
    if(received[0] == '3') {   // A 3 is received -> BACK
 800097e:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <HAL_UART_RxCpltCallback+0x15c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b33      	cmp	r3, #51	; 0x33
 8000984:	d11b      	bne.n	80009be <HAL_UART_RxCpltCallback+0xd2>
      mode = 3;
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <HAL_UART_RxCpltCallback+0x160>)
 8000988:	2203      	movs	r2, #3
 800098a:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {66, 97, 99, 107, 0, 0, 0};
 800098c:	4a33      	ldr	r2, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x170>)
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000996:	6018      	str	r0, [r3, #0]
 8000998:	3304      	adds	r3, #4
 800099a:	8019      	strh	r1, [r3, #0]
 800099c:	3302      	adds	r3, #2
 800099e:	0c0a      	lsrs	r2, r1, #16
 80009a0:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 80009a2:	f7ff fd83 	bl	80004ac <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 80009a6:	f107 0118 	add.w	r1, r7, #24
 80009aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80009ae:	2207      	movs	r2, #7
 80009b0:	4828      	ldr	r0, [pc, #160]	; (8000a54 <HAL_UART_RxCpltCallback+0x168>)
 80009b2:	f001 fb1e 	bl	8001ff2 <HAL_UART_Transmit>
      lineBreakFunction();
 80009b6:	f7ff fd79 	bl	80004ac <lineBreakFunction>
      chooseAMode();
 80009ba:	f7ff fd93 	bl	80004e4 <chooseAMode>
    }
    if(received[0] == '4') {   // A 4 is received -> RIGHT
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <HAL_UART_RxCpltCallback+0x15c>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b34      	cmp	r3, #52	; 0x34
 80009c4:	d11b      	bne.n	80009fe <HAL_UART_RxCpltCallback+0x112>
      mode = 4;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <HAL_UART_RxCpltCallback+0x160>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {82, 105, 103, 104, 116, 0, 0};
 80009cc:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <HAL_UART_RxCpltCallback+0x174>)
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d6:	6018      	str	r0, [r3, #0]
 80009d8:	3304      	adds	r3, #4
 80009da:	8019      	strh	r1, [r3, #0]
 80009dc:	3302      	adds	r3, #2
 80009de:	0c0a      	lsrs	r2, r1, #16
 80009e0:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 80009e2:	f7ff fd63 	bl	80004ac <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 80009e6:	f107 0110 	add.w	r1, r7, #16
 80009ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80009ee:	2207      	movs	r2, #7
 80009f0:	4818      	ldr	r0, [pc, #96]	; (8000a54 <HAL_UART_RxCpltCallback+0x168>)
 80009f2:	f001 fafe 	bl	8001ff2 <HAL_UART_Transmit>
      lineBreakFunction();
 80009f6:	f7ff fd59 	bl	80004ac <lineBreakFunction>
      chooseAMode();
 80009fa:	f7ff fd73 	bl	80004e4 <chooseAMode>
    }
    if(received[0] == '5') {   // A 5 is received -> LEFT
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_UART_RxCpltCallback+0x15c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b35      	cmp	r3, #53	; 0x35
 8000a04:	d11b      	bne.n	8000a3e <HAL_UART_RxCpltCallback+0x152>
      mode = 5;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_RxCpltCallback+0x160>)
 8000a08:	2205      	movs	r2, #5
 8000a0a:	801a      	strh	r2, [r3, #0]
      uint8_t answer[7] = {76, 101, 102, 116, 0, 0, 0};
 8000a0c:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <HAL_UART_RxCpltCallback+0x178>)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a16:	6018      	str	r0, [r3, #0]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	8019      	strh	r1, [r3, #0]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	0c0a      	lsrs	r2, r1, #16
 8000a20:	701a      	strb	r2, [r3, #0]
      lineBreakFunction();
 8000a22:	f7ff fd43 	bl	80004ac <lineBreakFunction>
      HAL_UART_Transmit(&huart1, answer, 7, 10000);
 8000a26:	f107 0108 	add.w	r1, r7, #8
 8000a2a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a2e:	2207      	movs	r2, #7
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <HAL_UART_RxCpltCallback+0x168>)
 8000a32:	f001 fade 	bl	8001ff2 <HAL_UART_Transmit>
      lineBreakFunction();
 8000a36:	f7ff fd39 	bl	80004ac <lineBreakFunction>
      chooseAMode();
 8000a3a:	f7ff fd53 	bl	80004e4 <chooseAMode>
    }

}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	; 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000080 	.word	0x20000080
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	08002ae4 	.word	0x08002ae4
 8000a54:	2000003c 	.word	0x2000003c
 8000a58:	08002aec 	.word	0x08002aec
 8000a5c:	08002af4 	.word	0x08002af4
 8000a60:	08002afc 	.word	0x08002afc
 8000a64:	08002b04 	.word	0x08002b04

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a84:	6253      	str	r3, [r2, #36]	; 0x24
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a94:	6a1b      	ldr	r3, [r3, #32]
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6213      	str	r3, [r2, #32]
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6253      	str	r3, [r2, #36]	; 0x24
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac2:	2007      	movs	r0, #7
 8000ac4:	f000 f9ea 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <HAL_UART_MspInit+0x8c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12f      	bne.n	8000b56 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_UART_MspInit+0x90>)
 8000af8:	6a1b      	ldr	r3, [r3, #32]
 8000afa:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <HAL_UART_MspInit+0x90>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6213      	str	r3, [r2, #32]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0x90>)
 8000b04:	6a1b      	ldr	r3, [r3, #32]
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_UART_MspInit+0x90>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <HAL_UART_MspInit+0x90>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_UART_MspInit+0x90>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b26:	23c0      	movs	r3, #192	; 0xc0
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b36:	2307      	movs	r3, #7
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <HAL_UART_MspInit+0x94>)
 8000b42:	f000 fa6b 	bl	800101c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2025      	movs	r0, #37	; 0x25
 8000b4c:	f000 f9b1 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b50:	2025      	movs	r0, #37	; 0x25
 8000b52:	f000 f9ca 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40013800 	.word	0x40013800
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f88b 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <USART1_IRQHandler+0x10>)
 8000bc2:	f001 fad9 	bl	8002178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000003c 	.word	0x2000003c

08000bd0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bde:	490d      	ldr	r1, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf4:	4c0a      	ldr	r4, [pc, #40]	; (8000c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c02:	f7ff ffe5 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f001 ff35 	bl	8002a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0a:	f7ff fd05 	bl	8000618 <main>
  bx lr
 8000c0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c18:	08002b40 	.word	0x08002b40
  ldr r2, =_sbss
 8000c1c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c20:	20000094 	.word	0x20000094

08000c24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_IRQHandler>

08000c26 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f933 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f80e 	bl	8000c58 <HAL_InitTick>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	e001      	b.n	8000c4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c48:	f7ff ff14 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_InitTick+0x68>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d022      	beq.n	8000cb2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_InitTick+0x6c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_InitTick+0x68>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f940 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10f      	bne.n	8000cac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b0f      	cmp	r3, #15
 8000c90:	d809      	bhi.n	8000ca6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c92:	2200      	movs	r2, #0
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9a:	f000 f90a 	bl	8000eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_InitTick+0x70>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e004      	b.n	8000cb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e001      	b.n	8000cb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000001c 	.word	0x2000001c
 8000cc4:	20000014 	.word	0x20000014
 8000cc8:	20000018 	.word	0x20000018

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cdc:	6013      	str	r3, [r2, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000090 	.word	0x20000090
 8000cec:	2000001c 	.word	0x2000001c

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	20000090 	.word	0x20000090

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <__NVIC_EnableIRQ+0x34>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff90 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff2d 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff42 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff90 	bl	8000df4 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5f 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff35 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d008      	beq.n	8000f48 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2204      	movs	r2, #4
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e022      	b.n	8000f8e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 020e 	bic.w	r2, r2, #14
 8000f56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0201 	bic.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 021c 	and.w	r2, r3, #28
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d005      	beq.n	8000fbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e029      	b.n	8001010 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020e 	bic.w	r2, r2, #14
 8000fca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 021c 	and.w	r2, r3, #28
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fa01 f202 	lsl.w	r2, r1, r2
 8000fee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	4798      	blx	r3
    }
  }
  return status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001032:	e160      	b.n	80012f6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8152 	beq.w	80012f0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001060:	2b02      	cmp	r3, #2
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 0201 	and.w	r2, r3, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d017      	beq.n	8001102 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	6939      	ldr	r1, [r7, #16]
 8001152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0203 	and.w	r2, r3, #3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80ac 	beq.w	80012f0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	4b5e      	ldr	r3, [pc, #376]	; (8001314 <HAL_GPIO_Init+0x2f8>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4a5d      	ldr	r2, [pc, #372]	; (8001314 <HAL_GPIO_Init+0x2f8>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6213      	str	r3, [r2, #32]
 80011a4:	4b5b      	ldr	r3, [pc, #364]	; (8001314 <HAL_GPIO_Init+0x2f8>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80011b0:	4a59      	ldr	r2, [pc, #356]	; (8001318 <HAL_GPIO_Init+0x2fc>)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a51      	ldr	r2, [pc, #324]	; (800131c <HAL_GPIO_Init+0x300>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d025      	beq.n	8001228 <HAL_GPIO_Init+0x20c>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a50      	ldr	r2, [pc, #320]	; (8001320 <HAL_GPIO_Init+0x304>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d01f      	beq.n	8001224 <HAL_GPIO_Init+0x208>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <HAL_GPIO_Init+0x308>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d019      	beq.n	8001220 <HAL_GPIO_Init+0x204>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x30c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d013      	beq.n	800121c <HAL_GPIO_Init+0x200>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x310>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d00d      	beq.n	8001218 <HAL_GPIO_Init+0x1fc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x314>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d007      	beq.n	8001214 <HAL_GPIO_Init+0x1f8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x318>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d101      	bne.n	8001210 <HAL_GPIO_Init+0x1f4>
 800120c:	2306      	movs	r3, #6
 800120e:	e00c      	b.n	800122a <HAL_GPIO_Init+0x20e>
 8001210:	2307      	movs	r3, #7
 8001212:	e00a      	b.n	800122a <HAL_GPIO_Init+0x20e>
 8001214:	2305      	movs	r3, #5
 8001216:	e008      	b.n	800122a <HAL_GPIO_Init+0x20e>
 8001218:	2304      	movs	r3, #4
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x20e>
 800121c:	2303      	movs	r3, #3
 800121e:	e004      	b.n	800122a <HAL_GPIO_Init+0x20e>
 8001220:	2302      	movs	r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x20e>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_GPIO_Init+0x20e>
 8001228:	2300      	movs	r3, #0
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	f002 0203 	and.w	r2, r2, #3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4093      	lsls	r3, r2
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800123a:	4937      	ldr	r1, [pc, #220]	; (8001318 <HAL_GPIO_Init+0x2fc>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001248:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_GPIO_Init+0x31c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800126c:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_GPIO_Init+0x31c>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <HAL_GPIO_Init+0x31c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <HAL_GPIO_Init+0x31c>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_GPIO_Init+0x31c>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_GPIO_Init+0x31c>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_GPIO_Init+0x31c>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_GPIO_Init+0x31c>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	f47f ae97 	bne.w	8001034 <HAL_GPIO_Init+0x18>
  }
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40010000 	.word	0x40010000
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e31d      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137e:	4b94      	ldr	r3, [pc, #592]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001388:	4b91      	ldr	r3, [pc, #580]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d07b      	beq.n	8001496 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d006      	beq.n	80013b2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d10f      	bne.n	80013ca <HAL_RCC_OscConfig+0x5e>
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d10b      	bne.n	80013ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	4b87      	ldr	r3, [pc, #540]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d06a      	beq.n	8001494 <HAL_RCC_OscConfig+0x128>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d166      	bne.n	8001494 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e2f7      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x74>
 80013d2:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7e      	ldr	r2, [pc, #504]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e02d      	b.n	800143c <HAL_RCC_OscConfig+0xd0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x96>
 80013e8:	4b79      	ldr	r3, [pc, #484]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a78      	ldr	r2, [pc, #480]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a75      	ldr	r2, [pc, #468]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e01c      	b.n	800143c <HAL_RCC_OscConfig+0xd0>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0xb8>
 800140a:	4b71      	ldr	r3, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a70      	ldr	r2, [pc, #448]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6d      	ldr	r2, [pc, #436]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xd0>
 8001424:	4b6a      	ldr	r3, [pc, #424]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a69      	ldr	r2, [pc, #420]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a66      	ldr	r2, [pc, #408]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fc54 	bl	8000cf0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fc50 	bl	8000cf0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e2ad      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145e:	4b5c      	ldr	r3, [pc, #368]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xe0>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fc40 	bl	8000cf0 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fc3c 	bl	8000cf0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e299      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001486:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x108>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d05a      	beq.n	8001558 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d119      	bne.n	80014e2 <HAL_RCC_OscConfig+0x176>
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d116      	bne.n	80014e2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x160>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e276      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	493d      	ldr	r1, [pc, #244]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e0:	e03a      	b.n	8001558 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d020      	beq.n	800152c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <HAL_RCC_OscConfig+0x268>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fbfe 	bl	8000cf0 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f8:	f7ff fbfa 	bl	8000cf0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e257      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	492a      	ldr	r1, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
 800152a:	e015      	b.n	8001558 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <HAL_RCC_OscConfig+0x268>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fbdd 	bl	8000cf0 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fbd9 	bl	8000cf0 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e236      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80b8 	beq.w	80016d6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d170      	bne.n	800164e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_OscConfig+0x218>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e21a      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1a      	ldr	r2, [r3, #32]
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001590:	429a      	cmp	r2, r3
 8001592:	d921      	bls.n	80015d8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fc7d 	bl	8001e98 <RCC_SetFlashLatencyFromMSIRange>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e208      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4906      	ldr	r1, [pc, #24]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	061b      	lsls	r3, r3, #24
 80015c8:	4901      	ldr	r1, [pc, #4]	; (80015d0 <HAL_RCC_OscConfig+0x264>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
 80015ce:	e020      	b.n	8001612 <HAL_RCC_OscConfig+0x2a6>
 80015d0:	40023800 	.word	0x40023800
 80015d4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d8:	4b99      	ldr	r3, [pc, #612]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4996      	ldr	r1, [pc, #600]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ea:	4b95      	ldr	r3, [pc, #596]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	061b      	lsls	r3, r3, #24
 80015f8:	4991      	ldr	r1, [pc, #580]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fc48 	bl	8001e98 <RCC_SetFlashLatencyFromMSIRange>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1d3      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	0b5b      	lsrs	r3, r3, #13
 8001618:	3301      	adds	r3, #1
 800161a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001622:	4a87      	ldr	r2, [pc, #540]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001624:	6892      	ldr	r2, [r2, #8]
 8001626:	0912      	lsrs	r2, r2, #4
 8001628:	f002 020f 	and.w	r2, r2, #15
 800162c:	4985      	ldr	r1, [pc, #532]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 800162e:	5c8a      	ldrb	r2, [r1, r2]
 8001630:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001632:	4a85      	ldr	r2, [pc, #532]	; (8001848 <HAL_RCC_OscConfig+0x4dc>)
 8001634:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x4e0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb0c 	bl	8000c58 <HAL_InitTick>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d045      	beq.n	80016d6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	e1b5      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d029      	beq.n	80016aa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001656:	4b7e      	ldr	r3, [pc, #504]	; (8001850 <HAL_RCC_OscConfig+0x4e4>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb48 	bl	8000cf0 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001664:	f7ff fb44 	bl	8000cf0 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1a1      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001676:	4b72      	ldr	r3, [pc, #456]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001682:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	496c      	ldr	r1, [pc, #432]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	4967      	ldr	r1, [pc, #412]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016aa:	4b69      	ldr	r3, [pc, #420]	; (8001850 <HAL_RCC_OscConfig+0x4e4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb1e 	bl	8000cf0 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b8:	f7ff fb1a 	bl	8000cf0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e177      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d030      	beq.n	8001744 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fafe 	bl	8000cf0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fafa 	bl	8000cf0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e157      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800170a:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x38c>
 8001716:	e015      	b.n	8001744 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <HAL_RCC_OscConfig+0x4e8>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff fae7 	bl	8000cf0 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff fae3 	bl	8000cf0 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e140      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001738:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80b5 	beq.w	80018bc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001756:	4b3a      	ldr	r3, [pc, #232]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b37      	ldr	r3, [pc, #220]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	4a36      	ldr	r2, [pc, #216]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	6253      	str	r3, [r2, #36]	; 0x24
 800176e:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177a:	2301      	movs	r3, #1
 800177c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x4ec>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d118      	bne.n	80017bc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x4ec>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_RCC_OscConfig+0x4ec>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001796:	f7ff faab 	bl	8000cf0 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179e:	f7ff faa7 	bl	8000cf0 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e104      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <HAL_RCC_OscConfig+0x4ec>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x466>
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	6353      	str	r3, [r2, #52]	; 0x34
 80017d0:	e02d      	b.n	800182e <HAL_RCC_OscConfig+0x4c2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x488>
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80017dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017de:	4a18      	ldr	r2, [pc, #96]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80017e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e4:	6353      	str	r3, [r2, #52]	; 0x34
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80017ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017f0:	6353      	str	r3, [r2, #52]	; 0x34
 80017f2:	e01c      	b.n	800182e <HAL_RCC_OscConfig+0x4c2>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x4aa>
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001806:	6353      	str	r3, [r2, #52]	; 0x34
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6353      	str	r3, [r2, #52]	; 0x34
 8001814:	e00b      	b.n	800182e <HAL_RCC_OscConfig+0x4c2>
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 800181c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001820:	6353      	str	r3, [r2, #52]	; 0x34
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 8001828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800182c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d024      	beq.n	8001880 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fa5b 	bl	8000cf0 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800183c:	e019      	b.n	8001872 <HAL_RCC_OscConfig+0x506>
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	08002b18 	.word	0x08002b18
 8001848:	20000014 	.word	0x20000014
 800184c:	20000018 	.word	0x20000018
 8001850:	42470020 	.word	0x42470020
 8001854:	42470680 	.word	0x42470680
 8001858:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff fa48 	bl	8000cf0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e0a3      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0ee      	beq.n	800185c <HAL_RCC_OscConfig+0x4f0>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff fa36 	bl	8000cf0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001886:	e00a      	b.n	800189e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f7ff fa32 	bl	8000cf0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e08d      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800189e:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ee      	bne.n	8001888 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b0:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 80018b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d079      	beq.n	80019b8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d056      	beq.n	8001978 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d13b      	bne.n	800194a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_OscConfig+0x65c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fa0a 	bl	8000cf0 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fa06 	bl	8000cf0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e063      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	4319      	orrs	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	430b      	orrs	r3, r1
 8001916:	492b      	ldr	r1, [pc, #172]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_RCC_OscConfig+0x65c>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff f9e5 	bl	8000cf0 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f9e1 	bl	8000cf0 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e03e      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x5be>
 8001948:	e036      	b.n	80019b8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_RCC_OscConfig+0x65c>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff f9ce 	bl	8000cf0 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f9ca 	bl	8000cf0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e027      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x5ec>
 8001976:	e01f      	b.n	80019b8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e01a      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x658>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	429a      	cmp	r2, r3
 8001996:	d10d      	bne.n	80019b4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d106      	bne.n	80019b4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	42470060 	.word	0x42470060

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e11a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b8f      	ldr	r3, [pc, #572]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d919      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x34>
 80019f4:	4b8a      	ldr	r3, [pc, #552]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a89      	ldr	r2, [pc, #548]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b87      	ldr	r3, [pc, #540]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 0201 	bic.w	r2, r3, #1
 8001a08:	4985      	ldr	r1, [pc, #532]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a10:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0f9      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2e:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	497a      	ldr	r1, [pc, #488]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 808e 	beq.w	8001b6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a56:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d121      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0d7      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0cb      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0bf      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0b7      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b5f      	ldr	r3, [pc, #380]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	495c      	ldr	r1, [pc, #368]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff f91a 	bl	8000cf0 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d112      	bne.n	8001aec <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac8:	f7ff f912 	bl	8000cf0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e09b      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ade:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d1ee      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xfc>
 8001aea:	e03e      	b.n	8001b6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d112      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f7ff f8fb 	bl	8000cf0 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e084      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b0c:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x12a>
 8001b18:	e027      	b.n	8001b6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d11d      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff f8e4 	bl	8000cf0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e06d      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d1ee      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x158>
 8001b46:	e010      	b.n	8001b6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff f8d2 	bl	8000cf0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e05b      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1ee      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d219      	bcs.n	8001bac <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d105      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x1be>
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0201 	bic.w	r2, r3, #1
 8001b92:	4923      	ldr	r1, [pc, #140]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_RCC_ClockConfig+0x254>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e034      	b.n	8001c16 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4917      	ldr	r1, [pc, #92]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	490f      	ldr	r1, [pc, #60]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bea:	f000 f823 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_RCC_ClockConfig+0x258>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	490b      	ldr	r1, [pc, #44]	; (8001c28 <HAL_RCC_ClockConfig+0x25c>)
 8001bfc:	5ccb      	ldrb	r3, [r1, r3]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f824 	bl	8000c58 <HAL_InitTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c14:	7afb      	ldrb	r3, [r7, #11]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08002b18 	.word	0x08002b18
 8001c2c:	20000014 	.word	0x20000014
 8001c30:	20000018 	.word	0x20000018

08001c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c38:	b092      	sub	sp, #72	; 0x48
 8001c3a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c3c:	4b79      	ldr	r3, [pc, #484]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d00d      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x34>
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	f200 80d5 	bhi.w	8001dfc <HAL_RCC_GetSysClockFreq+0x1c8>
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x28>
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x2e>
 8001c5a:	e0cf      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001c5e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001c60:	e0da      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c62:	4b72      	ldr	r3, [pc, #456]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001c64:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001c66:	e0d7      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c6a:	0c9b      	lsrs	r3, r3, #18
 8001c6c:	f003 020f 	and.w	r2, r3, #15
 8001c70:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c78:	0d9b      	lsrs	r3, r3, #22
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c82:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d05d      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c90:	2200      	movs	r2, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	4611      	mov	r1, r2
 8001c96:	4604      	mov	r4, r0
 8001c98:	460d      	mov	r5, r1
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	462b      	mov	r3, r5
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	0159      	lsls	r1, r3, #5
 8001ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cac:	0150      	lsls	r0, r2, #5
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1a51      	subs	r1, r2, r1
 8001cb6:	6139      	str	r1, [r7, #16]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ccc:	4659      	mov	r1, fp
 8001cce:	018b      	lsls	r3, r1, #6
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd6:	4651      	mov	r1, sl
 8001cd8:	018a      	lsls	r2, r1, #6
 8001cda:	46d4      	mov	ip, sl
 8001cdc:	ebb2 080c 	subs.w	r8, r2, ip
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cfa:	4690      	mov	r8, r2
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	eb18 0303 	adds.w	r3, r8, r3
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	462b      	mov	r3, r5
 8001d08:	eb49 0303 	adc.w	r3, r9, r3
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	024b      	lsls	r3, r1, #9
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	4604      	mov	r4, r0
 8001d24:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001d28:	4601      	mov	r1, r0
 8001d2a:	024a      	lsls	r2, r1, #9
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	2200      	movs	r2, #0
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d3c:	f7fe fa1e 	bl	800017c <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	647b      	str	r3, [r7, #68]	; 0x44
 8001d48:	e055      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	627a      	str	r2, [r7, #36]	; 0x24
 8001d52:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d56:	4642      	mov	r2, r8
 8001d58:	464b      	mov	r3, r9
 8001d5a:	f04f 0000 	mov.w	r0, #0
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	0159      	lsls	r1, r3, #5
 8001d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d68:	0150      	lsls	r0, r2, #5
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	46c4      	mov	ip, r8
 8001d70:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001d74:	4640      	mov	r0, r8
 8001d76:	4649      	mov	r1, r9
 8001d78:	468c      	mov	ip, r1
 8001d7a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d8a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d8e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d92:	ebb2 040a 	subs.w	r4, r2, sl
 8001d96:	eb63 050b 	sbc.w	r5, r3, fp
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	00eb      	lsls	r3, r5, #3
 8001da4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da8:	00e2      	lsls	r2, r4, #3
 8001daa:	4614      	mov	r4, r2
 8001dac:	461d      	mov	r5, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	18e3      	adds	r3, r4, r3
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	460b      	mov	r3, r1
 8001db6:	eb45 0303 	adc.w	r3, r5, r3
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dc8:	4629      	mov	r1, r5
 8001dca:	028b      	lsls	r3, r1, #10
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	028a      	lsls	r2, r1, #10
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de0:	2200      	movs	r2, #0
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	61fa      	str	r2, [r7, #28]
 8001de6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dea:	f7fe f9c7 	bl	800017c <__aeabi_uldivmod>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4613      	mov	r3, r2
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001dfa:	e00d      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0b5b      	lsrs	r3, r3, #13
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001e16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3748      	adds	r7, #72	; 0x48
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200
 8001e30:	08002b0c 	.word	0x08002b0c

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000014 	.word	0x20000014

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	08002b28 	.word	0x08002b28

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08002b28 	.word	0x08002b28

08001e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d12c      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e016      	b.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6253      	str	r3, [r2, #36]	; 0x24
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ee8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001efc:	d105      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f04:	d101      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001f06:	2301      	movs	r3, #1
 8001f08:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 0201 	bic.w	r2, r3, #1
 8001f24:	490b      	ldr	r1, [pc, #44]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e03f      	b.n	8001fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fda8 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	; 0x24
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fc85 	bl	80028ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b08a      	sub	sp, #40	; 0x28
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	d17c      	bne.n	800210c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_UART_Transmit+0x2c>
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e075      	b.n	800210e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_UART_Transmit+0x3e>
 800202c:	2302      	movs	r3, #2
 800202e:	e06e      	b.n	800210e <HAL_UART_Transmit+0x11c>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2221      	movs	r2, #33	; 0x21
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002046:	f7fe fe53 	bl	8000cf0 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	88fa      	ldrh	r2, [r7, #6]
 8002050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002060:	d108      	bne.n	8002074 <HAL_UART_Transmit+0x82>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d104      	bne.n	8002074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	e003      	b.n	800207c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002084:	e02a      	b.n	80020dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fa38 	bl	8002506 <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e036      	b.n	800210e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	3302      	adds	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	e007      	b.n	80020ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3301      	adds	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1cf      	bne.n	8002086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2140      	movs	r1, #64	; 0x40
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fa08 	bl	8002506 <UART_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e006      	b.n	800210e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	4613      	mov	r3, r2
 8002122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b20      	cmp	r3, #32
 800212e:	d11d      	bne.n	800216c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_UART_Receive_IT+0x26>
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e016      	b.n	800216e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_UART_Receive_IT+0x38>
 800214a:	2302      	movs	r3, #2
 800214c:	e00f      	b.n	800216e <HAL_UART_Receive_IT+0x58>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	461a      	mov	r2, r3
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fa19 	bl	800259a <UART_Start_Receive_IT>
 8002168:	4603      	mov	r3, r0
 800216a:	e000      	b.n	800216e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10d      	bne.n	80021ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_UART_IRQHandler+0x52>
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fac9 	bl	800275a <UART_Receive_IT>
      return;
 80021c8:	e17b      	b.n	80024c2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80b1 	beq.w	8002334 <HAL_UART_IRQHandler+0x1bc>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_UART_IRQHandler+0x70>
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80a6 	beq.w	8002334 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_UART_IRQHandler+0x90>
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_UART_IRQHandler+0xb0>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f043 0202 	orr.w	r2, r3, #2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_UART_IRQHandler+0xd0>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f043 0204 	orr.w	r2, r3, #4
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00f      	beq.n	8002272 <HAL_UART_IRQHandler+0xfa>
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d104      	bne.n	8002266 <HAL_UART_IRQHandler+0xee>
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f043 0208 	orr.w	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 811e 	beq.w	80024b8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_UART_IRQHandler+0x11e>
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fa62 	bl	800275a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <HAL_UART_IRQHandler+0x146>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d031      	beq.n	8002322 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9a4 	bl	800260c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d123      	bne.n	800231a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d013      	beq.n	8002312 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	4a76      	ldr	r2, [pc, #472]	; (80024c8 <HAL_UART_IRQHandler+0x350>)
 80022f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fe4e 	bl	8000f98 <HAL_DMA_Abort_IT>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800230c:	4610      	mov	r0, r2
 800230e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002310:	e00e      	b.n	8002330 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8e3 	bl	80024de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002318:	e00a      	b.n	8002330 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f8df 	bl	80024de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002320:	e006      	b.n	8002330 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8db 	bl	80024de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800232e:	e0c3      	b.n	80024b8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002330:	bf00      	nop
    return;
 8002332:	e0c1      	b.n	80024b8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	2b01      	cmp	r3, #1
 800233a:	f040 80a1 	bne.w	8002480 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 809b 	beq.w	8002480 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8095 	beq.w	8002480 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d14e      	bne.n	8002418 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002384:	8a3b      	ldrh	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8098 	beq.w	80024bc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002390:	8a3a      	ldrh	r2, [r7, #16]
 8002392:	429a      	cmp	r2, r3
 8002394:	f080 8092 	bcs.w	80024bc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8a3a      	ldrh	r2, [r7, #16]
 800239c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d02b      	beq.n	8002400 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0210 	bic.w	r2, r2, #16
 80023f4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fd8f 	bl	8000f1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002408:	b29b      	uxth	r3, r3
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	b29b      	uxth	r3, r3
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f86d 	bl	80024f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002416:	e051      	b.n	80024bc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002420:	b29b      	uxth	r3, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d047      	beq.n	80024c0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002430:	8a7b      	ldrh	r3, [r7, #18]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d044      	beq.n	80024c0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002444:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002474:	8a7b      	ldrh	r3, [r7, #18]
 8002476:	4619      	mov	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f839 	bl	80024f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800247e:	e01f      	b.n	80024c0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_UART_IRQHandler+0x324>
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f8f9 	bl	800268c <UART_Transmit_IT>
    return;
 800249a:	e012      	b.n	80024c2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <HAL_UART_IRQHandler+0x34a>
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f93a 	bl	800272a <UART_EndTransmit_IT>
    return;
 80024b6:	e004      	b.n	80024c2 <HAL_UART_IRQHandler+0x34a>
    return;
 80024b8:	bf00      	nop
 80024ba:	e002      	b.n	80024c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80024c0:	bf00      	nop
  }
}
 80024c2:	3728      	adds	r7, #40	; 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	08002665 	.word	0x08002665

080024cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002516:	e02c      	b.n	8002572 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d028      	beq.n	8002572 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <UART_WaitOnFlagUntilTimeout+0x30>
 8002526:	f7fe fbe3 	bl	8000cf0 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	429a      	cmp	r2, r3
 8002534:	d21d      	bcs.n	8002572 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002544:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e00f      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4013      	ands	r3, r2
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	bf0c      	ite	eq
 8002582:	2301      	moveq	r3, #1
 8002584:	2300      	movne	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	429a      	cmp	r2, r3
 800258e:	d0c3      	beq.n	8002518 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	4613      	mov	r3, r2
 80025a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	88fa      	ldrh	r2, [r7, #6]
 80025b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2222      	movs	r2, #34	; 0x22
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025de:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002622:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0210 	bic.w	r2, r2, #16
 800264a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff ff2d 	bl	80024de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b21      	cmp	r3, #33	; 0x21
 800269e:	d13e      	bne.n	800271e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a8:	d114      	bne.n	80026d4 <UART_Transmit_IT+0x48>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d110      	bne.n	80026d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	1c9a      	adds	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	621a      	str	r2, [r3, #32]
 80026d2:	e008      	b.n	80026e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	1c59      	adds	r1, r3, #1
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6211      	str	r1, [r2, #32]
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4619      	mov	r1, r3
 80026f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002708:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002718:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
  }
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002740:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff febe 	bl	80024cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b22      	cmp	r3, #34	; 0x22
 800276c:	f040 8099 	bne.w	80028a2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002778:	d117      	bne.n	80027aa <UART_Receive_IT+0x50>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002798:	b29a      	uxth	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	1c9a      	adds	r2, r3, #2
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
 80027a8:	e026      	b.n	80027f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027bc:	d007      	beq.n	80027ce <UART_Receive_IT+0x74>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <UART_Receive_IT+0x82>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e008      	b.n	80027ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29b      	uxth	r3, r3
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4619      	mov	r1, r3
 8002806:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002808:	2b00      	cmp	r3, #0
 800280a:	d148      	bne.n	800289e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0220 	bic.w	r2, r2, #32
 800281a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800282a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	2b01      	cmp	r3, #1
 800284a:	d123      	bne.n	8002894 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0210 	bic.w	r2, r2, #16
 8002860:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b10      	cmp	r3, #16
 800286e:	d10a      	bne.n	8002886 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fe2f 	bl	80024f0 <HAL_UARTEx_RxEventCallback>
 8002892:	e002      	b.n	800289a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe f829 	bl	80008ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e002      	b.n	80028a4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028ec:	f023 030c 	bic.w	r3, r3, #12
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	430b      	orrs	r3, r1
 80028f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a55      	ldr	r2, [pc, #340]	; (8002a6c <UART_SetConfig+0x1c0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d103      	bne.n	8002922 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800291a:	f7ff faa9 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	e002      	b.n	8002928 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002922:	f7ff fa91 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002926:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002930:	d14c      	bne.n	80029cc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	009a      	lsls	r2, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	4a49      	ldr	r2, [pc, #292]	; (8002a70 <UART_SetConfig+0x1c4>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	0119      	lsls	r1, r3, #4
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	009a      	lsls	r2, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fbb2 f2f3 	udiv	r2, r2, r3
 8002968:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <UART_SetConfig+0x1c4>)
 800296a:	fba3 0302 	umull	r0, r3, r3, r2
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2064      	movs	r0, #100	; 0x64
 8002972:	fb00 f303 	mul.w	r3, r0, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	3332      	adds	r3, #50	; 0x32
 800297c:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <UART_SetConfig+0x1c4>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800298a:	4419      	add	r1, r3
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	009a      	lsls	r2, r3, #2
 8002996:	441a      	add	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a2:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <UART_SetConfig+0x1c4>)
 80029a4:	fba3 0302 	umull	r0, r3, r3, r2
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	2064      	movs	r0, #100	; 0x64
 80029ac:	fb00 f303 	mul.w	r3, r0, r3
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	3332      	adds	r3, #50	; 0x32
 80029b6:	4a2e      	ldr	r2, [pc, #184]	; (8002a70 <UART_SetConfig+0x1c4>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	f003 0207 	and.w	r2, r3, #7
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	440a      	add	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029ca:	e04a      	b.n	8002a62 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	009a      	lsls	r2, r3, #2
 80029d6:	441a      	add	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <UART_SetConfig+0x1c4>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	0119      	lsls	r1, r3, #4
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	441a      	add	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <UART_SetConfig+0x1c4>)
 8002a04:	fba3 0302 	umull	r0, r3, r3, r2
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	2064      	movs	r0, #100	; 0x64
 8002a0c:	fb00 f303 	mul.w	r3, r0, r3
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	3332      	adds	r3, #50	; 0x32
 8002a16:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <UART_SetConfig+0x1c4>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a22:	4419      	add	r1, r3
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009a      	lsls	r2, r3, #2
 8002a2e:	441a      	add	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <UART_SetConfig+0x1c4>)
 8002a3c:	fba3 0302 	umull	r0, r3, r3, r2
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	2064      	movs	r0, #100	; 0x64
 8002a44:	fb00 f303 	mul.w	r3, r0, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	3332      	adds	r3, #50	; 0x32
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <UART_SetConfig+0x1c4>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	f003 020f 	and.w	r2, r3, #15
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	440a      	add	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	51eb851f 	.word	0x51eb851f

08002a74 <__libc_init_array>:
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	2600      	movs	r6, #0
 8002a78:	4d0c      	ldr	r5, [pc, #48]	; (8002aac <__libc_init_array+0x38>)
 8002a7a:	4c0d      	ldr	r4, [pc, #52]	; (8002ab0 <__libc_init_array+0x3c>)
 8002a7c:	1b64      	subs	r4, r4, r5
 8002a7e:	10a4      	asrs	r4, r4, #2
 8002a80:	42a6      	cmp	r6, r4
 8002a82:	d109      	bne.n	8002a98 <__libc_init_array+0x24>
 8002a84:	f000 f822 	bl	8002acc <_init>
 8002a88:	2600      	movs	r6, #0
 8002a8a:	4d0a      	ldr	r5, [pc, #40]	; (8002ab4 <__libc_init_array+0x40>)
 8002a8c:	4c0a      	ldr	r4, [pc, #40]	; (8002ab8 <__libc_init_array+0x44>)
 8002a8e:	1b64      	subs	r4, r4, r5
 8002a90:	10a4      	asrs	r4, r4, #2
 8002a92:	42a6      	cmp	r6, r4
 8002a94:	d105      	bne.n	8002aa2 <__libc_init_array+0x2e>
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a9c:	4798      	blx	r3
 8002a9e:	3601      	adds	r6, #1
 8002aa0:	e7ee      	b.n	8002a80 <__libc_init_array+0xc>
 8002aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa6:	4798      	blx	r3
 8002aa8:	3601      	adds	r6, #1
 8002aaa:	e7f2      	b.n	8002a92 <__libc_init_array+0x1e>
 8002aac:	08002b38 	.word	0x08002b38
 8002ab0:	08002b38 	.word	0x08002b38
 8002ab4:	08002b38 	.word	0x08002b38
 8002ab8:	08002b3c 	.word	0x08002b3c

08002abc <memset>:
 8002abc:	4603      	mov	r3, r0
 8002abe:	4402      	add	r2, r0
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <memset+0xa>
 8002ac4:	4770      	bx	lr
 8002ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aca:	e7f9      	b.n	8002ac0 <memset+0x4>

08002acc <_init>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr

08002ad8 <_fini>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	bf00      	nop
 8002adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ade:	bc08      	pop	{r3}
 8002ae0:	469e      	mov	lr, r3
 8002ae2:	4770      	bx	lr
